#
# This file is part of "hybris integration" plugin for Intellij IDEA.
# Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

hybris.project.import.scanning=Scanning hybris Projects
hybris.project.import.commit=Importing hybris Projects
hybris.project.name=hybris
hybris.project.error=Error
hybris.project.import.run.configuration.debug=debug
hybris.project.import.searching.hybris.distribution=Searching hybris Distribution
hybris.project.import.scan.failed=Failed to scan following paths: {0}
hybris.project.import.dialog.message=<b>hybris</b> - select parent directory which contains all hybris and custom extensions
hybris.project.import.duplicate.projects.found=Duplicate modules selected:\n\n{0}\n\nPlease deselect duplicates.
hybris.project.import.duplicate.modules.found=Some of the modules you are trying to import already have idea module files. Would you like to use them?\n\n{0}
hybris.project.import.found.idea.module.files=Found Idea Module Files
hybris.project.import.select.directory.where.new.idea.module.files.will.be.stored=Select a Directory Where New IDEA Module Files Will Be Stored.
hybris.project.import.error.nothing.found.to.import=Nothing found to import
hybris.project.import.error.unable.to.proceed=Unable to Proceed
hybris.project.view.junk.directory.name=junk (virtual directory)

hybris.import.label.select.hybris.src.file=Select Source Code Jar File (Optional).
hybris.import.label.select.hybris.distribution.directory=Select Hybris Installation Directory
hybris.import.label.select.custom.extensions.directory=Select Custom Extensions Directory

hybris.import.settings.impex.title=Impex
hybris.import.settings.project.title=Project Import
hybris.import.settings.junk.directory.name=Junk directories (will be grouped into a virtual directory)
hybris.import.settings.junk.directory.popup.edit.title=Edit
hybris.import.settings.junk.directory.popup.edit.text=Edit directory name
hybris.import.settings.junk.directory.popup.add.title=Add
hybris.import.settings.junk.directory.popup.add.text=Add directory name
hybris.import.settings.spring.for.custom.extensions.only=Create Spring facet for custom extensions only
hybris.import.settings.group.modules=Group Modules
hybris.import.settings.group.platform=platform
hybris.import.settings.group.custom=custom
hybris.import.settings.group.customunused=custom/unused
hybris.import.settings.group.hybris=hybris
hybris.import.settings.group.hybrisunused=hybris/unused
hybris.import.settings.group.nonhybris=others
hybris.import.settings.import.ootb.modules.read.only.label=Default value for Import OOTB modules in read-only mode
hybris.import.settings.create.backward.cyclic.dependencies.for.add.ons.label=Create backward cyclic dependencies for AddOns (not recommended because it is bad practice)
hybris.import.settings.import.ootb.modules.read.only.tooltip=This Value will be pre-filled everytime you import a new project. Extremely improves compilation performance and reduces possible amount of compilation errors but you wont be able to use code assistance in OOTB modules.

hybris.import.wizard.import.ootb.modules.read.only.label=Import OOTB modules in read-only mode
hybris.import.wizard.import.ootb.modules.read.only.tooltip=Extremely improves compilation performance and reduces possible amount of compilation errors but you wont be able to use code assistance in OOTB modules.
hybris.import.wizard.source.code.path.label=hybris Source Code (Optional)
hybris.import.wizard.source.code.path.tooltip=hybris source code *.zip file. Do not extract it.
hybris.import.wizard.javadoc.url.label=hybris Javadoc Url (Optional)
hybris.import.wizard.javadoc.url.tooltip=Url of hybris javadoc (for instance https://download.hybris.com/api/5.7.0/commercesuite/).
hybris.import.wizard.project.name.label=Project Name
hybris.import.wizard.store.idea.modules.file.in.label=Store IDEA Module Files In
hybris.import.wizard.store.idea.modules.file.in.tooltip=A directory where all IDEA module files will be stored.
hybris.import.wizard.hybris.directory.override.label=Custom Directory Override
hybris.import.wizard.hybris.directory.override.tooltip=if your project doesn't follow the recommended directory structure, click here to override
hybris.import.wizard.hybris.distribution.directory.and.custom.directory.separator.label=If you custom directory is in bin/ext-* directory or is outside of the project root directory you can override it below
hybris.import.wizard.hybris.distribution.directory.label=hybris Installation Directory
hybris.import.wizard.hybris.distribution.directory.tooltip=It's the root directory where your hybris is located. By default the name of the directory is "hybris".
hybris.import.wizard.custom.extensions.directory.label=Custom Extensions Directory
hybris.import.wizard.custom.extensions.directory.tooltip=It's the directory where you keep all you custom directories. By default it is "bin/custom". This directory can contain subdirectories.
hybris.import.wizard.validation.hybris.distribution.directory.empty="hybris Installation Directory" parameter can not be empty.
hybris.import.wizard.validation.hybris.distribution.directory.does.not.exist=hybris installation directory does not exist or is not a directory.
hybris.import.wizard.validation.hybris.distribution.directory.is.outside.of.project.root.directory=hybris installation directory can not be outside of project root directory: {0}
hybris.import.wizard.validation.custom.extensions.directory.empty="Custom Extensions Directory" parameter can not be empty.
hybris.import.wizard.validation.custom.extensions.directory.does.not.exist=Custom extensions directory does not exist or is not a directory.
hybris.import.wizard.clear.output.directory.title=Warning
hybris.import.wizard.clear.output.directory.description=Your compiler setting is set to clear directory upon project rebuild (Build->Rebuild Project). \n\nThis will damage the hybris installation by deleting resources which will not be restored even by calling "ant clean all". You'll have to download hybris again. \n\nThis setting is not project specific and will influence even non-hybris projects.\n
hybris.import.wizard.clear.output.directory.action=This setting will be unset for your convenience.
hybris.business.process.provider.name=hybris Business Process
hybris.business.process.timeout=Timeout:

hybris.project.view.tree.settings=Project Tree Settings
hybris.project.view.tree.hide.empty.middle.folders=Hide Empty Middle Folders

hybris.inspection.tsv.key=hybris TSV Inspections

hybris.project.open.outdated.title=Outdated project structure
hybris.project.open.outdated.text=Re-import your project by File->New->Project from existing sources->Import project from external model->hybris
hybris.project.import.preparation=Initializing module import
hybris.project.import.facets=Configuring facets
hybris.project.import.spring=Configuring Spring
hybris.project.import.module.import=Importing module {0}
hybris.project.import.module.settings=Configuring module settings
hybris.project.import.module.sdk=Configuring SDK
hybris.project.import.module.libs=Configuring libraries
hybris.project.import.module.content=Configuring module content roots
hybris.project.import.module.outputpath=Configuring output paths
hybris.project.import.module.javadoc=Configuring javadoc
hybris.project.import.module.groups=Configuring module group
hybris.project.import.module.save=Saving module definition
hybris.project.import.module.facet=Configuring module facets
hybris.project.import.save=Saving module settings
hybris.project.import.dependencies=Configuring module dependencies
hybris.project.import.runconfigurations=Configuring run configuration
hybris.project.import.vcs=Detecting Version Control System
hybris.project.import.finishing=Finishing import
hybris.project.import.cache.no=Cancel
hybris.project.import.cache.yes=Invalidate and &Restart
hybris.project.import.cache.title=Invalidate Caches / Restart...
hybris.project.import.cache.message=It is recommended to invalidate caches after a project import.\n\nThe caches will be invalidated and rebuilt on the next startup.\n\nWould you like to continue?\n

