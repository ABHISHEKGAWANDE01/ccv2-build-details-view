/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.intellij.idea.plugin.hybris.flexibleSearch;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static com.intellij.idea.plugin.hybris.flexibleSearch.FlexibleSearchParserDefinition.COMMENT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.ALL;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.AND;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.ANY;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.AS;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.ASC;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.ASTERISK;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.AVG;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.BETWEEN;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.BY;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.COLON;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.COLUMN_REFERENCE_IDENTIFIER;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.COMMA;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.CONCAT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.COUNT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.DESC;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.DISTINCT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.DOT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.EQUALS_OPERATOR;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.EVERY;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.EXCLAMATION_MARK;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.EXISTS;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.FALSE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.FIRST;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.FROM;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.GREATER_THAN_OPERATOR;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.GREATER_THAN_OR_EQUALS_OPERATOR;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.GROUP;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.IDENTIFIER;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.IS;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.JOIN;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LAST;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LEFT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LEFT_BRACE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LEFT_DOUBLE_BRACE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LEFT_PAREN;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LESS_THAN_OPERATOR;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LESS_THAN_OR_EQUALS_OPERATOR;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.LIKE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.MAX;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.MIN;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.NOT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.NOT_EQUALS_OPERATOR;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.NULL;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.NUMBER;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.ON;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.OR;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.ORDER;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.QUESTION_MARK;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.RIGHT_BRACE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.RIGHT_DOUBLE_BRACE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.RIGHT_PAREN;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.SELECT;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.SEMICOLON;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.SOME;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.STRING;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.SUM;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.TABLE_NAME_IDENTIFIER;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.TRUE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.UNION;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.WHERE;
import static com.intellij.psi.TokenType.WHITE_SPACE;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>flexibleSearch.flex</tt>
 */
public class FlexibleSearchLexer implements FlexLexer {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int SELECT_EXP = 2;
    public static final int FROM_EXP = 4;
    public static final int TABLE_IDENTIFIER = 6;
    public static final int COLUMN_IDENTIFIER = 8;
    public static final int WHERE_EXP = 10;
    public static final int ON_EXP = 12;
    public static final int CORRELATION_NAME = 14;
    public static final int SUB_QUERY = 16;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
        8, 8
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [12, 6, 3]
     * Total runtime size is 15472 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
    }

    /* The ZZ_CMAP_Z table has 2176 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
        "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33" +
        "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1" +
        "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25" +
        "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123" +
        "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

    /* The ZZ_CMAP_Y table has 3776 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
        "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14" +
        "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1" +
        "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\21\1\36\11\21" +
        "\1\37\21\21\1\40\1\41\23\21\1\27\1\42\3\21\1\22\1\43\1\42\4\21\1\44\1\45\4" +
        "\0\1\46\1\47\1\27\3\21\2\50\1\27\1\51\1\52\1\0\1\53\5\21\1\54\2\0\1\5\1\55" +
        "\1\56\13\21\1\57\1\46\1\60\1\61\1\5\1\62\1\27\1\63\1\64\3\21\3\0\1\65\12\21" +
        "\1\66\1\0\1\67\1\27\1\5\1\70\3\21\1\54\1\71\1\20\2\21\1\66\1\72\1\73\1\74" +
        "\2\27\3\21\1\75\10\27\1\76\1\30\6\27\1\77\2\0\1\100\1\101\6\21\1\102\2\0\1" +
        "\103\1\21\1\104\1\5\2\42\1\105\1\106\1\107\2\21\1\76\1\110\1\111\1\112\1\113" +
        "\1\63\1\114\1\104\1\5\1\115\1\52\1\105\1\116\1\107\2\21\1\76\1\117\1\120\1" +
        "\121\1\122\1\123\1\124\1\125\1\5\1\126\1\27\1\105\1\37\1\36\2\21\1\76\1\127" +
        "\1\111\1\46\1\130\1\131\1\27\1\104\1\5\1\43\1\27\1\105\1\106\1\107\2\21\1" +
        "\76\1\127\1\111\1\112\1\122\1\132\1\114\1\104\1\5\1\43\1\27\1\133\1\134\1" +
        "\135\1\136\1\137\1\134\1\21\1\140\1\141\1\142\1\143\1\27\1\125\1\5\1\27\1" +
        "\43\1\105\1\32\1\76\2\21\1\76\1\144\1\145\1\146\1\142\1\147\1\26\1\104\1\5" +
        "\2\27\1\150\1\32\1\76\2\21\1\76\1\144\1\111\1\146\1\142\1\147\1\34\1\104\1" +
        "\5\1\151\1\27\1\150\1\32\1\76\4\21\1\152\1\146\1\153\1\63\1\27\1\104\1\5\1" +
        "\27\1\41\1\150\1\21\1\22\1\41\2\21\1\36\1\154\1\22\1\155\1\156\1\0\1\157\1" +
        "\160\1\161\1\27\1\42\5\21\1\162\1\163\1\164\1\100\1\5\1\165\4\27\1\166\1\167" +
        "\1\170\1\42\1\171\1\172\1\162\1\173\1\174\1\175\1\5\1\176\4\27\1\131\2\27" +
        "\1\177\1\5\1\165\1\200\1\201\1\21\1\42\3\21\1\30\1\45\1\0\1\146\1\202\1\0" +
        "\1\45\3\0\1\51\1\203\7\27\5\21\1\54\1\0\1\204\1\5\1\165\1\66\1\205\1\206\1" +
        "\207\1\210\1\21\1\211\1\212\1\5\1\213\4\21\1\37\1\17\5\21\1\214\51\21\1\135" +
        "\1\22\1\135\5\21\1\135\4\21\1\135\1\22\1\135\1\21\1\22\7\21\1\135\10\21\1" +
        "\215\4\27\2\21\2\27\12\21\1\30\1\27\1\42\114\21\1\106\2\21\1\216\2\21\1\50" +
        "\11\21\1\134\1\131\1\27\1\21\1\32\1\217\1\27\2\21\1\217\1\27\2\21\1\220\1" +
        "\27\1\21\1\32\1\221\1\27\6\21\1\222\3\0\1\223\1\224\1\5\1\165\3\27\1\225\1" +
        "\5\1\165\13\21\1\27\5\21\1\226\10\21\1\227\1\27\3\21\1\30\1\0\1\2\1\0\1\2" +
        "\1\125\1\5\3\21\1\227\1\30\1\27\5\21\1\115\2\0\1\56\1\177\1\5\1\165\4\27\2" +
        "\21\1\164\1\2\6\21\1\202\1\100\3\0\1\112\1\5\1\165\1\5\1\165\1\44\13\27\1" +
        "\230\5\21\1\222\1\0\1\230\1\115\1\5\1\165\1\27\1\231\1\2\1\27\1\232\3\21\1" +
        "\103\1\207\1\5\1\70\4\21\1\66\1\0\1\2\1\27\4\21\1\222\2\0\1\27\1\5\1\233\1" +
        "\5\1\70\3\21\1\227\12\27\1\234\2\0\1\235\1\236\1\27\30\21\4\0\1\100\2\27\1" +
        "\77\42\21\2\227\4\21\2\227\1\21\1\237\3\21\1\227\6\21\1\32\1\174\1\240\1\30" +
        "\1\241\1\115\1\21\1\30\1\240\1\30\1\242\1\243\3\27\1\244\1\27\1\44\1\131\1" +
        "\27\1\245\1\246\1\51\1\247\1\43\1\44\2\27\1\21\1\30\3\21\1\50\2\27\1\0\1\51" +
        "\1\250\1\0\1\251\1\27\1\252\1\41\1\154\1\253\1\31\1\254\1\21\1\255\1\256\1" +
        "\257\2\27\5\21\1\131\116\27\5\21\1\22\5\21\1\22\20\21\1\30\1\260\1\261\1\27" +
        "\4\21\1\37\1\17\7\21\1\44\1\27\1\63\2\21\1\22\1\27\10\22\4\0\5\27\1\44\72" +
        "\27\1\262\3\27\1\42\1\211\1\253\1\30\1\42\11\21\1\22\1\263\1\42\12\21\1\214" +
        "\1\256\4\21\1\227\1\42\12\21\1\22\2\27\3\21\1\50\6\27\170\21\1\227\11\27\71" +
        "\21\1\30\6\27\21\21\1\30\10\27\5\21\1\227\41\21\1\30\2\21\1\5\1\264\2\27\5" +
        "\21\1\164\1\77\1\265\3\21\1\63\12\21\1\177\3\27\1\44\1\21\1\41\14\21\1\266" +
        "\1\115\1\27\1\21\1\50\11\27\1\21\1\267\1\270\2\21\1\54\2\27\1\131\6\21\1\115" +
        "\1\27\1\271\5\21\1\222\1\0\1\51\1\27\1\5\1\165\2\0\1\271\1\52\1\5\1\70\2\21" +
        "\1\66\1\175\2\21\1\164\1\0\1\2\1\27\3\21\1\30\1\101\5\21\1\54\1\0\1\251\1" +
        "\44\1\5\1\165\2\27\1\160\1\272\5\21\1\103\1\100\1\27\1\270\1\273\1\5\1\165" +
        "\2\21\1\22\1\274\6\21\1\206\1\275\1\226\2\27\1\276\1\21\1\54\1\277\1\27\3" +
        "\300\1\27\2\22\22\27\4\21\1\54\1\301\1\5\1\165\64\21\1\115\1\27\2\21\1\22" +
        "\1\302\5\21\1\115\40\27\55\21\1\227\15\21\1\26\4\27\1\22\1\27\1\302\1\303" +
        "\1\21\1\76\1\22\1\174\1\304\15\21\1\26\3\27\1\302\54\21\1\227\2\27\10\21\1" +
        "\41\6\21\5\27\1\21\1\30\2\0\2\27\1\100\1\27\1\137\2\27\1\256\3\27\1\43\1\32" +
        "\20\21\1\305\1\245\1\27\1\5\1\165\1\42\2\21\1\116\1\42\2\21\1\50\1\306\12" +
        "\21\1\22\3\41\1\307\1\310\2\27\1\311\1\21\1\144\2\21\1\22\2\21\1\312\1\21" +
        "\1\227\1\21\1\227\4\27\17\21\1\50\10\27\6\21\1\30\20\27\1\313\20\27\3\21\1" +
        "\30\6\21\1\131\5\27\3\21\1\22\2\27\3\21\1\50\6\27\3\21\1\227\4\21\1\115\1" +
        "\21\1\253\5\27\23\21\1\227\1\5\1\165\52\27\1\227\1\76\4\21\1\37\1\314\2\21" +
        "\1\227\25\27\2\21\1\227\1\27\3\21\1\26\10\27\7\21\1\306\10\27\1\315\1\77\1" +
        "\144\1\42\2\21\1\115\1\121\4\27\3\21\1\30\20\27\6\21\1\227\1\27\2\21\1\227" +
        "\1\27\2\21\1\50\21\27\11\21\1\131\66\27\1\232\6\21\1\0\1\100\3\27\1\125\1" +
        "\5\2\27\1\232\5\21\1\0\1\316\2\27\3\21\1\131\1\5\1\165\1\232\3\21\1\164\1" +
        "\0\1\317\1\5\10\27\1\232\5\21\1\54\1\0\1\320\1\27\1\5\1\165\42\27\1\160\1" +
        "\272\72\27\1\160\1\272\56\27\1\160\1\272\4\27\5\21\1\54\1\0\1\27\1\5\1\165" +
        "\14\27\1\160\1\272\64\27\1\160\1\272\42\27\55\21\1\22\22\27\14\21\1\50\63" +
        "\27\5\21\1\22\72\27\7\21\1\131\4\27\1\160\1\272\34\27\1\160\1\272\64\27\10" +
        "\21\1\30\1\27\1\103\4\0\1\100\1\27\1\63\1\232\1\21\14\27\1\26\153\27\1\321" +
        "\1\322\2\0\1\323\1\2\3\27\1\324\22\27\1\325\67\27\12\21\1\32\10\21\1\32\1" +
        "\326\1\327\1\21\1\330\1\144\7\21\1\37\1\331\2\32\3\21\1\332\1\174\1\41\1\76" +
        "\51\21\1\227\3\21\1\76\2\21\1\214\3\21\1\214\2\21\1\32\3\21\1\32\2\21\1\22" +
        "\3\21\1\22\3\21\1\76\3\21\1\76\2\21\1\214\1\333\6\5\1\144\3\21\1\166\1\42" +
        "\1\214\1\334\1\252\1\335\1\166\1\237\1\166\2\214\1\124\1\21\1\36\1\21\1\115" +
        "\1\336\1\36\1\21\1\115\50\27\32\21\1\22\5\27\106\21\1\30\1\27\33\21\1\227" +
        "\74\27\1\123\3\27\14\0\20\27\36\0\2\27");

    /* The ZZ_CMAP_A table has 1784 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
        "\11\2\1\11\1\3\2\11\1\3\6\2\4\0\1\11\1\26\2\0\1\1\2\0\1\5\1\17\1\20\1\21\1" +
        "\0\1\13\1\4\1\14\1\0\12\10\1\15\1\16\1\22\1\23\1\24\1\25\1\0\1\36\1\52\1\34" +
        "\1\37\1\32\1\53\1\45\1\56\1\40\1\54\1\57\1\33\1\46\1\41\1\42\1\60\1\1\1\50" +
        "\1\31\1\35\1\43\1\44\1\55\1\47\1\51\1\1\1\0\1\6\2\0\1\1\1\47\1\51\1\1\1\27" +
        "\1\0\1\30\1\0\6\2\1\12\2\2\1\11\1\0\4\1\4\0\1\1\2\0\1\2\7\0\1\1\4\0\1\1\5" +
        "\0\17\1\1\0\2\40\15\1\1\31\2\1\4\0\4\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1" +
        "\0\2\1\2\0\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\13\1\1\0\3\1\1\0\5\2\2" +
        "\0\6\1\1\0\7\1\1\0\1\1\15\0\1\1\1\0\15\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\1\2\3" +
        "\1\5\0\5\2\6\0\1\1\4\0\3\2\5\0\3\1\5\2\2\10\4\0\2\1\1\2\13\1\1\0\1\1\7\2\2" +
        "\1\2\2\1\0\4\2\2\1\2\10\3\1\2\0\1\1\7\0\1\2\1\1\1\2\6\1\3\2\2\0\11\1\3\2\1" +
        "\1\6\0\2\10\6\1\4\2\2\1\2\0\2\2\1\1\11\2\1\1\3\2\1\1\5\2\2\0\1\1\3\2\4\0\1" +
        "\1\1\0\6\1\4\0\13\2\1\0\4\2\6\1\3\2\1\1\2\2\1\1\7\2\2\1\2\2\2\0\2\10\1\0\3" +
        "\2\1\0\10\1\2\0\2\1\2\0\6\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3" +
        "\2\1\1\5\0\2\1\1\0\5\1\4\0\3\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0" +
        "\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\2\10\2\2\3\1\1\2\2\0\1\1" +
        "\1\0\2\1\1\0\3\1\2\2\1\0\3\2\2\0\1\1\15\0\2\2\2\0\1\2\1\1\1\0\6\1\3\0\3\1" +
        "\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\2\1\4\0\5\2\3\0\3\2\1\0\4\2\2" +
        "\0\1\1\6\0\1\2\4\1\1\0\5\1\3\0\1\1\7\2\1\0\2\2\5\0\2\2\3\0\2\2\1\0\3\1\1\0" +
        "\2\1\5\0\3\1\2\0\1\1\3\2\1\0\4\2\1\1\1\0\4\1\1\0\1\1\4\0\1\2\4\0\6\2\1\0\1" +
        "\2\7\0\12\7\2\0\2\2\4\0\1\1\1\2\2\1\7\2\4\0\10\1\1\2\2\10\7\0\2\1\1\0\1\1" +
        "\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\3\1\2" +
        "\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\2\10\2\0\4\1\2\2\13\0\1\2\1\0\1" +
        "\2\1\0\1\2\4\0\2\2\5\1\3\2\6\0\1\2\1\0\7\2\1\1\2\2\4\1\3\2\1\1\3\2\2\1\7\2" +
        "\3\1\4\2\5\1\14\2\1\1\1\2\2\10\4\2\2\0\3\1\1\0\7\1\2\0\3\2\1\11\11\1\3\2\3" +
        "\0\2\1\2\2\4\0\1\1\1\0\2\2\4\0\4\1\10\2\3\0\1\1\3\0\2\1\1\2\5\0\3\2\2\0\1" +
        "\1\1\2\1\1\5\0\6\1\2\0\5\2\3\1\3\0\10\2\5\1\2\10\3\0\3\1\3\2\1\0\5\2\4\1\1" +
        "\2\4\1\3\2\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0\6\1\2\0\2\1\13" +
        "\11\5\2\2\11\5\2\1\11\4\0\1\1\12\0\1\11\2\0\6\2\1\0\1\2\3\0\4\2\11\0\1\1\4" +
        "\0\1\1\1\0\5\1\2\0\1\1\1\0\1\57\3\1\1\0\3\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\4" +
        "\1\3\2\2\1\4\0\1\11\4\0\3\1\1\0\2\2\2\0\3\1\2\10\2\1\4\0\6\2\1\0\2\1\2\0\4" +
        "\1\1\0\2\1\1\2\3\1\1\2\4\1\1\2\4\1\2\2\6\1\2\7\6\0\4\1\2\2\4\0\1\1\1\2\4\0" +
        "\1\2\5\1\2\2\3\0\3\1\4\0\3\1\2\2\2\0\6\1\1\0\3\2\1\0\2\2\5\0\5\1\5\0\1\1\1" +
        "\2\3\1\1\0\2\1\1\0\7\1\2\0\1\2\6\0\2\1\2\0\3\1\3\0\2\1\3\0\2\1\2\0\3\2\4\0" +
        "\3\1\1\0\2\1\1\0\1\1\5\0\1\2\2\0\1\1\3\0\1\1\2\0\2\1\3\2\1\0\2\2\1\0\3\2\2" +
        "\0\1\2\2\0\5\2\1\0\2\10\1\2\4\1\10\0\5\2\3\0\6\2\2\0\3\2\2\0\4\2\4\0\3\2\5" +
        "\0\1\1\2\0\2\1\2\0\4\1\1\0\4\1\1\0\1\1\1\0\6\1\2\0\5\1\1\0\4\1\1\0\4\1\2\0" +
        "\2\10\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0\3\1");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
        "\11\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6" +
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
        "\21\2\1\17\1\20\1\16\11\17\1\21\1\22\1\23" +
        "\12\2\1\24\1\25\1\24\2\17\1\26\1\27\1\30" +
        "\1\31\1\16\14\17\1\32\2\33\2\1\1\34\2\4" +
        "\1\35\1\36\11\2\1\37\5\2\1\40\2\2\1\41" +
        "\1\42\5\2\1\43\5\2\5\17\1\44\4\17\1\40" +
        "\2\17\1\43\1\17\1\45\3\2\1\46\1\2\1\47" +
        "\1\42\2\2\1\50\1\51\1\52\1\53\1\54\1\55" +
        "\1\56\1\57\13\17\1\42\4\17\1\60\1\61\1\0" +
        "\2\2\1\62\7\2\1\63\1\64\1\65\1\66\1\67" +
        "\2\2\1\70\4\2\1\71\1\72\6\2\2\17\1\62" +
        "\3\17\1\64\1\66\1\67\1\17\1\71\1\72\1\17" +
        "\4\2\5\17\1\63\1\65\1\17\1\70\6\17\1\0" +
        "\1\2\1\73\2\2\1\74\1\75\2\2\1\76\1\77" +
        "\1\2\1\100\6\2\1\101\1\102\1\2\1\17\1\73" +
        "\4\17\1\103\1\2\1\104\1\105\1\2\2\17\1\74" +
        "\1\75\1\76\1\77\1\100\5\17\1\0\1\2\1\106" +
        "\2\2\1\107\1\2\1\110\1\111\1\112\1\2\1\113" +
        "\1\114\1\115\1\17\1\106\1\17\1\107\1\17\1\2" +
        "\1\116\2\17\1\110\1\112\1\17\1\113\1\114\1\0" +
        "\1\117\1\120\1\121\2\2\1\122\1\121\1\17\1\123" +
        "\1\124\1\120\1\17\1\125\1\2\1\126\1\17\1\126" +
        "\2\127";

    private static int[] zzUnpackAction() {
        int[] result = new int[336];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
        "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157" +
        "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u01b9" +
        "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u02df\0\u0310" +
        "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498" +
        "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620" +
        "\0\u0651\0\u0682\0\u01b9\0\u01b9\0\u06b3\0\u06e4\0\u0715\0\u0746" +
        "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u01b9\0\u01b9\0\u086c" +
        "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4" +
        "\0\u0a25\0\u0a56\0\u0a87\0\u01b9\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b" +
        "\0\u01b9\0\u0b7c\0\u02df\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71" +
        "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9" +
        "\0\u01b9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u01b9\0\u0f1f" +
        "\0\u01b9\0\u01b9\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045" +
        "\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd" +
        "\0\u11fe\0\u01ea\0\u122f\0\u1260\0\u01ea\0\u1291\0\u12c2\0\u12f3" +
        "\0\u1324\0\u1355\0\u1386\0\u01ea\0\u13b7\0\u13e8\0\u1419\0\u144a" +
        "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u0682\0\u15a1" +
        "\0\u15d2\0\u1603\0\u1634\0\u0682\0\u1665\0\u1696\0\u0682\0\u16c7" +
        "\0\u01b9\0\u16f8\0\u1729\0\u175a\0\u01ea\0\u178b\0\u01ea\0\u01ea" +
        "\0\u17bc\0\u17ed\0\u01b9\0\u0a87\0\u01b9\0\u0ae9\0\u01b9\0\u01b9" +
        "\0\u01b9\0\u01b9\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913" +
        "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b" +
        "\0\u1acc\0\u1afd\0\u0e2a\0\u01b9\0\u1b2e\0\u1b5f\0\u1b90\0\u01ea" +
        "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u01ea" +
        "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u1d18\0\u1d49\0\u01ea\0\u1d7a" +
        "\0\u1dab\0\u1ddc\0\u1e0d\0\u01ea\0\u01ea\0\u1e3e\0\u1e6f\0\u1ea0" +
        "\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u0682\0\u1fc6\0\u1ff7" +
        "\0\u2028\0\u0682\0\u0682\0\u0682\0\u2059\0\u0682\0\u0682\0\u208a" +
        "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212" +
        "\0\u2243\0\u0682\0\u0682\0\u2274\0\u0682\0\u22a5\0\u22d6\0\u2307" +
        "\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u01ea\0\u242d\0\u245e" +
        "\0\u01ea\0\u01ea\0\u248f\0\u24c0\0\u01ea\0\u01ea\0\u24f1\0\u01ea" +
        "\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u01ea\0\u01ea" +
        "\0\u2648\0\u2679\0\u0682\0\u26aa\0\u26db\0\u270c\0\u273d\0\u0682" +
        "\0\u276e\0\u01ea\0\u01ea\0\u279f\0\u27d0\0\u2801\0\u0682\0\u0682" +
        "\0\u0682\0\u0682\0\u0682\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6" +
        "\0\u2927\0\u2958\0\u01ea\0\u2989\0\u29ba\0\u01ea\0\u29eb\0\u01ea" +
        "\0\u01ea\0\u01ea\0\u2a1c\0\u01ea\0\u01ea\0\u01ea\0\u2a4d\0\u0682" +
        "\0\u2a7e\0\u0682\0\u2aaf\0\u2ae0\0\u01ea\0\u2b11\0\u2b42\0\u0682" +
        "\0\u0682\0\u2b73\0\u0682\0\u0682\0\u2ba4\0\u01ea\0\u01ea\0\u01ea" +
        "\0\u2bd5\0\u2c06\0\u0682\0\u0682\0\u2c37\0\u01ea\0\u0682\0\u0682" +
        "\0\u2c68\0\u01b9\0\u2c99\0\u01ea\0\u2cca\0\u0682\0\u01ea\0\u0682";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[336];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
        "\1\12\1\13\1\12\1\14\1\15\1\16\1\12\2\17" +
        "\2\14\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
        "\5\12\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
        "\1\36\1\37\1\40\1\41\1\42\1\43\1\13\1\44" +
        "\1\45\3\13\1\46\1\47\1\50\1\51\3\13\1\12" +
        "\1\52\1\12\1\14\1\15\1\16\1\12\2\17\2\14" +
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\5\12" +
        "\1\53\1\54\1\55\1\56\1\52\1\57\1\52\1\60" +
        "\1\61\1\62\5\52\1\63\3\52\1\64\1\65\5\52" +
        "\1\12\1\13\1\12\1\14\1\15\1\16\1\12\2\17" +
        "\2\14\1\20\1\21\1\22\1\23\1\24\1\25\4\12" +
        "\1\66\1\67\1\70\1\30\1\71\1\72\1\73\1\74" +
        "\1\35\1\75\1\13\1\40\1\41\1\76\1\43\1\13" +
        "\1\44\4\13\1\77\1\100\1\101\1\102\3\13\1\12" +
        "\1\103\1\12\1\14\1\15\4\12\2\14\12\12\1\66" +
        "\1\67\1\12\1\104\5\103\1\105\22\103\1\12\1\106" +
        "\1\12\1\14\1\15\4\12\2\14\1\20\1\21\1\22" +
        "\1\23\2\12\1\26\6\12\1\104\5\106\1\107\22\106" +
        "\1\12\1\52\1\12\1\14\1\15\1\16\1\12\2\17" +
        "\2\14\1\20\1\21\1\22\1\23\1\24\1\25\1\12" +
        "\1\110\1\111\1\112\1\66\1\67\1\113\1\114\1\115" +
        "\1\116\1\117\1\120\1\121\1\122\1\123\1\62\1\124" +
        "\1\125\2\52\1\126\4\52\1\127\1\130\5\52\1\12" +
        "\1\13\1\12\1\14\1\15\2\12\2\17\2\14\10\12" +
        "\1\111\3\12\1\131\1\104\30\13\1\12\1\132\1\12" +
        "\1\14\1\15\4\12\2\14\16\12\5\132\1\133\22\132" +
        "\3\12\1\14\1\15\4\12\2\14\15\12\1\134\1\135" +
        "\27\12\62\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\30\13\3\0\1\14\5\0\2\14\52\0\1\136\54\0" +
        "\3\16\1\0\1\16\1\137\1\140\52\16\7\0\2\17" +
        "\77\0\1\141\61\0\1\142\31\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\1\13\1\143\7\13\1\144\1\145" +
        "\15\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\13\13\1\146\2\13\1\147\11\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\5\13\1\150\1\13\1\151" +
        "\20\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\11\13\1\152\16\13\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\17\13\1\153\10\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\1\154\1\13\1\155\5\13" +
        "\1\156\2\13\1\157\14\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\1\13\1\160\5\13\1\161\20\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\1\162" +
        "\27\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\11\13\1\163\1\164\15\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\10\13\1\165\6\13\1\166\10\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\10\13" +
        "\1\167\17\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\17\13\1\170\10\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\5\13\1\171\1\13\1\172\20\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\1\13" +
        "\1\173\16\13\1\174\7\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\5\13\1\175\1\13\1\176\7\13" +
        "\1\177\10\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\11\13\1\200\16\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\25\13\1\201\2\13\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\30\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\1\52\1\202\7\52" +
        "\1\203\1\204\15\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\13\52\1\205\14\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\11\52\1\206\16\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\1\207\1\52" +
        "\1\210\5\52\1\211\2\52\1\212\14\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\7\52\1\213\20\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\1\214" +
        "\27\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\5\52\1\215\1\52\1\216\20\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\20\52\1\217\7\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\17\52\1\220" +
        "\10\52\27\0\1\221\32\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\1\13\1\222\26\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\16\13\1\147\11\13\1\0" +
        "\2\13\5\0\1\13\1\0\1\13\16\0\1\13\1\223" +
        "\5\13\1\151\20\13\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\11\13\1\224\16\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\1\225\1\13\1\155\5\13" +
        "\1\226\17\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\10\13\1\227\6\13\1\230\10\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\1\13\1\173\26\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\5\13" +
        "\1\175\22\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\11\13\1\231\16\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\25\13\1\232\2\13\1\0\2\103" +
        "\5\0\1\103\1\0\1\103\1\0\2\233\13\0\30\103" +
        "\1\0\2\103\5\0\1\103\1\0\1\103\1\0\2\233" +
        "\13\0\1\234\27\103\1\0\2\106\5\0\1\106\1\0" +
        "\1\106\1\0\2\235\13\0\30\106\1\0\2\106\5\0" +
        "\1\106\1\0\1\106\1\0\2\235\13\0\1\236\27\106" +
        "\23\0\1\237\1\240\57\0\1\241\65\0\1\242\31\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\1\52\1\243" +
        "\26\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\16\52\1\244\11\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\5\52\1\245\1\52\1\246\20\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\11\52\1\247" +
        "\16\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\17\52\1\250\10\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\1\251\7\52\1\252\17\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\1\52\1\253\26\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\11\52" +
        "\1\254\1\255\15\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\17\52\1\256\10\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\17\52\1\257\10\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\1\52\1\260" +
        "\16\52\1\217\7\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\5\52\1\261\1\52\1\262\20\52\1\0" +
        "\2\132\5\0\1\132\1\0\1\132\16\0\30\132\1\0" +
        "\2\132\5\0\1\132\1\0\1\132\16\0\1\263\27\132" +
        "\30\0\1\264\62\0\1\265\26\0\3\136\1\0\55\136" +
        "\3\16\1\0\55\16\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\2\13\1\266\25\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\15\13\1\267\12\13\1\0" +
        "\2\13\5\0\1\13\1\0\1\13\16\0\15\13\1\270" +
        "\12\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\1\13\1\271\26\13\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\7\13\1\272\20\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\1\273\27\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\26\13\1\274\1\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\10\13" +
        "\1\275\1\13\1\276\15\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\12\13\1\277\15\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\3\13\1\300\24\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\2\13" +
        "\1\301\25\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\6\13\1\302\11\13\1\303\7\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\14\13\1\304\13\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\1\305" +
        "\27\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\1\306\27\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\4\13\1\307\23\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\2\13\1\310\25\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\6\13\1\311\21\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\7\13" +
        "\1\312\20\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\11\13\1\313\16\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\16\13\1\314\11\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\10\13\1\315\17\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\4\13" +
        "\1\316\23\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\2\13\1\317\25\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\17\13\1\320\10\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\11\13\1\321\16\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\7\13" +
        "\1\322\20\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\1\13\1\323\26\13\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\2\52\1\324\25\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\15\52\1\325\12\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\15\52" +
        "\1\326\12\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\1\52\1\327\26\52\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\10\52\1\330\1\52\1\331\15\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\2\52" +
        "\1\332\25\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\20\52\1\333\7\52\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\14\52\1\334\13\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\1\335\27\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\16\52\1\336" +
        "\11\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\10\52\1\337\17\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\11\52\1\340\16\52\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\2\13\1\341\25\13\1\0" +
        "\2\13\5\0\1\13\1\0\1\13\16\0\22\13\1\342" +
        "\5\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\10\13\1\275\17\13\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\6\13\1\302\21\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\7\13\1\343\20\13\1\0" +
        "\2\13\5\0\1\13\1\0\1\13\16\0\1\13\1\344" +
        "\26\13\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\2\52\1\345\25\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\7\52\1\346\20\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\1\347\27\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\26\52\1\350\1\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\10\52" +
        "\1\330\17\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\12\52\1\351\15\52\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\3\52\1\352\24\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\6\52\1\353\21\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\1\354" +
        "\27\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\4\52\1\355\23\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\2\52\1\356\25\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\6\52\1\357\21\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\11\52\1\360" +
        "\16\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\4\52\1\361\23\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\2\52\1\362\25\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\17\52\1\363\10\52\33\0" +
        "\1\364\26\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\1\13\1\365\26\13\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\1\13\1\366\26\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\17\13\1\367\10\13\1\0" +
        "\2\13\5\0\1\13\1\0\1\13\16\0\1\370\27\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\4\13" +
        "\1\371\23\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\1\13\1\372\26\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\3\13\1\373\24\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\10\13\1\374\17\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\1\13" +
        "\1\375\26\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\3\13\1\376\24\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\4\13\1\377\23\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\2\13\1\u0100\25\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\1\13" +
        "\1\u0101\26\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\11\13\1\u0102\16\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\12\13\1\u0103\15\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\24\13\1\u0104\3\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\1\u0105" +
        "\27\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\1\u0106\27\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\15\13\1\u0107\12\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\10\13\1\u0108\17\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\17\13\1\u0109\10\13" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\1\52" +
        "\1\u010a\26\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\1\52\1\u010b\26\52\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\17\52\1\u010c\10\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\3\52\1\u010d\24\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\10\52" +
        "\1\u010e\17\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\4\52\1\u010f\23\52\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\15\52\1\u0110\12\52\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\1\13\1\u0111\26\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\4\13" +
        "\1\u0112\23\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\10\13\1\u0113\17\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\17\13\1\u0114\10\13\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\1\52\1\u0115\26\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\1\u0116" +
        "\27\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\4\52\1\u0117\23\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\1\52\1\u0118\26\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\1\52\1\u0119\26\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\3\52\1\u011a" +
        "\24\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\2\52\1\u011b\25\52\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\1\52\1\u011c\26\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\12\52\1\u011d\15\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\24\52\1\u011e" +
        "\3\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\1\u011f\27\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\1\u0120\27\52\32\0\1\u0121\27\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\3\13\1\u0122\24\13\1\0" +
        "\2\13\5\0\1\13\1\0\1\13\16\0\20\13\1\u0123" +
        "\7\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\4\13\1\u0124\23\13\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\5\13\1\u0125\22\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\4\13\1\u0126\23\13\1\0" +
        "\2\13\5\0\1\13\1\0\1\13\16\0\7\13\1\u0127" +
        "\20\13\1\0\2\13\5\0\1\13\1\0\1\13\16\0" +
        "\17\13\1\u0128\10\13\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\10\13\1\u0129\17\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\27\13\1\u012a\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\1\13\1\u012b\26\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\1\13" +
        "\1\u012c\26\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\4\13\1\u012d\23\13\1\0\2\13\5\0\1\13" +
        "\1\0\1\13\16\0\1\13\1\u012e\26\13\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\3\52\1\u012f\24\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\20\52" +
        "\1\u0130\7\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\5\52\1\u0131\22\52\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\4\52\1\u0132\23\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\7\52\1\u0133\20\52" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\3\13" +
        "\1\u0134\24\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\1\13\1\u0135\26\13\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\3\52\1\u0136\24\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\4\52\1\u0137\23\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\17\52" +
        "\1\u0138\10\52\1\0\2\52\5\0\1\52\1\0\1\52" +
        "\16\0\27\52\1\u0139\1\0\2\52\5\0\1\52\1\0" +
        "\1\52\16\0\1\52\1\u013a\26\52\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\1\52\1\u013b\26\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\4\52\1\u013c" +
        "\23\52\34\0\1\u013d\25\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\4\13\1\u013e\23\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\1\u013f\27\13\1\0\2\13" +
        "\5\0\1\13\1\0\1\13\16\0\4\13\1\u0140\23\13" +
        "\1\0\2\13\5\0\1\13\1\0\1\13\16\0\10\13" +
        "\1\u0141\17\13\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\1\13\1\u0142\26\13\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\4\52\1\u0143\23\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\4\52\1\u0144\23\52" +
        "\1\0\2\52\5\0\1\52\1\0\1\52\16\0\10\52" +
        "\1\u0145\17\52\1\0\2\13\5\0\1\13\1\0\1\13" +
        "\16\0\4\13\1\u0146\23\13\1\0\2\52\5\0\1\52" +
        "\1\0\1\52\16\0\4\52\1\u0147\23\52\1\0\2\52" +
        "\5\0\1\52\1\0\1\52\16\0\1\u0148\27\52\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\1\52\1\u0149" +
        "\26\52\35\0\1\u014a\24\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\3\13\1\u014b\24\13\1\0\2\13\5\0" +
        "\1\13\1\0\1\13\16\0\10\13\1\u014c\17\13\1\0" +
        "\2\52\5\0\1\52\1\0\1\52\16\0\3\52\1\u014d" +
        "\24\52\1\0\2\52\5\0\1\52\1\0\1\52\16\0" +
        "\10\52\1\u014e\17\52\1\0\2\13\5\0\1\13\1\0" +
        "\1\13\16\0\4\13\1\u014f\23\13\1\0\2\52\5\0" +
        "\1\52\1\0\1\52\16\0\4\52\1\u0150\23\52";

    private static int[] zzUnpackTrans() {
        int[] result = new int[11515];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
        "\11\0\1\11\5\1\7\11\24\1\2\11\11\1\2\11" +
        "\14\1\1\11\4\1\1\11\17\1\1\11\5\1\1\11" +
        "\1\1\2\11\56\1\1\11\11\1\1\11\1\1\1\11" +
        "\1\1\4\11\21\1\1\11\1\0\76\1\1\0\54\1" +
        "\1\0\33\1\1\0\14\1\1\11\6\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[336];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */
    private int myPrevState = YYINITIAL;

    public int yyprevstate() {
        return myPrevState;
    }

    private int popState() {
        final int prev = myPrevState;
        myPrevState = YYINITIAL;
        return prev;
    }

    protected void pushState(int state) {
        myPrevState = state;
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public FlexibleSearchLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     *
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     *
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;
            return;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     *
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return TokenType.BAD_CHARACTER;
                    }
                    case 88:
                        break;
                    case 2: {
                        return IDENTIFIER;
                    }
                    case 89:
                        break;
                    case 3: {
                        return WHITE_SPACE;
                    }
                    case 90:
                        break;
                    case 4: {
                        return STRING;
                    }
                    case 91:
                        break;
                    case 5: {
                        return NUMBER;
                    }
                    case 92:
                        break;
                    case 6: {
                        return COMMA;
                    }
                    case 93:
                        break;
                    case 7: {
                        return DOT;
                    }
                    case 94:
                        break;
                    case 8: {
                        return COLON;
                    }
                    case 95:
                        break;
                    case 9: {
                        return SEMICOLON;
                    }
                    case 96:
                        break;
                    case 10: {
                        return LEFT_PAREN;
                    }
                    case 97:
                        break;
                    case 11: {
                        return RIGHT_PAREN;
                    }
                    case 98:
                        break;
                    case 12: {
                        return ASTERISK;
                    }
                    case 99:
                        break;
                    case 13: {
                        return LEFT_BRACE;
                    }
                    case 100:
                        break;
                    case 14: {
                        return RIGHT_BRACE;
                    }
                    case 101:
                        break;
                    case 15: {
                        return COLUMN_REFERENCE_IDENTIFIER;
                    }
                    case 102:
                        break;
                    case 16: {
                        yybegin(COLUMN_IDENTIFIER);
                        pushState(SELECT_EXP);
                        return LEFT_BRACE;
                    }
                    case 103:
                        break;
                    case 17: {
                        return QUESTION_MARK;
                    }
                    case 104:
                        break;
                    case 18: {
                        return EXCLAMATION_MARK;
                    }
                    case 105:
                        break;
                    case 19: {
                        yybegin(TABLE_IDENTIFIER);
                        pushState(FROM_EXP);
                        return LEFT_BRACE;
                    }
                    case 106:
                        break;
                    case 20: {
                        yybegin(popState());
                        return TABLE_NAME_IDENTIFIER;
                    }
                    case 107:
                        break;
                    case 21: {
                        yybegin(popState());
                        return RIGHT_BRACE;
                    }
                    case 108:
                        break;
                    case 22: {
                        return LESS_THAN_OPERATOR;
                    }
                    case 109:
                        break;
                    case 23: {
                        return EQUALS_OPERATOR;
                    }
                    case 110:
                        break;
                    case 24: {
                        return GREATER_THAN_OPERATOR;
                    }
                    case 111:
                        break;
                    case 25: {
                        yybegin(COLUMN_IDENTIFIER);
                        pushState(WHERE_EXP);
                        return LEFT_BRACE;
                    }
                    case 112:
                        break;
                    case 26: {
                        yybegin(COLUMN_IDENTIFIER);
                        pushState(ON_EXP);
                        return LEFT_BRACE;
                    }
                    case 113:
                        break;
                    case 27: {
                        yybegin(popState());
                        return IDENTIFIER;
                    }
                    case 114:
                        break;
                    case 28: {
                        return COMMENT;
                    }
                    case 115:
                        break;
                    case 29: {
                        return LEFT_DOUBLE_BRACE;
                    }
                    case 116:
                        break;
                    case 30: {
                        return RIGHT_DOUBLE_BRACE;
                    }
                    case 117:
                        break;
                    case 31: {
                        yybegin(CORRELATION_NAME);
                        return AS;
                    }
                    case 118:
                        break;
                    case 32: {
                        return IS;
                    }
                    case 119:
                        break;
                    case 33: {
                        return ON;
                    }
                    case 120:
                        break;
                    case 34: {
                        return OR;
                    }
                    case 121:
                        break;
                    case 35: {
                        return BY;
                    }
                    case 122:
                        break;
                    case 36: {
                        yybegin(CORRELATION_NAME);
                        pushState(SELECT_EXP);
                        return AS;
                    }
                    case 123:
                        break;
                    case 37: {
                        yybegin(SUB_QUERY);
                        pushState(FROM_EXP);
                        return LEFT_DOUBLE_BRACE;
                    }
                    case 124:
                        break;
                    case 38: {
                        yybegin(CORRELATION_NAME);
                        pushState(FROM_EXP);
                        return AS;
                    }
                    case 125:
                        break;
                    case 39: {
                        yybegin(ON_EXP);
                        pushState(FROM_EXP);
                        return ON;
                    }
                    case 126:
                        break;
                    case 40: {
                        yypushback(1);
                        yybegin(COLUMN_IDENTIFIER);
                        return TABLE_NAME_IDENTIFIER;
                    }
                    case 127:
                        break;
                    case 41: {
                        yybegin(CORRELATION_NAME);
                        pushState(TABLE_IDENTIFIER);
                        return AS;
                    }
                    case 128:
                        break;
                    case 42: {
                        yypushback(yylength());
                        yybegin(TABLE_IDENTIFIER);
                    }
                    case 129:
                        break;
                    case 43: {
                        yybegin(CORRELATION_NAME);
                        pushState(COLUMN_IDENTIFIER);
                        return AS;
                    }
                    case 130:
                        break;
                    case 44: {
                        return LESS_THAN_OR_EQUALS_OPERATOR;
                    }
                    case 131:
                        break;
                    case 45: {
                        return NOT_EQUALS_OPERATOR;
                    }
                    case 132:
                        break;
                    case 46: {
                        return GREATER_THAN_OR_EQUALS_OPERATOR;
                    }
                    case 133:
                        break;
                    case 47: {
                        yybegin(popState());
                        return RIGHT_DOUBLE_BRACE;
                    }
                    case 134:
                        break;
                    case 48: {
                        return AS;
                    }
                    case 135:
                        break;
                    case 49: {
                        yybegin(FROM_EXP);
                        return RIGHT_DOUBLE_BRACE;
                    }
                    case 136:
                        break;
                    case 50: {
                        return SUM;
                    }
                    case 137:
                        break;
                    case 51: {
                        return ASC;
                    }
                    case 138:
                        break;
                    case 52: {
                        return ALL;
                    }
                    case 139:
                        break;
                    case 53: {
                        return AND;
                    }
                    case 140:
                        break;
                    case 54: {
                        return ANY;
                    }
                    case 141:
                        break;
                    case 55: {
                        return AVG;
                    }
                    case 142:
                        break;
                    case 56: {
                        return NOT;
                    }
                    case 143:
                        break;
                    case 57: {
                        return MAX;
                    }
                    case 144:
                        break;
                    case 58: {
                        return MIN;
                    }
                    case 145:
                        break;
                    case 59: {
                        return SOME;
                    }
                    case 146:
                        break;
                    case 60: {
                        return LAST;
                    }
                    case 147:
                        break;
                    case 61: {
                        return LIKE;
                    }
                    case 148:
                        break;
                    case 62: {
                        return TRUE;
                    }
                    case 149:
                        break;
                    case 63: {
                        return DESC;
                    }
                    case 150:
                        break;
                    case 64: {
                        return NULL;
                    }
                    case 151:
                        break;
                    case 65: {
                        yybegin(FROM_EXP);
                        return FROM;
                    }
                    case 152:
                        break;
                    case 66: {
                        return JOIN;
                    }
                    case 153:
                        break;
                    case 67: {
                        yybegin(FROM_EXP);
                        pushState(SELECT_EXP);
                        return FROM;
                    }
                    case 154:
                        break;
                    case 68: {
                        return LEFT;
                    }
                    case 155:
                        break;
                    case 69: {
                        yybegin(TABLE_IDENTIFIER);
                        pushState(FROM_EXP);
                        return JOIN;
                    }
                    case 156:
                        break;
                    case 70: {
                        return EVERY;
                    }
                    case 157:
                        break;
                    case 71: {
                        return COUNT;
                    }
                    case 158:
                        break;
                    case 72: {
                        return ORDER;
                    }
                    case 159:
                        break;
                    case 73: {
                        return UNION;
                    }
                    case 160:
                        break;
                    case 74: {
                        return GROUP;
                    }
                    case 161:
                        break;
                    case 75: {
                        return FALSE;
                    }
                    case 162:
                        break;
                    case 76: {
                        return FIRST;
                    }
                    case 163:
                        break;
                    case 77: {
                        yybegin(WHERE_EXP);
                        return WHERE;
                    }
                    case 164:
                        break;
                    case 78: {
                        yybegin(WHERE_EXP);
                        pushState(FROM_EXP);
                        return WHERE;
                    }
                    case 165:
                        break;
                    case 79: {
                        yybegin(SELECT_EXP);
                        pushState(YYINITIAL);
                        return SELECT;
                    }
                    case 166:
                        break;
                    case 80: {
                        return EXISTS;
                    }
                    case 167:
                        break;
                    case 81: {
                        return CONCAT;
                    }
                    case 168:
                        break;
                    case 82: {
                        return SELECT;
                    }
                    case 169:
                        break;
                    case 83: {
                        yybegin(SELECT_EXP);
                        pushState(FROM_EXP);
                        return SELECT;
                    }
                    case 170:
                        break;
                    case 84: {
                        yybegin(SELECT_EXP);
                        pushState(WHERE_EXP);
                        return SELECT;
                    }
                    case 171:
                        break;
                    case 85: {
                        yybegin(SELECT_EXP);
                        pushState(SUB_QUERY);
                        return SELECT;
                    }
                    case 172:
                        break;
                    case 86: {
                        return BETWEEN;
                    }
                    case 173:
                        break;
                    case 87: {
                        return DISTINCT;
                    }
                    case 174:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
