/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODYFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\172\3\1\6\77\3");

  /* The ZZ_CMAP_A table has 448 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\60\1\4\1\3\22\0\1\4\1\0\1\10\1\5\1\11\1\6\1\50\1\7\1\26\1"+
    "\27\1\0\1\45\1\31\1\21\1\23\1\56\12\46\1\32\1\30\1\57\1\22\1\33\1\0\1\47\1"+
    "\41\1\1\1\12\1\52\1\40\1\15\1\20\1\1\1\17\2\1\1\42\1\54\1\14\1\13\1\51\1\1"+
    "\1\36\1\44\1\35\1\37\1\55\4\1\1\24\1\0\1\25\1\0\1\53\1\0\1\41\1\1\1\12\1\52"+
    "\1\40\1\15\1\20\1\1\1\17\2\1\1\42\1\54\1\14\1\13\1\51\1\1\1\36\1\44\1\35\1"+
    "\37\1\55\4\1\1\0\1\34\10\0\1\60\252\0\2\16\115\0\1\43\50\0\2\60\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\5\0\1\2\1\3\2\4\1\5\1\6"+
    "\3\2\1\3\1\7\2\3\11\10\1\11\1\12\1\13"+
    "\1\14\1\15\4\10\1\16\2\10\1\17\1\20\1\21"+
    "\1\2\1\22\1\23\1\24\1\25\1\26\2\2\6\27"+
    "\1\30\1\31\1\32\1\33\2\27\1\16\2\27\1\1"+
    "\1\5\1\1\1\34\1\2\1\35\1\36\1\37\6\40"+
    "\1\41\1\40\1\16\1\2\2\42\1\6\1\43\1\0"+
    "\1\44\3\45\1\0\3\3\1\10\1\0\1\46\2\47"+
    "\1\10\1\0\4\10\1\16\1\10\1\50\3\0\1\51"+
    "\2\45\1\52\1\27\1\53\1\27\3\0\1\1\1\40"+
    "\1\46\1\44\2\45\3\40\2\54\2\0\1\45\1\55"+
    "\1\45\1\0\3\3\1\46\1\0\2\47\1\10\1\0"+
    "\4\10\1\16\1\0\2\45\2\27\1\16\2\0\1\1"+
    "\1\46\1\40\2\45\2\40\1\16\2\54\1\0\2\45"+
    "\1\0\3\3\1\47\2\0\1\10\1\56\2\10\1\0"+
    "\1\45\1\56\1\57\1\45\1\56\1\54\1\0\2\45"+
    "\1\0\3\3\1\47\1\56\1\0\3\10\1\0\2\45"+
    "\1\54\1\0\1\45\1\0\2\60\1\61\1\62\1\0"+
    "\2\63\1\64\1\65\2\0\1\40\4\0\1\3\2\0"+
    "\1\10\2\0\1\40\4\0\1\3\2\0\1\10\1\66"+
    "\1\0\1\40\2\0\2\45\1\0\1\3\1\0\1\10"+
    "\1\0\1\45\1\0\1\3\1\0\1\10\1\0\1\45"+
    "\1\0\1\3\1\0\1\10\1\0\1\45\1\0\1\3"+
    "\1\0\1\10\1\0\2\67\2\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u024c\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u024c\0\u0405"+
    "\0\u0436\0\u024c\0\u0467\0\u0498\0\u0341\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u024c\0\u0715"+
    "\0\u0746\0\u0777\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u06b3"+
    "\0\u07a8\0\u024c\0\u07d9\0\u0341\0\u0777\0\u080a\0\u083b\0\u024c"+
    "\0\u024c\0\u024c\0\u024c\0\u086c\0\u0651\0\u089d\0\u08ce\0\u06e4"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u0498\0\u024c\0\u024c\0\u024c"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u024c\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u024c\0\u0b7c\0\u0bad\0\u0bad\0\u0341\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u06b3\0\u0fe3\0\u1014\0\u1045"+
    "\0\u024c\0\u1076\0\u10a7\0\u07a8\0\u10d8\0\u024c\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u024c\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u024c\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8"+
    "\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u113a\0\u184f"+
    "\0\u08ce\0\u1880\0\u09c3\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u1355\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u0467\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u07d9\0\u184f\0\u1ce7\0\u09c3\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u024c\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u027d\0\u027d"+
    "\0\u214e\0\u217f\0\u21b0\0\u0467\0\u0467\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u15a1\0\u2584\0\u25b5\0\u024c\0\u178b\0\u18e2\0\u19a6\0\u25e6"+
    "\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6"+
    "\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e"+
    "\0\u2aaf\0\u024c\0\u027d\0\u024c\0\u0467";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\15\1\23"+
    "\1\24\4\16\1\25\1\26\2\16\6\15\1\27\4\15"+
    "\1\16\1\30\1\31\3\16\1\15\1\16\1\15\1\16"+
    "\2\15\5\16\2\15\1\0\1\32\1\33\1\17\1\20"+
    "\1\21\2\32\1\34\1\35\1\36\3\33\1\37\1\40"+
    "\1\41\1\33\1\42\2\32\1\43\1\44\1\45\1\46"+
    "\1\32\1\47\3\32\1\50\1\51\1\52\3\33\1\32"+
    "\1\33\1\53\1\54\1\55\1\32\5\33\1\32\1\56"+
    "\1\32\2\15\1\17\1\20\1\21\15\15\1\57\35\15"+
    "\1\0\1\15\1\60\1\17\1\20\1\21\5\15\4\60"+
    "\1\15\3\60\13\15\6\60\1\15\1\60\1\15\1\60"+
    "\2\15\5\60\2\15\1\0\1\15\1\61\1\17\1\20"+
    "\1\21\4\15\1\62\4\61\1\15\3\61\1\63\1\64"+
    "\1\65\1\44\1\45\1\46\1\66\1\47\2\15\1\67"+
    "\6\61\1\15\1\61\1\15\1\61\1\70\1\71\5\61"+
    "\2\15\1\0\1\72\1\73\1\17\1\20\1\21\3\72"+
    "\1\74\1\75\3\73\1\76\1\72\2\73\1\77\6\72"+
    "\1\100\1\101\1\102\1\72\1\103\1\104\5\73\1\72"+
    "\1\73\1\105\1\106\2\72\5\73\1\107\1\110\1\72"+
    "\2\111\1\17\1\20\1\112\3\111\1\113\50\111\1\15"+
    "\1\114\1\17\1\20\1\21\2\15\1\115\1\23\1\62"+
    "\4\114\1\15\3\114\1\63\1\114\1\15\1\116\3\15"+
    "\1\117\2\15\1\120\6\114\1\15\1\114\1\15\1\114"+
    "\2\15\5\114\2\15\1\0\2\121\1\17\1\20\1\21"+
    "\2\121\1\122\1\123\1\124\3\121\1\125\3\121\1\126"+
    "\3\121\1\116\3\121\1\127\3\121\1\130\7\121\1\126"+
    "\1\131\12\121\2\15\1\17\1\20\1\21\53\15\1\0"+
    "\2\15\1\17\1\20\1\21\4\15\1\132\46\15\1\0"+
    "\2\133\1\17\1\20\1\21\4\133\1\134\46\133\63\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\6\16\1\0"+
    "\1\16\1\0\1\16\2\0\5\16\5\0\1\17\62\0"+
    "\1\21\54\0\2\135\2\0\2\135\1\136\52\135\10\137"+
    "\1\140\50\137\1\0\1\141\10\0\1\142\3\141\1\0"+
    "\3\141\1\0\1\143\2\0\2\143\5\0\6\141\1\0"+
    "\1\141\1\0\1\141\2\0\5\141\17\0\1\144\45\0"+
    "\1\16\10\0\2\16\1\145\1\16\1\0\3\16\13\0"+
    "\6\16\1\0\1\16\1\0\1\16\2\0\5\16\4\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\3\16\1\146"+
    "\2\16\1\0\1\16\1\0\1\16\2\0\5\16\4\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\6\16\1\0"+
    "\1\16\1\0\1\16\2\0\1\147\4\16\4\0\1\33"+
    "\10\0\4\33\1\0\3\33\1\0\1\150\11\0\6\33"+
    "\1\0\1\33\1\0\1\33\2\0\5\33\3\0\2\151"+
    "\2\0\3\151\1\152\51\151\1\0\1\153\10\0\1\154"+
    "\3\153\1\0\3\153\13\0\6\153\1\0\1\153\1\0"+
    "\1\153\2\0\5\153\4\0\1\33\10\0\4\33\1\0"+
    "\3\33\1\0\1\150\11\0\4\33\1\155\1\33\1\0"+
    "\1\33\1\0\1\33\2\0\5\33\17\0\1\156\45\0"+
    "\1\33\10\0\2\33\1\157\1\33\1\0\3\33\1\0"+
    "\1\150\11\0\6\33\1\0\1\33\1\0\1\33\2\0"+
    "\5\33\4\0\1\33\10\0\4\33\1\0\3\33\1\0"+
    "\1\150\11\0\6\33\1\0\1\33\1\0\1\54\2\0"+
    "\5\33\4\0\1\33\10\0\4\33\1\0\3\33\1\0"+
    "\1\150\11\0\1\33\1\160\4\33\1\0\1\33\1\0"+
    "\1\33\2\0\5\33\4\0\1\33\10\0\4\33\1\0"+
    "\3\33\1\0\1\150\11\0\3\33\1\161\2\33\1\0"+
    "\1\33\1\0\1\33\2\0\5\33\4\0\1\33\10\0"+
    "\4\33\1\0\3\33\1\0\1\150\11\0\6\33\1\0"+
    "\1\33\1\0\1\33\2\0\1\162\4\33\51\0\1\163"+
    "\13\0\1\33\10\0\4\33\1\0\3\33\1\0\1\164"+
    "\11\0\6\33\1\0\1\33\1\0\1\54\2\0\5\33"+
    "\4\0\1\165\10\0\4\165\1\0\3\165\13\0\6\165"+
    "\1\0\1\165\1\0\1\165\2\0\5\165\21\0\2\166"+
    "\42\0\1\60\10\0\4\60\1\0\3\60\13\0\6\60"+
    "\1\0\1\60\1\0\1\60\2\0\5\60\4\0\1\61"+
    "\2\0\1\167\5\0\4\61\1\0\3\61\1\0\1\170"+
    "\2\0\1\171\6\0\6\61\1\0\1\61\1\0\1\61"+
    "\2\0\5\61\4\0\1\172\10\0\1\173\3\172\1\0"+
    "\3\172\13\0\6\172\1\0\1\172\1\0\1\172\2\0"+
    "\5\172\4\0\1\174\10\0\4\174\1\0\3\174\13\0"+
    "\6\174\1\0\1\174\1\0\1\174\2\0\5\174\4\0"+
    "\1\73\10\0\4\73\1\0\3\73\13\0\6\73\1\0"+
    "\1\73\1\0\1\73\2\0\5\73\4\0\1\73\10\0"+
    "\4\73\1\0\3\73\13\0\4\73\1\175\1\73\1\0"+
    "\1\73\1\0\1\73\2\0\5\73\4\0\1\73\10\0"+
    "\4\73\1\0\3\73\11\0\1\176\1\0\6\73\1\0"+
    "\1\73\1\0\1\106\2\0\5\73\4\0\1\73\10\0"+
    "\4\73\1\0\3\73\13\0\1\73\1\177\4\73\1\0"+
    "\1\73\1\0\1\73\2\0\5\73\4\0\1\73\10\0"+
    "\4\73\1\0\3\73\1\0\1\200\11\0\6\73\1\0"+
    "\1\73\1\0\1\106\2\0\5\73\4\0\1\201\10\0"+
    "\4\201\1\0\3\201\13\0\6\201\1\0\1\201\1\0"+
    "\1\201\2\0\5\201\3\0\2\111\2\0\57\111\2\0"+
    "\1\112\54\111\2\113\2\202\4\113\1\203\50\113\1\0"+
    "\1\114\10\0\4\114\1\0\3\114\1\0\1\114\11\0"+
    "\6\114\1\0\1\114\1\0\1\114\2\0\5\114\3\0"+
    "\2\121\3\0\20\121\1\0\3\121\1\0\27\121\2\204"+
    "\2\0\1\151\2\204\1\205\15\204\1\151\3\204\1\151"+
    "\27\204\2\123\3\137\3\123\1\206\14\123\1\137\3\123"+
    "\1\137\27\123\1\121\1\207\3\0\5\121\1\210\3\207"+
    "\1\121\3\207\3\121\1\0\3\121\1\0\3\121\6\207"+
    "\1\121\1\207\1\121\1\207\2\121\5\207\5\121\3\0"+
    "\20\121\1\0\3\121\1\0\7\121\1\211\21\121\3\0"+
    "\20\121\1\0\3\121\1\0\14\121\1\131\14\121\3\0"+
    "\20\121\1\0\3\121\1\0\4\121\1\212\24\121\3\0"+
    "\16\121\1\213\1\121\1\0\3\121\1\0\14\121\1\131"+
    "\12\121\1\0\1\214\10\0\1\215\3\214\1\0\3\214"+
    "\13\0\6\214\1\0\1\214\1\0\1\214\2\0\5\214"+
    "\15\0\1\216\46\0\2\135\2\0\55\135\10\0\1\137"+
    "\51\0\1\141\2\0\1\217\5\0\1\220\3\141\1\0"+
    "\3\141\1\221\1\143\2\0\2\143\5\0\6\141\1\0"+
    "\1\141\1\0\1\141\2\0\5\141\4\0\1\141\2\0"+
    "\1\217\5\0\1\220\1\222\2\141\1\0\3\141\1\221"+
    "\1\143\2\0\2\143\5\0\6\141\1\0\1\141\1\0"+
    "\1\141\2\0\5\141\4\0\1\143\10\0\4\143\1\0"+
    "\3\143\1\0\1\143\2\0\2\143\5\0\6\143\1\0"+
    "\1\143\1\0\1\143\2\0\5\143\46\0\2\223\15\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\6\16\1\223"+
    "\1\224\1\0\1\16\2\0\5\16\4\0\1\16\10\0"+
    "\4\16\1\0\3\16\13\0\6\16\1\0\1\16\1\0"+
    "\1\16\2\0\3\16\1\225\1\16\4\0\1\16\10\0"+
    "\4\16\1\0\3\16\13\0\6\16\1\0\1\16\1\0"+
    "\1\16\2\0\1\16\1\226\3\16\4\0\1\33\10\0"+
    "\4\33\1\0\3\33\13\0\6\33\1\0\1\33\1\0"+
    "\1\33\2\0\5\33\3\0\2\151\2\0\3\151\1\227"+
    "\51\151\7\0\1\230\52\0\1\153\10\0\4\153\1\0"+
    "\3\153\1\0\1\231\11\0\6\153\1\0\1\153\1\0"+
    "\1\153\2\0\5\153\4\0\1\153\10\0\1\153\1\232"+
    "\2\153\1\0\3\153\1\0\1\231\11\0\6\153\1\0"+
    "\1\153\1\0\1\153\2\0\5\153\4\0\1\33\10\0"+
    "\4\33\1\0\3\33\1\0\1\150\11\0\5\33\1\233"+
    "\1\0\1\33\1\0\1\33\2\0\5\33\46\0\2\234"+
    "\15\0\1\33\10\0\4\33\1\0\3\33\1\0\1\150"+
    "\11\0\6\33\1\234\1\235\1\0\1\33\2\0\5\33"+
    "\4\0\1\33\10\0\4\33\1\0\3\33\1\0\1\150"+
    "\11\0\2\33\1\236\3\33\1\0\1\33\1\0\1\33"+
    "\2\0\5\33\4\0\1\33\10\0\4\33\1\0\3\33"+
    "\1\0\1\150\11\0\6\33\1\0\1\33\1\0\1\33"+
    "\2\0\3\33\1\237\1\33\4\0\1\33\10\0\4\33"+
    "\1\0\3\33\1\0\1\150\11\0\6\33\1\0\1\33"+
    "\1\0\1\33\2\0\1\33\1\240\3\33\26\0\1\200"+
    "\22\0\1\163\13\0\1\33\10\0\4\33\1\0\3\33"+
    "\13\0\6\33\1\0\1\33\1\0\1\241\2\0\5\33"+
    "\23\0\1\242\44\0\1\167\21\0\1\171\33\0\1\61"+
    "\10\0\4\61\1\0\3\61\13\0\6\61\1\0\1\61"+
    "\1\0\1\61\2\0\5\61\4\0\1\172\10\0\4\172"+
    "\1\0\3\172\1\0\1\243\11\0\6\172\1\0\1\172"+
    "\1\0\1\172\2\0\5\172\4\0\1\172\10\0\1\172"+
    "\1\244\2\172\1\0\3\172\1\0\1\243\11\0\6\172"+
    "\1\0\1\172\1\0\1\172\2\0\5\172\4\0\1\73"+
    "\10\0\4\73\1\0\3\73\13\0\5\73\1\245\1\0"+
    "\1\73\1\0\1\73\2\0\5\73\4\0\1\73\10\0"+
    "\4\73\1\0\3\73\13\0\2\73\1\246\3\73\1\0"+
    "\1\73\1\0\1\73\2\0\5\73\51\0\1\247\13\0"+
    "\1\201\10\0\4\201\1\0\3\201\1\0\1\250\11\0"+
    "\6\201\1\0\1\201\1\0\1\201\2\0\5\201\1\251"+
    "\2\0\10\202\1\252\50\202\2\111\2\0\4\111\1\113"+
    "\50\111\2\204\2\0\1\151\2\204\1\253\15\204\1\151"+
    "\3\204\1\151\27\204\2\121\3\0\2\121\1\254\15\121"+
    "\1\0\3\121\1\0\31\121\3\0\3\121\1\123\14\121"+
    "\1\0\3\121\1\0\30\121\1\207\3\0\5\121\4\207"+
    "\1\121\3\207\1\121\1\255\1\121\1\0\3\121\1\0"+
    "\3\121\6\207\1\121\1\207\1\121\1\207\2\121\5\207"+
    "\4\121\1\207\3\0\5\121\1\207\1\256\2\207\1\121"+
    "\3\207\1\121\1\255\1\121\1\0\3\121\1\0\3\121"+
    "\6\207\1\121\1\207\1\121\1\207\2\121\5\207\5\121"+
    "\3\0\20\121\1\0\3\121\1\0\10\121\1\257\20\121"+
    "\3\0\20\121\1\0\3\121\1\0\5\121\1\260\23\121"+
    "\3\0\20\121\1\0\3\121\1\0\14\121\1\261\12\121"+
    "\1\0\1\214\10\0\4\214\1\0\3\214\1\0\1\262"+
    "\11\0\6\214\1\0\1\214\1\0\1\214\2\0\5\214"+
    "\4\0\1\214\10\0\1\214\1\263\2\214\1\0\3\214"+
    "\1\0\1\262\11\0\6\214\1\0\1\214\1\0\1\214"+
    "\2\0\5\214\16\0\1\264\51\0\1\217\15\0\1\221"+
    "\37\0\1\141\2\0\1\217\5\0\1\220\1\265\2\141"+
    "\1\0\3\141\1\221\1\143\2\0\2\143\5\0\6\141"+
    "\1\0\1\141\1\0\1\141\2\0\5\141\4\0\1\141"+
    "\2\0\1\217\5\0\1\220\1\141\1\266\1\141\1\0"+
    "\3\141\1\221\1\143\2\0\2\143\5\0\6\141\1\0"+
    "\1\141\1\0\1\141\2\0\5\141\43\0\1\267\21\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\3\16\1\270"+
    "\2\16\1\0\1\16\1\0\1\16\2\0\5\16\4\0"+
    "\1\16\10\0\1\16\1\271\2\16\1\0\3\16\13\0"+
    "\6\16\1\0\1\16\1\0\1\16\2\0\5\16\4\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\4\16\1\272"+
    "\1\16\1\0\1\16\1\0\1\16\2\0\5\16\12\0"+
    "\1\227\52\0\1\153\10\0\4\153\1\0\3\153\13\0"+
    "\6\153\1\0\1\153\1\0\1\153\2\0\5\153\4\0"+
    "\1\153\10\0\2\153\1\273\1\153\1\0\3\153\1\0"+
    "\1\231\11\0\6\153\1\0\1\153\1\0\1\153\2\0"+
    "\5\153\4\0\1\33\10\0\4\33\1\0\3\33\1\0"+
    "\1\150\11\0\6\33\1\274\1\236\1\0\1\33\2\0"+
    "\5\33\43\0\1\275\21\0\1\33\10\0\4\33\1\0"+
    "\3\33\1\0\1\150\11\0\3\33\1\276\2\33\1\0"+
    "\1\33\1\0\1\33\2\0\5\33\4\0\1\33\10\0"+
    "\4\33\1\0\3\33\1\0\1\150\11\0\3\33\1\277"+
    "\2\33\1\0\1\33\1\0\1\33\2\0\5\33\4\0"+
    "\1\33\10\0\1\33\1\300\2\33\1\0\3\33\1\0"+
    "\1\150\11\0\6\33\1\0\1\33\1\0\1\33\2\0"+
    "\5\33\4\0\1\33\10\0\4\33\1\0\3\33\1\0"+
    "\1\150\11\0\4\33\1\301\1\33\1\0\1\33\1\0"+
    "\1\33\2\0\5\33\4\0\1\33\10\0\4\33\1\0"+
    "\3\33\1\0\1\150\11\0\6\33\1\0\1\33\1\0"+
    "\1\241\2\0\5\33\17\0\1\302\45\0\1\172\10\0"+
    "\4\172\1\0\3\172\13\0\6\172\1\0\1\172\1\0"+
    "\1\172\2\0\5\172\4\0\1\172\10\0\2\172\1\303"+
    "\1\172\1\0\3\172\1\0\1\243\11\0\6\172\1\0"+
    "\1\172\1\0\1\172\2\0\5\172\4\0\1\73\10\0"+
    "\4\73\1\0\3\73\13\0\6\73\1\274\1\246\1\0"+
    "\1\73\2\0\5\73\4\0\1\73\10\0\4\73\1\0"+
    "\3\73\13\0\3\73\1\304\2\73\1\0\1\73\1\0"+
    "\1\73\2\0\5\73\4\0\1\305\10\0\4\305\1\0"+
    "\3\305\13\0\6\305\1\0\1\305\1\0\1\305\2\0"+
    "\5\305\13\0\1\202\50\0\2\121\3\0\2\121\1\253"+
    "\15\121\1\0\3\121\1\0\30\121\1\207\3\0\5\121"+
    "\4\207\1\121\3\207\3\121\1\0\3\121\1\0\3\121"+
    "\6\207\1\121\1\207\1\121\1\207\2\121\5\207\4\121"+
    "\1\207\3\0\5\121\2\207\1\306\1\207\1\121\3\207"+
    "\1\121\1\255\1\121\1\0\3\121\1\0\3\121\6\207"+
    "\1\121\1\207\1\121\1\207\2\121\5\207\5\121\3\0"+
    "\20\121\1\0\3\121\1\0\11\121\2\260\16\121\3\0"+
    "\20\121\1\0\3\121\1\0\6\121\1\307\20\121\1\0"+
    "\1\214\10\0\4\214\1\0\3\214\13\0\6\214\1\0"+
    "\1\214\1\0\1\214\2\0\5\214\4\0\1\214\10\0"+
    "\2\214\1\310\1\214\1\0\3\214\1\0\1\262\11\0"+
    "\6\214\1\0\1\214\1\0\1\214\2\0\5\214\17\0"+
    "\1\311\45\0\1\141\2\0\1\217\5\0\1\220\1\141"+
    "\1\312\1\141\1\0\3\141\1\221\1\143\2\0\2\143"+
    "\5\0\6\141\1\0\1\141\1\0\1\141\2\0\5\141"+
    "\4\0\1\141\2\0\1\217\5\0\1\220\2\141\1\313"+
    "\1\0\3\141\1\221\1\143\2\0\2\143\5\0\6\141"+
    "\1\0\1\141\1\0\1\141\2\0\5\141\41\0\1\314"+
    "\23\0\1\16\10\0\4\16\1\0\3\16\13\0\1\16"+
    "\1\315\4\16\1\0\1\16\1\0\1\16\2\0\5\16"+
    "\4\0\1\16\10\0\4\16\1\0\3\16\13\0\6\16"+
    "\1\0\1\16\1\0\1\16\2\0\4\16\1\316\4\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\1\317\5\16"+
    "\1\0\1\16\1\0\1\16\2\0\5\16\4\0\1\153"+
    "\10\0\3\153\1\320\1\0\3\153\1\0\1\231\11\0"+
    "\6\153\1\0\1\153\1\0\1\153\2\0\5\153\43\0"+
    "\1\321\56\0\1\322\23\0\1\33\10\0\4\33\1\0"+
    "\3\33\1\0\1\150\11\0\1\33\1\323\4\33\1\0"+
    "\1\33\1\0\1\33\2\0\5\33\4\0\1\33\10\0"+
    "\4\33\1\0\3\33\1\0\1\150\11\0\6\33\1\0"+
    "\1\33\1\0\1\33\2\0\4\33\1\324\4\0\1\33"+
    "\10\0\4\33\1\0\3\33\1\0\1\150\11\0\1\325"+
    "\5\33\1\0\1\33\1\0\1\33\2\0\5\33\16\0"+
    "\1\326\46\0\1\172\10\0\3\172\1\327\1\0\3\172"+
    "\1\0\1\243\11\0\6\172\1\0\1\172\1\0\1\172"+
    "\2\0\5\172\3\0\1\121\1\207\3\0\5\121\3\207"+
    "\1\330\1\121\3\207\1\121\1\255\1\121\1\0\3\121"+
    "\1\0\3\121\6\207\1\121\1\207\1\121\1\207\2\121"+
    "\5\207\3\121\1\0\1\214\10\0\3\214\1\331\1\0"+
    "\3\214\1\0\1\262\11\0\6\214\1\0\1\214\1\0"+
    "\1\214\2\0\5\214\20\0\1\332\44\0\1\141\2\0"+
    "\1\217\5\0\1\220\2\141\1\333\1\0\3\141\1\221"+
    "\1\143\2\0\2\143\5\0\6\141\1\0\1\141\1\0"+
    "\1\141\2\0\5\141\4\0\1\141\2\0\1\217\5\0"+
    "\1\220\3\141\1\334\3\141\1\221\1\143\2\0\2\143"+
    "\5\0\6\141\1\0\1\141\1\0\1\141\2\0\5\141"+
    "\40\0\1\335\24\0\1\16\10\0\4\16\1\0\3\16"+
    "\13\0\1\336\5\16\1\0\1\16\1\0\1\16\2\0"+
    "\5\16\4\0\1\16\10\0\4\16\1\0\3\16\13\0"+
    "\3\16\1\337\2\16\1\0\1\16\1\0\1\16\2\0"+
    "\5\16\4\0\1\16\10\0\4\16\1\0\3\16\13\0"+
    "\3\16\1\340\2\16\1\0\1\16\1\0\1\16\2\0"+
    "\5\16\4\0\1\153\10\0\4\153\1\341\3\153\1\0"+
    "\1\231\11\0\6\153\1\0\1\153\1\0\1\153\2\0"+
    "\5\153\40\0\1\342\24\0\1\33\10\0\4\33\1\0"+
    "\3\33\1\0\1\150\11\0\1\343\5\33\1\0\1\33"+
    "\1\0\1\33\2\0\5\33\4\0\1\33\10\0\4\33"+
    "\1\0\3\33\1\0\1\150\11\0\3\33\1\344\2\33"+
    "\1\0\1\33\1\0\1\33\2\0\5\33\4\0\1\33"+
    "\10\0\4\33\1\0\3\33\1\0\1\150\11\0\3\33"+
    "\1\345\2\33\1\0\1\33\1\0\1\33\2\0\5\33"+
    "\41\0\1\346\23\0\1\172\10\0\4\172\1\347\3\172"+
    "\1\0\1\243\11\0\6\172\1\0\1\172\1\0\1\172"+
    "\2\0\5\172\3\0\1\121\1\207\3\0\5\121\4\207"+
    "\1\350\3\207\1\121\1\255\1\121\1\0\3\121\1\0"+
    "\3\121\6\207\1\121\1\207\1\121\1\207\2\121\5\207"+
    "\3\121\1\0\1\214\10\0\4\214\1\351\3\214\1\0"+
    "\1\262\11\0\6\214\1\0\1\214\1\0\1\214\2\0"+
    "\5\214\21\0\2\351\42\0\1\141\2\0\1\217\5\0"+
    "\1\220\3\141\1\352\3\141\1\221\1\143\2\0\2\143"+
    "\5\0\6\141\1\0\1\141\1\0\1\141\2\0\5\141"+
    "\23\0\1\353\113\0\1\354\6\0\1\16\10\0\4\16"+
    "\1\0\3\16\13\0\6\16\1\0\1\16\1\0\1\16"+
    "\2\0\2\16\1\355\2\16\23\0\1\356\113\0\1\357"+
    "\6\0\1\33\10\0\4\33\1\0\3\33\1\0\1\150"+
    "\11\0\6\33\1\0\1\33\1\0\1\33\2\0\2\33"+
    "\1\360\2\33\43\0\1\361\40\0\1\362\40\0\2\121"+
    "\3\0\13\121\1\363\4\121\1\0\3\121\1\0\27\121"+
    "\20\0\1\364\60\0\1\365\61\0\1\366\76\0\1\367"+
    "\22\0\1\16\10\0\4\16\1\0\3\16\13\0\2\16"+
    "\1\370\3\16\1\0\1\16\1\0\1\16\2\0\5\16"+
    "\24\0\1\371\76\0\1\372\22\0\1\33\10\0\4\33"+
    "\1\0\3\33\1\0\1\150\11\0\2\33\1\373\3\33"+
    "\1\0\1\33\1\0\1\33\2\0\5\33\36\0\1\374"+
    "\46\0\1\375\37\0\2\121\3\0\14\121\1\376\3\121"+
    "\1\0\3\121\1\0\27\121\21\0\1\377\60\0\1\u0100"+
    "\40\0\1\u0101\2\0\1\217\5\0\1\u0102\3\u0101\1\0"+
    "\3\u0101\1\221\12\0\6\u0101\1\0\1\u0101\1\0\1\u0101"+
    "\2\0\5\u0101\54\0\1\u0103\10\0\1\16\10\0\4\16"+
    "\1\0\3\16\13\0\6\16\1\0\1\16\1\0\1\16"+
    "\2\0\1\u0104\4\16\54\0\1\u0105\10\0\1\33\10\0"+
    "\4\33\1\0\3\33\1\0\1\150\11\0\6\33\1\0"+
    "\1\33\1\0\1\33\2\0\1\u0106\4\33\4\0\1\u0100"+
    "\2\0\1\217\5\0\1\u0107\3\u0100\1\0\3\u0100\1\221"+
    "\12\0\6\u0100\1\0\1\u0100\1\0\1\u0100\2\0\5\u0100"+
    "\4\0\1\u0101\2\0\1\217\5\0\1\u0102\3\u0101\1\0"+
    "\3\u0101\1\221\1\243\11\0\6\u0101\1\0\1\u0101\1\0"+
    "\1\u0101\2\0\5\u0101\4\0\1\u0101\2\0\1\217\5\0"+
    "\1\u0102\1\u0108\2\u0101\1\0\3\u0101\1\221\1\243\11\0"+
    "\6\u0101\1\0\1\u0101\1\0\1\u0101\2\0\5\u0101\55\0"+
    "\1\u0109\7\0\1\16\10\0\4\16\1\0\3\16\13\0"+
    "\6\16\1\0\1\16\1\0\1\16\2\0\1\16\1\u010a"+
    "\3\16\55\0\1\u010b\7\0\1\33\10\0\4\33\1\0"+
    "\3\33\1\0\1\150\11\0\6\33\1\0\1\33\1\0"+
    "\1\33\2\0\1\33\1\u010c\3\33\4\0\1\u0100\2\0"+
    "\1\217\5\0\1\u0107\1\u010d\2\u0100\1\0\3\u0100\1\221"+
    "\12\0\6\u0100\1\0\1\u0100\1\0\1\u0100\2\0\5\u0100"+
    "\4\0\1\u0101\2\0\1\217\5\0\1\u0102\1\u0101\1\u010e"+
    "\1\u0101\1\0\3\u0101\1\221\1\243\11\0\6\u0101\1\0"+
    "\1\u0101\1\0\1\u0101\2\0\5\u0101\44\0\1\u010f\20\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\4\16\1\u0110"+
    "\1\16\1\0\1\16\1\0\1\16\2\0\5\16\44\0"+
    "\1\u0111\20\0\1\33\10\0\4\33\1\0\3\33\1\0"+
    "\1\150\11\0\4\33\1\u0112\1\33\1\0\1\33\1\0"+
    "\1\33\2\0\5\33\4\0\1\u0100\2\0\1\217\5\0"+
    "\1\u0107\1\u0100\1\u0113\1\u0100\1\0\3\u0100\1\221\12\0"+
    "\6\u0100\1\0\1\u0100\1\0\1\u0100\2\0\5\u0100\4\0"+
    "\1\u0101\2\0\1\217\5\0\1\u0102\2\u0101\1\u0114\1\0"+
    "\3\u0101\1\221\1\243\11\0\6\u0101\1\0\1\u0101\1\0"+
    "\1\u0101\2\0\5\u0101\40\0\1\u0115\24\0\1\16\10\0"+
    "\4\16\1\0\3\16\13\0\1\u0116\5\16\1\0\1\16"+
    "\1\0\1\16\2\0\5\16\40\0\1\u0117\24\0\1\33"+
    "\10\0\4\33\1\0\3\33\1\0\1\150\11\0\1\u0118"+
    "\5\33\1\0\1\33\1\0\1\33\2\0\5\33\4\0"+
    "\1\u0100\2\0\1\217\5\0\1\u0107\2\u0100\1\u0119\1\0"+
    "\3\u0100\1\221\12\0\6\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\2\0\5\u0100\4\0\1\u0101\2\0\1\217\5\0\1\u0102"+
    "\3\u0101\1\352\3\u0101\1\221\1\243\11\0\6\u0101\1\0"+
    "\1\u0101\1\0\1\u0101\2\0\5\u0101\43\0\1\u011a\21\0"+
    "\1\16\10\0\4\16\1\0\3\16\13\0\3\16\1\u011b"+
    "\2\16\1\0\1\16\1\0\1\16\2\0\5\16\43\0"+
    "\1\u011c\21\0\1\33\10\0\4\33\1\0\3\33\1\0"+
    "\1\150\11\0\3\33\1\u011d\2\33\1\0\1\33\1\0"+
    "\1\33\2\0\5\33\4\0\1\u0100\2\0\1\217\5\0"+
    "\1\u0107\3\u0100\1\352\3\u0100\1\221\12\0\6\u0100\1\0"+
    "\1\u0100\1\0\1\u0100\2\0\5\u0100\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\5\0\1\11\1\1\1\11\7\1\1\11"+
    "\2\1\1\11\10\1\5\11\7\1\1\11\3\1\5\11"+
    "\2\1\1\11\5\1\4\11\12\1\3\11\6\1\1\11"+
    "\3\1\1\11\3\1\1\0\4\1\1\0\4\1\1\0"+
    "\4\1\1\0\7\1\3\0\1\11\4\1\1\11\1\1"+
    "\3\0\13\1\2\0\1\1\1\11\1\1\1\0\3\1"+
    "\1\11\1\0\3\1\1\0\5\1\1\0\5\1\2\0"+
    "\12\1\1\0\2\1\1\0\4\1\2\0\4\1\1\0"+
    "\6\1\1\0\2\1\1\0\4\1\1\11\1\0\3\1"+
    "\1\0\3\1\1\0\1\1\1\0\4\1\1\0\4\1"+
    "\2\0\1\1\4\0\1\1\2\0\1\1\2\0\1\1"+
    "\4\0\1\1\2\0\1\1\1\11\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ImpexTypes.BEAN_SHELL_BODY;
            } 
            // fall through
          case 57: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 3: 
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            } 
            // fall through
          case 59: break;
          case 4: 
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            } 
            // fall through
          case 60: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 6: 
            { yybegin(YYINITIAL); return ImpexTypes.LINE_COMMENT;
            } 
            // fall through
          case 62: break;
          case 7: 
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            } 
            // fall through
          case 63: break;
          case 8: 
            { return ImpexTypes.MACRO_VALUE;
            } 
            // fall through
          case 64: break;
          case 9: 
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            } 
            // fall through
          case 65: break;
          case 10: 
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            } 
            // fall through
          case 66: break;
          case 11: 
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            } 
            // fall through
          case 67: break;
          case 12: 
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            } 
            // fall through
          case 68: break;
          case 13: 
            { return ImpexTypes.COMMA;
            } 
            // fall through
          case 69: break;
          case 14: 
            { return ImpexTypes.DIGIT;
            } 
            // fall through
          case 70: break;
          case 15: 
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            } 
            // fall through
          case 71: break;
          case 16: 
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            } 
            // fall through
          case 72: break;
          case 17: 
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            } 
            // fall through
          case 73: break;
          case 18: 
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            } 
            // fall through
          case 74: break;
          case 19: 
            { return ImpexTypes.DOT;
            } 
            // fall through
          case 75: break;
          case 20: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            } 
            // fall through
          case 76: break;
          case 21: 
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            } 
            // fall through
          case 77: break;
          case 22: 
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            } 
            // fall through
          case 78: break;
          case 23: 
            { return ImpexTypes.FIELD_VALUE;
            } 
            // fall through
          case 79: break;
          case 24: 
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            } 
            // fall through
          case 80: break;
          case 25: 
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            } 
            // fall through
          case 81: break;
          case 26: 
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            } 
            // fall through
          case 82: break;
          case 27: 
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            } 
            // fall through
          case 83: break;
          case 28: 
            { return ImpexTypes.ATTRIBUTE_NAME;
            } 
            // fall through
          case 84: break;
          case 29: 
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            } 
            // fall through
          case 85: break;
          case 30: 
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            } 
            // fall through
          case 86: break;
          case 31: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            } 
            // fall through
          case 87: break;
          case 32: 
            { return ImpexTypes.ATTRIBUTE_VALUE;
            } 
            // fall through
          case 88: break;
          case 33: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            } 
            // fall through
          case 89: break;
          case 34: 
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            } 
            // fall through
          case 90: break;
          case 35: 
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            } 
            // fall through
          case 91: break;
          case 36: 
            { return ImpexTypes.DOUBLE_STRING;
            } 
            // fall through
          case 92: break;
          case 37: 
            { return ImpexTypes.MACRO_USAGE;
            } 
            // fall through
          case 93: break;
          case 38: 
            { return ImpexTypes.SINGLE_STRING;
            } 
            // fall through
          case 94: break;
          case 39: 
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            } 
            // fall through
          case 95: break;
          case 40: 
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            } 
            // fall through
          case 96: break;
          case 41: 
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            } 
            // fall through
          case 97: break;
          case 42: 
            { return ImpexTypes.DOCUMENT_ID;
            } 
            // fall through
          case 98: break;
          case 43: 
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            } 
            // fall through
          case 99: break;
          case 44: 
            { yybegin(WAITING_MACRO_VALUE);
                                                                return ImpexTypes.MACRO_USAGE;
            } 
            // fall through
          case 100: break;
          case 45: 
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            } 
            // fall through
          case 101: break;
          case 46: 
            { return ImpexTypes.BOOLEAN;
            } 
            // fall through
          case 102: break;
          case 47: 
            { return ImpexTypes.FIELD_VALUE_URL;
            } 
            // fall through
          case 103: break;
          case 48: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            } 
            // fall through
          case 104: break;
          case 49: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            } 
            // fall through
          case 105: break;
          case 50: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            } 
            // fall through
          case 106: break;
          case 51: 
            { return ImpexTypes.HEADER_MODE_INSERT;
            } 
            // fall through
          case 107: break;
          case 52: 
            { return ImpexTypes.HEADER_MODE_REMOVE;
            } 
            // fall through
          case 108: break;
          case 53: 
            { return ImpexTypes.HEADER_MODE_UPDATE;
            } 
            // fall through
          case 109: break;
          case 54: 
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            } 
            // fall through
          case 110: break;
          case 55: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            } 
            // fall through
          case 111: break;
          case 56: 
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
