/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int WAITING_MACRO_VALUE = 4;
  public static final int MACRO_DECLARATION = 6;
  public static final int HEADER_TYPE = 8;
  public static final int HEADER_LINE = 10;
  public static final int FIELD_VALUE = 12;
  public static final int BEAN_SHELL = 14;
  public static final int MODYFIERS_BLOCK = 16;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 18;
  public static final int HEADER_PARAMETERS = 20;
  public static final int MACRO_USAGE = 22;
  public static final int MACRO_CONFIG_USAGE = 24;
  public static final int WAITING_MACRO_CONFIG_USAGE = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 10, 10, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\172\3\1\6\77\3");

  /* The ZZ_CMAP_A table has 448 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\57\1\4\1\3\22\0\1\4\1\0\1\10\1\5\1\11\1\6\1\50\1\7\1\25\1"+
    "\26\1\0\1\45\1\30\1\21\1\31\1\0\12\46\1\32\1\27\1\56\1\22\1\33\1\0\1\47\1"+
    "\41\1\1\1\12\1\52\1\40\1\15\1\20\1\1\1\17\2\1\1\42\1\54\1\14\1\13\1\51\1\1"+
    "\1\36\1\44\1\35\1\37\1\55\4\1\1\23\1\0\1\24\1\0\1\53\1\0\1\41\1\1\1\12\1\52"+
    "\1\40\1\15\1\20\1\1\1\17\2\1\1\42\1\54\1\14\1\13\1\51\1\1\1\36\1\44\1\35\1"+
    "\37\1\55\4\1\1\0\1\34\10\0\1\57\252\0\2\16\115\0\1\43\50\0\2\57\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\5\0\1\3\1\4\2\5"+
    "\1\6\1\7\3\3\1\4\1\10\2\4\1\1\1\6"+
    "\11\11\1\12\1\13\1\14\1\15\1\16\1\17\5\11"+
    "\1\20\2\11\1\21\1\22\1\23\1\3\1\24\1\25"+
    "\1\26\1\27\1\30\2\3\6\31\1\32\1\33\1\34"+
    "\1\35\2\31\1\20\1\31\1\2\1\6\1\2\1\36"+
    "\1\3\1\37\1\40\1\41\6\42\1\43\1\42\1\20"+
    "\1\3\2\44\1\45\1\0\1\46\2\47\1\0\3\4"+
    "\2\0\1\50\1\51\1\11\1\0\4\11\1\20\1\0"+
    "\1\52\2\0\1\53\1\0\1\47\1\54\1\31\1\55"+
    "\1\31\2\0\1\2\1\42\1\50\1\46\1\47\3\42"+
    "\1\56\2\0\1\57\1\47\1\0\3\4\1\50\1\0"+
    "\1\11\1\0\4\11\1\20\1\0\2\31\1\20\1\2"+
    "\1\50\3\42\1\20\1\0\1\47\1\0\3\4\2\0"+
    "\1\11\1\60\2\11\1\0\2\60\1\0\1\47\1\0"+
    "\3\4\1\60\1\0\3\11\3\0\2\61\1\62\1\63"+
    "\2\64\1\65\1\66\4\0\1\4\1\0\1\11\4\0"+
    "\1\4\1\0\1\11\1\67\1\56\2\0\1\4\1\0"+
    "\1\11\2\0\1\4\1\0\1\11\2\0\1\4\1\0"+
    "\1\11\2\0\1\4\1\0\1\11\2\70\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u0270"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0270"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u0270\0\u04e0\0\u0510\0\u0360"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0270\0\u0270\0\u0270"+
    "\0\u0270\0\u0270\0\u0270\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u0270\0\u07b0\0\u07e0\0\u0810\0\u0270"+
    "\0\u0270\0\u0270\0\u0270\0\u0270\0\u0750\0\u0840\0\u0270\0\u0870"+
    "\0\u0360\0\u0810\0\u08a0\0\u08d0\0\u0270\0\u0270\0\u0270\0\u0270"+
    "\0\u0900\0\u06f0\0\u0930\0\u0780\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0510\0\u0270\0\u0270\0\u0270\0\u0a20\0\u0a50\0\u0a80\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\u0270\0\u0b40\0\u0b70\0\u0ba0\0\u0270\0\u0bd0"+
    "\0\u0270\0\u0360\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0630\0\u0d50\0\u0d80\0\u0540\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0750\0\u0f30\0\u0f60"+
    "\0\u0270\0\u0f90\0\u0810\0\u0840\0\u0fc0\0\u0270\0\u0ff0\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u0ab0\0\u1140\0\u1170"+
    "\0\u11a0\0\u0ba0\0\u11d0\0\u1200\0\u0270\0\u1230\0\u1260\0\u1290"+
    "\0\u12c0\0\u12f0\0\u0270\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0"+
    "\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1020\0\u1530"+
    "\0\u0a20\0\u1560\0\u1590\0\u15c0\0\u11a0\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u04e0\0\u17a0"+
    "\0\u17d0\0\u1800\0\u0870\0\u0a20\0\u1830\0\u1860\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\u0270\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10"+
    "\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u02a0\0\u02a0\0\u1b00\0\u1b30"+
    "\0\u04e0\0\u04e0\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50"+
    "\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0"+
    "\0\u0270\0\u0270\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0"+
    "\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070"+
    "\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u0270\0\u02a0"+
    "\0\u0270\0\u04e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\2\16\1\24"+
    "\1\25\4\17\1\26\1\27\2\17\5\16\1\30\5\16"+
    "\1\17\1\31\1\32\3\17\1\16\1\17\1\16\1\17"+
    "\2\16\5\17\1\16\1\0\2\33\1\20\1\21\1\34"+
    "\53\33\1\35\1\36\1\20\1\21\1\22\2\35\1\37"+
    "\1\40\1\41\3\36\1\42\1\43\1\44\1\36\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\35\1\53\1\54"+
    "\3\35\1\55\1\56\1\57\3\36\1\35\1\36\1\60"+
    "\1\61\1\62\1\35\5\36\1\63\1\35\2\16\1\20"+
    "\1\21\1\22\15\16\1\64\34\16\1\0\1\16\1\65"+
    "\1\20\1\21\1\22\5\16\4\65\1\16\3\65\13\16"+
    "\6\65\1\16\1\65\1\16\1\65\2\16\5\65\1\16"+
    "\1\0\1\16\1\66\1\20\1\21\1\22\4\16\1\67"+
    "\4\66\1\16\3\66\1\70\1\71\1\50\1\51\1\52"+
    "\1\72\1\53\1\73\2\16\1\74\6\66\1\16\1\66"+
    "\1\16\1\66\1\75\1\76\5\66\1\16\1\0\1\77"+
    "\1\100\1\20\1\21\1\22\3\77\1\101\1\102\3\100"+
    "\1\103\1\77\2\100\1\104\5\77\1\105\1\106\1\77"+
    "\1\107\1\77\1\110\1\111\5\100\1\77\1\100\1\112"+
    "\1\113\2\77\5\100\1\114\1\77\2\115\1\20\1\21"+
    "\1\116\3\115\1\117\47\115\1\16\1\120\1\20\1\21"+
    "\1\22\2\16\1\121\1\24\1\67\4\120\1\16\3\120"+
    "\1\70\1\16\1\122\3\16\1\123\1\120\2\16\1\124"+
    "\6\120\1\16\1\120\1\16\1\120\2\16\5\120\1\16"+
    "\1\0\2\125\1\20\1\21\1\22\2\125\1\126\1\127"+
    "\1\130\3\125\1\131\3\125\1\132\2\125\1\122\3\125"+
    "\1\133\4\125\1\134\7\125\1\132\1\135\11\125\2\16"+
    "\1\20\1\21\1\22\52\16\1\0\2\16\1\20\1\21"+
    "\1\22\4\16\1\136\45\16\1\0\2\137\1\20\1\21"+
    "\1\22\4\137\1\140\45\137\62\0\1\17\10\0\4\17"+
    "\1\0\3\17\13\0\6\17\1\0\1\17\1\0\1\17"+
    "\2\0\5\17\4\0\1\20\61\0\1\22\61\0\1\141"+
    "\51\0\10\142\1\143\47\142\1\0\1\144\10\0\1\145"+
    "\3\144\1\0\3\144\13\0\6\144\1\0\1\144\1\0"+
    "\1\144\2\0\5\144\16\0\1\146\44\0\1\17\10\0"+
    "\2\17\1\147\1\17\1\0\3\17\13\0\6\17\1\0"+
    "\1\17\1\0\1\17\2\0\5\17\3\0\1\17\10\0"+
    "\4\17\1\0\3\17\13\0\3\17\1\150\2\17\1\0"+
    "\1\17\1\0\1\17\2\0\5\17\3\0\1\17\10\0"+
    "\4\17\1\0\3\17\13\0\6\17\1\0\1\17\1\0"+
    "\1\17\2\0\1\151\4\17\2\0\2\33\2\0\56\33"+
    "\2\0\1\34\53\33\1\0\1\36\10\0\4\36\1\0"+
    "\3\36\7\0\1\152\3\0\6\36\1\0\1\36\1\0"+
    "\1\36\2\0\5\36\2\0\2\153\2\0\3\153\1\154"+
    "\50\153\1\0\1\155\10\0\4\155\1\0\3\155\13\0"+
    "\6\155\1\0\1\155\1\0\1\155\2\0\5\155\3\0"+
    "\1\36\10\0\4\36\1\0\3\36\7\0\1\152\3\0"+
    "\4\36\1\156\1\36\1\0\1\36\1\0\1\36\2\0"+
    "\5\36\16\0\1\157\44\0\1\36\10\0\2\36\1\160"+
    "\1\36\1\0\3\36\7\0\1\152\3\0\6\36\1\0"+
    "\1\36\1\0\1\36\2\0\5\36\3\0\1\36\10\0"+
    "\4\36\1\0\3\36\7\0\1\152\3\0\6\36\1\0"+
    "\1\36\1\0\1\61\2\0\5\36\3\0\1\36\10\0"+
    "\4\36\1\0\3\36\13\0\6\36\1\0\1\36\1\0"+
    "\1\36\2\0\5\36\3\0\1\36\10\0\4\36\1\0"+
    "\3\36\7\0\1\152\3\0\1\36\1\161\4\36\1\0"+
    "\1\36\1\0\1\36\2\0\5\36\3\0\1\36\10\0"+
    "\4\36\1\0\3\36\7\0\1\152\3\0\3\36\1\162"+
    "\2\36\1\0\1\36\1\0\1\36\2\0\5\36\3\0"+
    "\1\36\10\0\4\36\1\0\3\36\7\0\1\152\3\0"+
    "\6\36\1\0\1\36\1\0\1\36\2\0\1\163\4\36"+
    "\50\0\1\164\12\0\1\36\10\0\4\36\1\0\3\36"+
    "\7\0\1\165\3\0\6\36\1\0\1\36\1\0\1\61"+
    "\2\0\5\36\3\0\1\166\10\0\4\166\1\0\3\166"+
    "\13\0\6\166\1\0\1\166\1\0\1\166\2\0\5\166"+
    "\20\0\2\167\41\0\1\65\10\0\4\65\1\0\3\65"+
    "\13\0\6\65\1\0\1\65\1\0\1\65\2\0\5\65"+
    "\3\0\1\66\2\0\1\170\5\0\4\66\1\0\3\66"+
    "\3\0\1\171\3\0\1\172\3\0\6\66\1\0\1\66"+
    "\1\0\1\66\2\0\5\66\3\0\1\173\10\0\4\173"+
    "\1\0\3\173\13\0\6\173\1\0\1\173\1\0\1\173"+
    "\2\0\5\173\3\0\1\174\10\0\4\174\1\0\3\174"+
    "\13\0\6\174\1\0\1\174\1\0\1\174\2\0\5\174"+
    "\3\0\1\100\10\0\4\100\1\0\3\100\13\0\6\100"+
    "\1\0\1\100\1\0\1\100\2\0\5\100\3\0\1\100"+
    "\10\0\4\100\1\0\3\100\13\0\4\100\1\175\1\100"+
    "\1\0\1\100\1\0\1\100\2\0\5\100\3\0\1\100"+
    "\10\0\4\100\1\0\3\100\11\0\1\176\1\0\6\100"+
    "\1\0\1\100\1\0\1\113\2\0\5\100\3\0\1\100"+
    "\10\0\4\100\1\0\3\100\13\0\1\100\1\177\4\100"+
    "\1\0\1\100\1\0\1\100\2\0\5\100\3\0\1\100"+
    "\10\0\4\100\1\0\3\100\7\0\1\200\3\0\6\100"+
    "\1\0\1\100\1\0\1\113\2\0\5\100\2\0\2\115"+
    "\2\0\56\115\2\0\1\116\53\115\2\117\2\201\4\117"+
    "\1\202\47\117\1\0\1\120\10\0\4\120\1\0\3\120"+
    "\7\0\1\120\3\0\6\120\1\0\1\120\1\0\1\120"+
    "\2\0\5\120\2\0\2\125\3\0\17\125\1\0\3\125"+
    "\1\0\27\125\2\203\2\0\1\153\2\203\1\204\14\203"+
    "\1\153\3\203\1\153\27\203\2\127\3\142\3\127\1\205"+
    "\13\127\1\142\3\127\1\142\27\127\1\125\1\206\3\0"+
    "\5\125\4\206\1\125\3\206\2\125\1\0\3\125\1\0"+
    "\4\125\6\206\1\125\1\206\1\125\1\206\2\125\5\206"+
    "\4\125\3\0\17\125\1\0\3\125\1\0\10\125\1\207"+
    "\20\125\3\0\17\125\1\0\3\125\1\0\15\125\1\135"+
    "\13\125\3\0\17\125\1\0\3\125\1\0\5\125\1\210"+
    "\23\125\3\0\17\125\1\0\3\125\1\0\1\211\14\125"+
    "\1\135\11\125\1\0\1\212\10\0\4\212\1\0\3\212"+
    "\13\0\6\212\1\0\1\212\1\0\1\212\2\0\5\212"+
    "\14\0\1\213\55\0\1\142\50\0\1\144\2\0\1\214"+
    "\5\0\1\145\3\144\1\0\3\144\1\215\12\0\6\144"+
    "\1\0\1\144\1\0\1\144\2\0\5\144\3\0\1\144"+
    "\2\0\1\214\5\0\1\145\1\216\2\144\1\0\3\144"+
    "\1\215\12\0\6\144\1\0\1\144\1\0\1\144\2\0"+
    "\5\144\45\0\2\217\14\0\1\17\10\0\4\17\1\0"+
    "\3\17\13\0\6\17\1\217\1\220\1\0\1\17\2\0"+
    "\5\17\3\0\1\17\10\0\4\17\1\0\3\17\13\0"+
    "\6\17\1\0\1\17\1\0\1\17\2\0\3\17\1\221"+
    "\1\17\3\0\1\17\10\0\4\17\1\0\3\17\13\0"+
    "\6\17\1\0\1\17\1\0\1\17\2\0\1\17\1\222"+
    "\3\17\2\0\2\153\2\0\3\153\1\223\50\153\7\0"+
    "\1\224\51\0\1\36\10\0\4\36\1\0\3\36\7\0"+
    "\1\152\3\0\5\36\1\225\1\0\1\36\1\0\1\36"+
    "\2\0\5\36\45\0\2\226\14\0\1\36\10\0\4\36"+
    "\1\0\3\36\7\0\1\152\3\0\6\36\1\226\1\227"+
    "\1\0\1\36\2\0\5\36\3\0\1\36\10\0\4\36"+
    "\1\0\3\36\7\0\1\152\3\0\2\36\1\230\3\36"+
    "\1\0\1\36\1\0\1\36\2\0\5\36\3\0\1\36"+
    "\10\0\4\36\1\0\3\36\7\0\1\152\3\0\6\36"+
    "\1\0\1\36\1\0\1\36\2\0\3\36\1\231\1\36"+
    "\3\0\1\36\10\0\4\36\1\0\3\36\7\0\1\152"+
    "\3\0\6\36\1\0\1\36\1\0\1\36\2\0\1\36"+
    "\1\232\3\36\33\0\1\200\14\0\1\164\12\0\1\36"+
    "\10\0\4\36\1\0\3\36\13\0\6\36\1\0\1\36"+
    "\1\0\1\233\2\0\5\36\22\0\1\234\43\0\1\170"+
    "\20\0\1\171\33\0\1\66\10\0\4\66\1\0\3\66"+
    "\13\0\6\66\1\0\1\66\1\0\1\66\2\0\5\66"+
    "\3\0\1\100\10\0\4\100\1\0\3\100\13\0\5\100"+
    "\1\235\1\0\1\100\1\0\1\100\2\0\5\100\3\0"+
    "\1\100\10\0\4\100\1\0\3\100\13\0\2\100\1\236"+
    "\3\100\1\0\1\100\1\0\1\100\2\0\5\100\50\0"+
    "\1\237\11\0\10\201\1\240\47\201\2\115\2\0\4\115"+
    "\1\117\47\115\2\203\2\0\1\153\2\203\1\241\14\203"+
    "\1\153\3\203\1\153\27\203\2\125\3\0\2\125\1\242"+
    "\14\125\1\0\3\125\1\0\31\125\3\0\3\125\1\127"+
    "\13\125\1\0\3\125\1\0\31\125\3\0\17\125\1\0"+
    "\3\125\1\0\11\125\1\243\17\125\3\0\17\125\1\0"+
    "\3\125\1\0\6\125\1\244\22\125\3\0\17\125\1\0"+
    "\3\125\1\0\15\125\1\245\11\125\13\0\1\246\50\0"+
    "\1\214\15\0\1\215\36\0\1\144\2\0\1\214\5\0"+
    "\1\145\1\144\1\247\1\144\1\0\3\144\1\215\12\0"+
    "\6\144\1\0\1\144\1\0\1\144\2\0\5\144\42\0"+
    "\1\250\20\0\1\17\10\0\4\17\1\0\3\17\13\0"+
    "\3\17\1\251\2\17\1\0\1\17\1\0\1\17\2\0"+
    "\5\17\3\0\1\17\10\0\1\17\1\252\2\17\1\0"+
    "\3\17\13\0\6\17\1\0\1\17\1\0\1\17\2\0"+
    "\5\17\3\0\1\17\10\0\4\17\1\0\3\17\13\0"+
    "\4\17\1\253\1\17\1\0\1\17\1\0\1\17\2\0"+
    "\5\17\11\0\1\223\51\0\1\36\10\0\4\36\1\0"+
    "\3\36\7\0\1\152\3\0\6\36\1\254\1\230\1\0"+
    "\1\36\2\0\5\36\42\0\1\255\20\0\1\36\10\0"+
    "\4\36\1\0\3\36\7\0\1\152\3\0\3\36\1\256"+
    "\2\36\1\0\1\36\1\0\1\36\2\0\5\36\3\0"+
    "\1\36\10\0\4\36\1\0\3\36\7\0\1\152\3\0"+
    "\3\36\1\257\2\36\1\0\1\36\1\0\1\36\2\0"+
    "\5\36\3\0\1\36\10\0\1\36\1\260\2\36\1\0"+
    "\3\36\7\0\1\152\3\0\6\36\1\0\1\36\1\0"+
    "\1\36\2\0\5\36\3\0\1\36\10\0\4\36\1\0"+
    "\3\36\7\0\1\152\3\0\4\36\1\261\1\36\1\0"+
    "\1\36\1\0\1\36\2\0\5\36\3\0\1\36\10\0"+
    "\4\36\1\0\3\36\7\0\1\152\3\0\6\36\1\0"+
    "\1\36\1\0\1\233\2\0\5\36\16\0\1\262\44\0"+
    "\1\100\10\0\4\100\1\0\3\100\13\0\6\100\1\254"+
    "\1\236\1\0\1\100\2\0\5\100\3\0\1\100\10\0"+
    "\4\100\1\0\3\100\13\0\3\100\1\263\2\100\1\0"+
    "\1\100\1\0\1\100\2\0\5\100\12\0\1\201\47\0"+
    "\2\125\3\0\2\125\1\241\14\125\1\0\3\125\1\0"+
    "\31\125\3\0\17\125\1\0\3\125\1\0\12\125\2\244"+
    "\15\125\3\0\17\125\1\0\3\125\1\0\7\125\1\264"+
    "\17\125\14\0\1\265\44\0\1\144\2\0\1\214\5\0"+
    "\1\145\2\144\1\266\1\0\3\144\1\215\12\0\6\144"+
    "\1\0\1\144\1\0\1\144\2\0\5\144\40\0\1\267"+
    "\22\0\1\17\10\0\4\17\1\0\3\17\13\0\1\17"+
    "\1\270\4\17\1\0\1\17\1\0\1\17\2\0\5\17"+
    "\3\0\1\17\10\0\4\17\1\0\3\17\13\0\6\17"+
    "\1\0\1\17\1\0\1\17\2\0\4\17\1\271\3\0"+
    "\1\17\10\0\4\17\1\0\3\17\13\0\1\272\5\17"+
    "\1\0\1\17\1\0\1\17\2\0\5\17\42\0\1\273"+
    "\55\0\1\274\22\0\1\36\10\0\4\36\1\0\3\36"+
    "\7\0\1\152\3\0\1\36\1\275\4\36\1\0\1\36"+
    "\1\0\1\36\2\0\5\36\3\0\1\36\10\0\4\36"+
    "\1\0\3\36\7\0\1\152\3\0\6\36\1\0\1\36"+
    "\1\0\1\36\2\0\4\36\1\276\3\0\1\36\10\0"+
    "\4\36\1\0\3\36\7\0\1\152\3\0\1\277\5\36"+
    "\1\0\1\36\1\0\1\36\2\0\5\36\15\0\1\300"+
    "\61\0\1\301\43\0\1\144\2\0\1\214\5\0\1\145"+
    "\3\144\1\302\3\144\1\215\12\0\6\144\1\0\1\144"+
    "\1\0\1\144\2\0\5\144\37\0\1\303\23\0\1\17"+
    "\10\0\4\17\1\0\3\17\13\0\1\304\5\17\1\0"+
    "\1\17\1\0\1\17\2\0\5\17\3\0\1\17\10\0"+
    "\4\17\1\0\3\17\13\0\3\17\1\305\2\17\1\0"+
    "\1\17\1\0\1\17\2\0\5\17\3\0\1\17\10\0"+
    "\4\17\1\0\3\17\13\0\3\17\1\306\2\17\1\0"+
    "\1\17\1\0\1\17\2\0\5\17\37\0\1\307\23\0"+
    "\1\36\10\0\4\36\1\0\3\36\7\0\1\152\3\0"+
    "\1\310\5\36\1\0\1\36\1\0\1\36\2\0\5\36"+
    "\3\0\1\36\10\0\4\36\1\0\3\36\7\0\1\152"+
    "\3\0\3\36\1\311\2\36\1\0\1\36\1\0\1\36"+
    "\2\0\5\36\3\0\1\36\10\0\4\36\1\0\3\36"+
    "\7\0\1\152\3\0\3\36\1\312\2\36\1\0\1\36"+
    "\1\0\1\36\2\0\5\36\40\0\1\313\37\0\2\314"+
    "\60\0\1\315\112\0\1\316\5\0\1\17\10\0\4\17"+
    "\1\0\3\17\13\0\6\17\1\0\1\17\1\0\1\17"+
    "\2\0\2\17\1\317\2\17\55\0\1\320\5\0\1\36"+
    "\10\0\4\36\1\0\3\36\7\0\1\152\3\0\6\36"+
    "\1\0\1\36\1\0\1\36\2\0\2\36\1\321\2\36"+
    "\42\0\1\322\37\0\1\323\60\0\1\324\75\0\1\325"+
    "\21\0\1\17\10\0\4\17\1\0\3\17\13\0\2\17"+
    "\1\326\3\17\1\0\1\17\1\0\1\17\2\0\5\17"+
    "\41\0\1\327\21\0\1\36\10\0\4\36\1\0\3\36"+
    "\7\0\1\152\3\0\2\36\1\330\3\36\1\0\1\36"+
    "\1\0\1\36\2\0\5\36\35\0\1\331\45\0\1\332"+
    "\37\0\1\324\2\0\1\214\5\0\1\333\3\324\1\0"+
    "\3\324\1\215\12\0\6\324\1\0\1\324\1\0\1\324"+
    "\2\0\5\324\53\0\1\334\7\0\1\17\10\0\4\17"+
    "\1\0\3\17\13\0\6\17\1\0\1\17\1\0\1\17"+
    "\2\0\1\335\4\17\53\0\1\336\7\0\1\36\10\0"+
    "\4\36\1\0\3\36\7\0\1\152\3\0\6\36\1\0"+
    "\1\36\1\0\1\36\2\0\1\337\4\36\3\0\1\324"+
    "\2\0\1\214\5\0\1\333\1\340\2\324\1\0\3\324"+
    "\1\215\12\0\6\324\1\0\1\324\1\0\1\324\2\0"+
    "\5\324\54\0\1\341\6\0\1\17\10\0\4\17\1\0"+
    "\3\17\13\0\6\17\1\0\1\17\1\0\1\17\2\0"+
    "\1\17\1\342\3\17\54\0\1\343\6\0\1\36\10\0"+
    "\4\36\1\0\3\36\7\0\1\152\3\0\6\36\1\0"+
    "\1\36\1\0\1\36\2\0\1\36\1\344\3\36\3\0"+
    "\1\324\2\0\1\214\5\0\1\333\1\324\1\345\1\324"+
    "\1\0\3\324\1\215\12\0\6\324\1\0\1\324\1\0"+
    "\1\324\2\0\5\324\43\0\1\346\17\0\1\17\10\0"+
    "\4\17\1\0\3\17\13\0\4\17\1\347\1\17\1\0"+
    "\1\17\1\0\1\17\2\0\5\17\43\0\1\350\17\0"+
    "\1\36\10\0\4\36\1\0\3\36\7\0\1\152\3\0"+
    "\4\36\1\351\1\36\1\0\1\36\1\0\1\36\2\0"+
    "\5\36\3\0\1\324\2\0\1\214\5\0\1\333\2\324"+
    "\1\352\1\0\3\324\1\215\12\0\6\324\1\0\1\324"+
    "\1\0\1\324\2\0\5\324\37\0\1\353\23\0\1\17"+
    "\10\0\4\17\1\0\3\17\13\0\1\354\5\17\1\0"+
    "\1\17\1\0\1\17\2\0\5\17\37\0\1\355\23\0"+
    "\1\36\10\0\4\36\1\0\3\36\7\0\1\152\3\0"+
    "\1\356\5\36\1\0\1\36\1\0\1\36\2\0\5\36"+
    "\3\0\1\324\2\0\1\214\5\0\1\333\3\324\1\302"+
    "\3\324\1\215\12\0\6\324\1\0\1\324\1\0\1\324"+
    "\2\0\5\324\42\0\1\357\20\0\1\17\10\0\4\17"+
    "\1\0\3\17\13\0\3\17\1\360\2\17\1\0\1\17"+
    "\1\0\1\17\2\0\5\17\42\0\1\361\20\0\1\36"+
    "\10\0\4\36\1\0\3\36\7\0\1\152\3\0\3\36"+
    "\1\362\2\36\1\0\1\36\1\0\1\36\2\0\5\36"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\1\5\0\1\11\1\1\1\11"+
    "\7\1\1\11\4\1\1\11\10\1\6\11\10\1\1\11"+
    "\3\1\5\11\2\1\1\11\5\1\4\11\11\1\3\11"+
    "\6\1\1\11\3\1\1\11\1\1\1\11\1\0\3\1"+
    "\1\0\3\1\2\0\3\1\1\0\5\1\1\0\1\1"+
    "\2\0\1\11\1\0\3\1\1\11\1\1\2\0\11\1"+
    "\2\0\1\11\1\1\1\0\3\1\1\11\1\0\1\1"+
    "\1\0\5\1\1\0\11\1\1\0\1\1\1\0\3\1"+
    "\2\0\4\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\0\3\1\3\0\10\1\4\0\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\2\11\2\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ImpexTypes.COMMENT_BODY;
            } 
            // fall through
          case 58: break;
          case 2: 
            { return ImpexTypes.BEAN_SHELL_BODY;
            } 
            // fall through
          case 59: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 60: break;
          case 4: 
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            } 
            // fall through
          case 61: break;
          case 5: 
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            } 
            // fall through
          case 62: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 7: 
            { yybegin(COMMENT); return ImpexTypes.COMMENT_MARKER;
            } 
            // fall through
          case 64: break;
          case 8: 
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            } 
            // fall through
          case 65: break;
          case 9: 
            { return ImpexTypes.MACRO_VALUE;
            } 
            // fall through
          case 66: break;
          case 10: 
            { return ImpexTypes.ASSIGN_VALUE;
            } 
            // fall through
          case 67: break;
          case 11: 
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            } 
            // fall through
          case 68: break;
          case 12: 
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            } 
            // fall through
          case 69: break;
          case 13: 
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            } 
            // fall through
          case 70: break;
          case 14: 
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            } 
            // fall through
          case 71: break;
          case 15: 
            { return ImpexTypes.COMMA;
            } 
            // fall through
          case 72: break;
          case 16: 
            { return ImpexTypes.DIGIT;
            } 
            // fall through
          case 73: break;
          case 17: 
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            } 
            // fall through
          case 74: break;
          case 18: 
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            } 
            // fall through
          case 75: break;
          case 19: 
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            } 
            // fall through
          case 76: break;
          case 20: 
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            } 
            // fall through
          case 77: break;
          case 21: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            } 
            // fall through
          case 78: break;
          case 22: 
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            } 
            // fall through
          case 79: break;
          case 23: 
            { return ImpexTypes.DOT;
            } 
            // fall through
          case 80: break;
          case 24: 
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            } 
            // fall through
          case 81: break;
          case 25: 
            { return ImpexTypes.FIELD_VALUE;
            } 
            // fall through
          case 82: break;
          case 26: 
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            } 
            // fall through
          case 83: break;
          case 27: 
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            } 
            // fall through
          case 84: break;
          case 28: 
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            } 
            // fall through
          case 85: break;
          case 29: 
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            } 
            // fall through
          case 86: break;
          case 30: 
            { return ImpexTypes.ATTRIBUTE_NAME;
            } 
            // fall through
          case 87: break;
          case 31: 
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            } 
            // fall through
          case 88: break;
          case 32: 
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            } 
            // fall through
          case 89: break;
          case 33: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            } 
            // fall through
          case 90: break;
          case 34: 
            { return ImpexTypes.ATTRIBUTE_VALUE;
            } 
            // fall through
          case 91: break;
          case 35: 
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            } 
            // fall through
          case 92: break;
          case 36: 
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            } 
            // fall through
          case 93: break;
          case 37: 
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            } 
            // fall through
          case 94: break;
          case 38: 
            { return ImpexTypes.DOUBLE_STRING;
            } 
            // fall through
          case 95: break;
          case 39: 
            { return ImpexTypes.MACRO_USAGE;
            } 
            // fall through
          case 96: break;
          case 40: 
            { return ImpexTypes.SINGLE_STRING;
            } 
            // fall through
          case 97: break;
          case 41: 
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            } 
            // fall through
          case 98: break;
          case 42: 
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            } 
            // fall through
          case 99: break;
          case 43: 
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            } 
            // fall through
          case 100: break;
          case 44: 
            { return ImpexTypes.DOCUMENT_ID;
            } 
            // fall through
          case 101: break;
          case 45: 
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            } 
            // fall through
          case 102: break;
          case 46: 
            { yybegin(WAITING_MACRO_VALUE);
                                                                return ImpexTypes.MACRO_USAGE;
            } 
            // fall through
          case 103: break;
          case 47: 
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            } 
            // fall through
          case 104: break;
          case 48: 
            { return ImpexTypes.BOOLEAN;
            } 
            // fall through
          case 105: break;
          case 49: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            } 
            // fall through
          case 106: break;
          case 50: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            } 
            // fall through
          case 107: break;
          case 51: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            } 
            // fall through
          case 108: break;
          case 52: 
            { return ImpexTypes.HEADER_MODE_INSERT;
            } 
            // fall through
          case 109: break;
          case 53: 
            { return ImpexTypes.HEADER_MODE_REMOVE;
            } 
            // fall through
          case 110: break;
          case 54: 
            { return ImpexTypes.HEADER_MODE_UPDATE;
            } 
            // fall through
          case 111: break;
          case 55: 
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            } 
            // fall through
          case 112: break;
          case 56: 
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            } 
            // fall through
          case 113: break;
          case 57: 
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
