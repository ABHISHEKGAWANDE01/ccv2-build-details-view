/* The following code was generated by JFlex 1.4.3 on 31/08/14 18:54 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/08/14 18:54 from the specification file
 * <tt>/home/sasha/sources/idea/Hybris-Impex-Synax-Highlight/src/com/intellij/idea/plugin/hybris/impex/Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BEAN_SHELL = 16;
  public static final int HEADER_MODE = 8;
  public static final int ATTRIBUTE_VALUE = 24;
  public static final int HEADER_TYPE = 10;
  public static final int FIELD_VALUE = 14;
  public static final int WAITING_ATTRIBUTE_VALUE = 22;
  public static final int MODYFIERS_BLOCK = 18;
  public static final int MACRO_DECLARATION = 6;
  public static final int YYINITIAL = 0;
  public static final int ATTRIBUTE_NAME = 20;
  public static final int WAITING_FOR_FIELD_VALUE = 12;
  public static final int COMMENT = 2;
  public static final int WAITING_MACRO_VALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\1\1\0\1\3\1\2\16\11\4\0\1\47\1\0"+
    "\1\7\1\4\1\10\1\5\1\0\1\6\4\0\1\15\1\0\1\30"+
    "\1\0\12\27\1\0\1\14\1\50\1\16\1\55\2\0\1\42\2\11"+
    "\1\41\1\34\3\11\1\31\3\11\1\44\1\32\1\45\1\40\1\11"+
    "\1\35\1\33\1\36\1\37\1\46\4\11\1\12\1\0\1\13\1\0"+
    "\1\43\1\0\1\24\3\11\1\22\1\23\1\52\1\11\1\51\2\11"+
    "\1\25\1\11\1\53\1\54\2\11\1\20\1\26\1\17\1\21\5\11"+
    "\4\0\41\11\2\0\4\11\4\0\1\11\2\0\1\11\7\0\1\11"+
    "\4\0\1\11\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11"+
    "\16\0\5\11\7\0\1\11\1\0\1\11\21\0\165\11\1\0\2\11"+
    "\2\0\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0\24\11"+
    "\1\0\123\11\1\0\213\11\1\0\5\11\2\0\236\11\11\0\46\11"+
    "\2\0\1\11\7\0\47\11\7\0\1\11\1\0\55\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\11\10\0\33\11\5\0\3\11"+
    "\15\0\5\11\6\0\1\11\4\0\13\11\5\0\100\11\12\27\4\0"+
    "\146\11\1\0\11\11\1\0\12\11\1\0\6\11\12\27\3\11\2\0"+
    "\1\11\17\0\74\11\2\0\145\11\16\0\12\27\54\11\4\0\1\11"+
    "\5\0\56\11\22\0\34\11\104\0\1\11\1\0\13\11\67\0\33\11"+
    "\1\0\144\11\2\0\12\27\1\0\7\11\1\0\7\11\1\0\3\11"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11"+
    "\3\0\4\11\2\0\11\11\2\0\2\11\2\0\4\11\10\0\1\11"+
    "\4\0\2\11\1\0\5\11\2\0\12\27\4\11\7\0\1\11\5\0"+
    "\3\11\1\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\2\0\1\11\1\0\5\11\4\0"+
    "\2\11\2\0\3\11\3\0\1\11\7\0\4\11\1\0\1\11\7\0"+
    "\12\27\6\11\13\0\3\11\1\0\11\11\1\0\3\11\1\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\5\11\2\0\12\11\1\0\3\11"+
    "\1\0\3\11\2\0\1\11\17\0\4\11\2\0\12\27\1\0\1\11"+
    "\17\0\3\11\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\5\11\2\0\11\11\2\0\2\11\2\0\3\11"+
    "\10\0\2\11\4\0\2\11\1\0\5\11\2\0\12\27\1\0\1\11"+
    "\20\0\2\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11"+
    "\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0\14\11"+
    "\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\11\6\0\1\11"+
    "\16\0\12\27\11\0\1\11\7\0\3\11\1\0\10\11\1\0\3\11"+
    "\1\0\27\11\1\0\12\11\1\0\5\11\3\0\10\11\1\0\3\11"+
    "\1\0\4\11\7\0\2\11\1\0\2\11\6\0\4\11\2\0\12\27"+
    "\22\0\2\11\1\0\10\11\1\0\3\11\1\0\27\11\1\0\12\11"+
    "\1\0\5\11\2\0\11\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\7\0\1\11\1\0\4\11\2\0\12\27\1\0\2\11\17\0\2\11"+
    "\1\0\10\11\1\0\3\11\1\0\51\11\2\0\10\11\1\0\3\11"+
    "\1\0\5\11\10\0\1\11\10\0\4\11\2\0\12\27\12\0\6\11"+
    "\2\0\2\11\1\0\22\11\3\0\30\11\1\0\11\11\1\0\1\11"+
    "\2\0\7\11\3\0\1\11\4\0\6\11\1\0\1\11\1\0\10\11"+
    "\22\0\2\11\15\0\72\11\4\0\20\11\1\0\12\27\47\0\2\11"+
    "\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11"+
    "\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\0\15\11\1\0\3\11\2\0\5\11\1\0\1\11\1\0\6\11"+
    "\2\0\12\27\2\0\4\11\40\0\1\11\27\0\2\11\6\0\12\27"+
    "\13\0\1\11\1\0\1\11\1\0\1\11\4\0\12\11\1\0\44\11"+
    "\4\0\24\11\1\0\22\11\1\0\44\11\11\0\1\11\71\0\100\11"+
    "\12\27\6\0\100\11\12\27\4\11\2\0\46\11\1\0\1\11\5\0"+
    "\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11\2\0\7\11\1\0"+
    "\1\11\1\0\4\11\2\0\51\11\1\0\4\11\2\0\41\11\1\0"+
    "\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\17\11\1\0"+
    "\71\11\1\0\4\11\2\0\103\11\2\0\3\11\40\0\20\11\20\0"+
    "\125\11\14\0\u026c\11\2\0\21\11\1\0\32\11\5\0\113\11\3\0"+
    "\3\11\17\0\15\11\1\0\7\11\13\0\25\11\13\0\24\11\14\0"+
    "\15\11\1\0\3\11\1\0\2\11\14\0\124\11\3\0\1\11\3\0"+
    "\3\11\2\0\12\27\41\0\3\11\2\0\12\27\6\0\130\11\10\0"+
    "\53\11\5\0\106\11\12\0\35\11\3\0\14\11\4\0\14\11\12\0"+
    "\12\27\36\11\2\0\5\11\13\0\54\11\4\0\32\11\6\0\12\27"+
    "\46\0\34\11\4\0\77\11\1\0\35\11\2\0\1\11\12\27\6\0"+
    "\12\27\15\0\1\11\130\0\114\11\4\0\12\27\21\0\11\11\14\0"+
    "\60\11\12\27\72\11\14\0\70\11\10\0\12\27\3\0\3\11\12\27"+
    "\44\11\122\0\3\11\1\0\43\11\11\0\347\11\25\0\u011a\11\2\0"+
    "\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0"+
    "\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0"+
    "\15\11\5\0\3\11\1\0\7\11\16\0\5\11\32\0\5\11\20\0"+
    "\2\11\23\0\1\11\13\0\5\11\5\0\6\11\1\0\1\11\15\0"+
    "\1\11\20\0\15\11\3\0\33\11\25\0\15\11\4\0\1\11\3\0"+
    "\14\11\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0"+
    "\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0"+
    "\13\11\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11\u0a77\0"+
    "\57\11\1\0\57\11\1\0\205\11\6\0\11\11\14\0\46\11\1\0"+
    "\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0\30\11\11\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\40\11\57\0\1\11\u01d5\0"+
    "\3\11\31\0\17\11\1\0\5\11\2\0\5\11\4\0\126\11\2\0"+
    "\2\11\2\0\3\11\1\0\132\11\1\0\4\11\5\0\51\11\3\0"+
    "\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11\112\0\u51cd\11\63\0"+
    "\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11\12\27\2\11\24\0"+
    "\60\11\4\0\12\11\1\0\31\11\7\0\123\11\45\0\11\11\2\0"+
    "\147\11\2\0\4\11\1\0\4\11\14\0\13\11\115\0\60\11\20\0"+
    "\1\11\7\0\64\11\14\0\105\11\13\0\12\27\6\0\30\11\3\0"+
    "\1\11\4\0\12\27\44\11\2\0\44\11\14\0\35\11\3\0\101\11"+
    "\16\0\1\11\12\27\46\0\67\11\11\0\16\11\2\0\12\27\6\0"+
    "\27\11\3\0\2\11\4\0\103\11\30\0\3\11\2\0\20\11\2\0"+
    "\5\11\12\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0"+
    "\7\11\221\0\53\11\1\0\2\11\2\0\12\27\6\0\u2ba4\11\14\0"+
    "\27\11\4\0\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0"+
    "\5\11\5\0\14\11\1\0\15\11\1\0\5\11\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0"+
    "\66\11\50\0\15\11\3\0\20\11\20\0\7\11\14\0\2\11\30\0"+
    "\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\11\4\0"+
    "\1\11\13\0\12\27\7\0\32\11\4\0\1\11\1\0\32\11\13\0"+
    "\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0"+
    "\2\11\3\0\2\11\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\12\0\1\3\2\4\1\5\1\6"+
    "\2\7\1\10\3\7\1\1\1\5\1\2\1\5\1\2"+
    "\1\11\1\12\1\13\1\14\1\5\2\14\1\15\2\14"+
    "\1\16\1\14\3\3\1\17\1\20\1\21\2\3\3\22"+
    "\1\23\1\24\1\25\1\26\3\7\2\0\1\27\4\14"+
    "\1\0\1\30\1\0\1\31\1\0\1\32\1\0\1\33"+
    "\1\0\1\34\1\0\2\22\3\7\1\27\1\35\3\14"+
    "\1\31\1\0\1\33\1\0\1\36\2\22\3\7\1\35"+
    "\1\37\1\14\1\36\1\40\3\7\1\14\1\41\1\42"+
    "\1\43\1\14\1\7\1\14\1\7\1\44\4\7\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u0256\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u0256\0\u04da\0\u0256"+
    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u0256\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0256\0\u0256\0\u0730"+
    "\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0256\0\u0256\0\u030e"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0678\0\u0a10\0\u0a3e\0\u0a6c\0\u06d4\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u075e\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc"+
    "\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0256"+
    "\0\u0d4c\0\u0256\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0592\0\u0eea\0\u0f18\0\u078c\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u033c\0\u033c\0\u102c\0\u105a\0\u1088"+
    "\0\u10b6\0\u0508\0\u10e4\0\u1112\0\u1140\0\u116e\0\u033c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\3\16\1\23\1\24"+
    "\2\16\1\25\2\16\11\24\1\16\1\26\3\24\1\27"+
    "\1\24\1\30\7\24\1\21\1\16\4\24\1\16\1\31"+
    "\1\17\1\20\1\32\43\31\1\32\6\31\1\33\1\17"+
    "\1\20\1\34\3\33\1\35\37\33\1\34\6\33\1\16"+
    "\1\17\1\20\1\21\12\16\1\36\30\16\1\21\7\16"+
    "\1\17\1\20\1\21\4\16\2\37\5\16\11\37\1\16"+
    "\16\37\1\21\1\16\4\37\2\16\1\17\1\20\1\21"+
    "\6\16\2\40\33\16\1\21\6\16\1\41\1\17\1\20"+
    "\1\42\3\41\1\43\2\44\2\41\1\25\1\45\1\41"+
    "\1\46\3\44\1\47\3\44\1\50\1\41\16\44\1\21"+
    "\1\51\4\44\2\41\1\17\1\20\1\42\10\41\1\25"+
    "\1\45\31\41\1\21\6\41\1\16\1\17\1\20\1\21"+
    "\3\16\1\52\37\16\1\21\7\16\1\17\1\20\1\21"+
    "\2\16\1\53\1\54\2\55\1\16\1\56\3\16\11\55"+
    "\1\16\16\55\1\21\1\16\4\55\2\16\1\17\1\20"+
    "\1\21\12\16\1\57\30\16\1\21\7\16\1\17\1\20"+
    "\1\21\2\16\1\60\1\61\2\62\5\16\1\63\3\62"+
    "\1\64\3\62\1\65\1\16\16\62\1\21\1\16\4\62"+
    "\2\16\1\17\1\20\1\21\7\16\1\40\1\16\1\66"+
    "\31\16\1\21\6\16\57\0\1\17\57\0\1\21\43\0"+
    "\1\21\13\0\1\67\60\0\2\70\5\0\11\70\1\0"+
    "\16\70\2\0\4\70\11\0\2\24\5\0\11\24\1\0"+
    "\16\24\2\0\4\24\11\0\2\24\5\0\11\24\1\0"+
    "\1\24\1\71\14\24\2\0\4\24\11\0\2\24\5\0"+
    "\11\24\1\0\3\24\1\72\12\24\2\0\4\24\11\0"+
    "\2\24\5\0\11\24\1\0\7\24\1\73\6\24\2\0"+
    "\4\24\1\0\1\31\2\0\54\31\2\0\1\32\43\31"+
    "\1\32\6\31\1\33\2\0\4\33\1\35\47\33\2\0"+
    "\1\34\3\33\1\35\37\33\1\34\6\33\1\35\2\74"+
    "\53\35\10\0\2\37\5\0\11\37\1\0\16\37\2\0"+
    "\4\37\1\0\1\41\2\0\11\41\2\0\31\41\1\0"+
    "\7\41\2\0\1\42\10\41\2\0\31\41\1\21\6\41"+
    "\1\43\2\75\4\43\1\76\4\43\2\75\31\43\1\75"+
    "\6\43\1\41\2\0\5\41\2\44\2\41\2\0\1\41"+
    "\11\44\1\77\16\44\1\0\1\41\4\44\2\41\2\0"+
    "\5\41\2\44\2\41\2\0\1\41\1\44\1\100\7\44"+
    "\1\77\16\44\1\0\1\41\4\44\2\41\2\0\5\41"+
    "\2\44\2\41\2\0\1\41\5\44\1\101\3\44\1\77"+
    "\16\44\1\0\1\41\4\44\2\41\2\0\5\41\2\44"+
    "\2\41\2\0\1\41\10\44\1\50\1\77\16\44\1\0"+
    "\1\41\4\44\2\41\2\0\11\41\2\0\31\41\1\0"+
    "\1\41\1\102\4\41\7\103\1\104\46\103\1\105\2\0"+
    "\3\105\1\106\47\105\7\107\1\110\46\107\10\0\2\55"+
    "\5\0\11\55\1\0\16\55\2\0\4\55\1\0\1\111"+
    "\2\0\3\111\1\112\47\111\7\113\1\114\46\113\10\0"+
    "\2\62\5\0\11\62\1\115\16\62\2\0\4\62\11\0"+
    "\2\62\5\0\1\62\1\116\7\62\1\115\16\62\2\0"+
    "\4\62\11\0\2\62\5\0\5\62\1\117\3\62\1\115"+
    "\16\62\2\0\4\62\11\0\2\62\5\0\10\62\1\65"+
    "\1\115\16\62\2\0\4\62\11\0\2\24\5\0\11\24"+
    "\1\0\2\24\1\120\13\24\2\0\4\24\11\0\2\24"+
    "\5\0\11\24\1\0\13\24\1\121\2\24\2\0\4\24"+
    "\11\0\2\24\5\0\11\24\1\0\10\24\1\122\5\24"+
    "\2\0\4\24\1\0\7\74\1\33\46\74\7\75\1\123"+
    "\46\75\1\41\2\0\4\41\1\43\4\41\2\0\31\41"+
    "\1\0\7\41\2\0\5\41\2\124\2\41\2\0\1\41"+
    "\11\124\1\41\16\124\1\0\1\41\4\124\2\41\2\0"+
    "\5\41\2\44\2\41\2\0\1\41\2\44\1\125\6\44"+
    "\1\77\16\44\1\0\1\41\4\44\2\41\2\0\5\41"+
    "\2\44\2\41\2\0\1\41\6\44\1\126\2\44\1\77"+
    "\16\44\1\0\1\41\4\44\2\41\2\0\11\41\2\0"+
    "\31\41\1\0\2\41\1\127\3\41\7\0\1\103\46\0"+
    "\1\105\2\0\3\105\1\130\47\105\6\0\1\131\56\0"+
    "\1\107\46\0\1\111\2\0\3\111\1\132\47\111\6\0"+
    "\1\133\56\0\1\113\56\0\2\134\5\0\11\134\1\0"+
    "\16\134\2\0\4\134\11\0\2\62\5\0\2\62\1\135"+
    "\6\62\1\115\16\62\2\0\4\62\11\0\2\62\5\0"+
    "\6\62\1\136\2\62\1\115\16\62\2\0\4\62\11\0"+
    "\2\24\5\0\11\24\1\0\3\24\1\137\12\24\2\0"+
    "\4\24\11\0\2\24\5\0\11\24\1\0\14\24\1\140"+
    "\1\24\2\0\4\24\11\0\2\24\5\0\11\24\1\0"+
    "\11\24\1\141\4\24\2\0\4\24\10\0\1\75\46\0"+
    "\1\41\2\0\5\41\2\142\2\41\2\0\1\41\11\142"+
    "\1\41\16\142\1\0\1\41\4\142\2\41\2\0\5\41"+
    "\2\44\2\41\2\0\1\41\3\44\1\143\5\44\1\77"+
    "\16\44\1\0\1\41\4\44\2\41\2\0\5\41\2\44"+
    "\2\41\2\0\1\41\7\44\1\125\1\44\1\77\16\44"+
    "\1\0\1\41\4\44\2\41\2\0\11\41\2\0\31\41"+
    "\1\0\3\41\1\144\2\41\6\0\1\130\55\0\1\132"+
    "\57\0\2\145\5\0\11\145\1\0\16\145\2\0\4\145"+
    "\11\0\2\62\5\0\3\62\1\146\5\62\1\115\16\62"+
    "\2\0\4\62\11\0\2\62\5\0\7\62\1\135\1\62"+
    "\1\115\16\62\2\0\4\62\11\0\2\24\5\0\11\24"+
    "\1\0\4\24\1\147\11\24\2\0\4\24\11\0\2\24"+
    "\5\0\11\24\1\0\15\24\1\150\2\0\4\24\11\0"+
    "\2\24\5\0\11\24\1\0\5\24\1\151\10\24\2\0"+
    "\4\24\1\0\1\41\2\0\5\41\2\142\2\41\2\0"+
    "\1\41\11\142\1\77\16\142\1\0\1\41\4\142\2\41"+
    "\2\0\11\41\2\0\31\41\1\0\4\41\1\152\1\41"+
    "\10\0\2\145\5\0\11\145\1\115\16\145\2\0\4\145"+
    "\11\0\2\24\5\0\11\24\1\0\5\24\1\153\10\24"+
    "\2\0\4\24\11\0\2\24\5\0\11\24\1\0\3\24"+
    "\1\154\12\24\2\0\4\24\11\0\2\24\5\0\11\24"+
    "\1\0\3\24\1\155\12\24\2\0\4\24\1\0\1\41"+
    "\2\0\11\41\2\0\2\41\1\156\26\41\1\0\6\41"+
    "\10\0\2\24\5\0\11\24\1\0\12\24\1\157\3\24"+
    "\2\0\4\24\1\0\1\41\2\0\11\41\2\0\4\41"+
    "\1\160\24\41\1\0\6\41\10\0\2\24\5\0\11\24"+
    "\1\0\6\24\1\161\7\24\2\0\4\24\1\0\1\41"+
    "\2\0\11\41\2\0\31\41\1\0\5\41\1\162\10\0"+
    "\2\24\5\0\11\24\1\0\7\24\1\163\6\24\2\0"+
    "\4\24\11\0\2\24\5\0\11\24\1\0\10\24\1\164"+
    "\5\24\2\0\4\24\11\0\2\24\5\0\11\24\1\0"+
    "\11\24\1\165\4\24\2\0\4\24\11\0\2\24\5\0"+
    "\11\24\1\0\5\24\1\166\10\24\2\0\4\24\11\0"+
    "\2\24\5\0\11\24\1\0\3\24\1\167\12\24\2\0"+
    "\4\24\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\12\0\2\11\5\1\1\11\10\1\1\11"+
    "\1\1\1\11\4\1\1\11\10\1\2\11\6\1\2\11"+
    "\4\1\2\0\5\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\12\1\1\11"+
    "\1\0\1\11\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ImpexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1972) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { yybegin(ATTRIBUTE_VALUE); return ImpexTypes.DOUBLE_STRING;
          }
        case 38: break;
        case 23: 
          { yybegin(FIELD_VALUE); return ImpexTypes.DOUBLE_STRING;
          }
        case 39: break;
        case 21: 
          { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
          }
        case 40: break;
        case 17: 
          { yybegin(WAITING_ATTRIBUTE_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 41: break;
        case 24: 
          { return ImpexTypes.BEAN_SHELL_BODY;
          }
        case 42: break;
        case 20: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
          }
        case 43: break;
        case 11: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.SQUARE_BRACKETS;
          }
        case 44: break;
        case 16: 
          { return ImpexTypes.SQUARE_BRACKETS;
          }
        case 45: break;
        case 9: 
          { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 46: break;
        case 8: 
          { yybegin(WAITING_FOR_FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 47: break;
        case 27: 
          { yybegin(ATTRIBUTE_VALUE); return ImpexTypes.SINGLE_STRING;
          }
        case 48: break;
        case 2: 
          { return ImpexTypes.MACRO_VALUE;
          }
        case 49: break;
        case 5: 
          { return TokenType.WHITE_SPACE;
          }
        case 50: break;
        case 26: 
          { yybegin(ATTRIBUTE_NAME); return ImpexTypes.DOUBLE_STRING;
          }
        case 51: break;
        case 36: 
          { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_IGNORE;
          }
        case 52: break;
        case 33: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_INSERT;
          }
        case 53: break;
        case 31: 
          { yybegin(FIELD_VALUE); return ImpexTypes.BOOLEAN;
          }
        case 54: break;
        case 32: 
          { yybegin(ATTRIBUTE_VALUE); return ImpexTypes.BOOLEAN;
          }
        case 55: break;
        case 25: 
          { yybegin(ATTRIBUTE_NAME); return ImpexTypes.SINGLE_STRING;
          }
        case 56: break;
        case 15: 
          { yybegin(ATTRIBUTE_NAME); return ImpexTypes.ATTRIBUTE_NAME;
          }
        case 57: break;
        case 35: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_UPDATE;
          }
        case 58: break;
        case 37: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
          }
        case 59: break;
        case 29: 
          { yybegin(FIELD_VALUE); return ImpexTypes.CLASS_WITH_PACKAGE;
          }
        case 60: break;
        case 22: 
          { yybegin(MACRO_DECLARATION); return ImpexTypes.MACRO_DECLARATION;
          }
        case 61: break;
        case 6: 
          { yybegin(COMMENT); return ImpexTypes.COMMENT_MARKER;
          }
        case 62: break;
        case 1: 
          { return ImpexTypes.COMMENT_BODY;
          }
        case 63: break;
        case 7: 
          { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
          }
        case 64: break;
        case 3: 
          { return TokenType.BAD_CHARACTER;
          }
        case 65: break;
        case 12: 
          { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE;
          }
        case 66: break;
        case 10: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_TYPE;
          }
        case 67: break;
        case 18: 
          { yybegin(ATTRIBUTE_VALUE); return ImpexTypes.ATTRIBUTE_VALUE;
          }
        case 68: break;
        case 30: 
          { yybegin(ATTRIBUTE_VALUE); return ImpexTypes.CLASS_WITH_PACKAGE;
          }
        case 69: break;
        case 4: 
          { yybegin(YYINITIAL); return ImpexTypes.CRLF;
          }
        case 70: break;
        case 19: 
          { yybegin(ATTRIBUTE_VALUE); return ImpexTypes.DIGIT;
          }
        case 71: break;
        case 34: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_REMOVE;
          }
        case 72: break;
        case 14: 
          { yybegin(FIELD_VALUE); return ImpexTypes.DIGIT;
          }
        case 73: break;
        case 13: 
          { yybegin(WAITING_FOR_FIELD_VALUE); return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
          }
        case 74: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
