/* The following code was generated by JFlex 1.4.3 on 7/10/16 7:47 PM */

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/10/16 7:47 PM from the specification file
 * <tt>/Users/alexander/sources/hybris-integration-intellij-idea-plugin/src/Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BEAN_SHELL = 14;
  public static final int MACRO_USAGE = 22;
  public static final int HEADER_PARAMETERS = 20;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 18;
  public static final int HEADER_TYPE = 8;
  public static final int FIELD_VALUE = 12;
  public static final int MODYFIERS_BLOCK = 16;
  public static final int MACRO_DECLARATION = 6;
  public static final int HEADER_LINE = 10;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int WAITING_MACRO_VALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\4\1\3\22\0\1\4\1\0\1\10"+
    "\1\5\1\11\1\6\1\41\1\7\1\15\1\16\1\0\1\35\1\20"+
    "\1\22\1\37\1\0\12\36\1\21\1\17\1\52\1\12\1\23\1\0"+
    "\1\40\1\32\2\1\1\45\1\30\1\31\1\53\1\1\1\42\2\1"+
    "\1\33\1\47\1\43\1\50\1\44\1\1\1\26\1\34\1\25\1\27"+
    "\1\51\4\1\1\13\1\0\1\14\1\0\1\46\1\0\1\32\2\1"+
    "\1\45\1\30\1\31\1\53\1\1\1\42\2\1\1\33\1\47\1\43"+
    "\1\50\1\44\1\1\1\26\1\34\1\25\1\27\1\51\4\1\1\0"+
    "\1\24\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\3\0\1\3\1\4\2\5"+
    "\1\6\1\7\2\3\1\10\3\4\1\1\1\6\5\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\6\11\1\20"+
    "\3\11\1\21\1\22\1\23\1\3\1\24\1\25\1\26"+
    "\1\27\2\3\4\30\1\31\1\32\1\33\1\30\1\34"+
    "\3\30\1\20\1\30\1\2\1\6\1\2\1\35\1\3"+
    "\1\36\1\37\1\40\4\41\1\42\3\41\1\20\1\43"+
    "\1\0\1\44\1\45\3\4\1\0\1\46\1\45\4\11"+
    "\1\20\1\0\1\47\1\11\2\0\1\50\1\51\2\30"+
    "\1\0\1\2\1\41\1\46\1\44\1\45\3\41\1\0"+
    "\1\52\3\4\1\46\1\0\4\11\1\20\1\11\1\0"+
    "\2\30\1\2\1\46\3\41\1\20\3\4\1\53\3\11"+
    "\1\0\2\53\3\4\3\11\1\0\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\0\1\4\1\11\1\0\1\4"+
    "\1\11\1\62\1\4\1\11\1\4\1\11\1\4\1\11"+
    "\1\4\1\11\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u01e4\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u01e4\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u01e4\0\u03f4\0\u0420\0\u02c0\0\u044c\0\u01e4\0\u01e4"+
    "\0\u01e4\0\u01e4\0\u01e4\0\u01e4\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u01e4\0\u0630"+
    "\0\u065c\0\u044c\0\u01e4\0\u01e4\0\u01e4\0\u01e4\0\u05ac\0\u0688"+
    "\0\u01e4\0\u06b4\0\u02c0\0\u044c\0\u01e4\0\u01e4\0\u01e4\0\u06e0"+
    "\0\u01e4\0\u070c\0\u0738\0\u0554\0\u0764\0\u0604\0\u0790\0\u07bc"+
    "\0\u07e8\0\u0814\0\u0420\0\u01e4\0\u01e4\0\u01e4\0\u0840\0\u086c"+
    "\0\u0898\0\u08c4\0\u01e4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u01e4"+
    "\0\u02c0\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u044c\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u05ac"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\u0688\0\u01e4\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u08c4\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u01e4\0\u0e44\0\u0e70\0\u0e9c\0\u01e4\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0bb0\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u0840\0\u1080\0\u10ac\0\u10d8\0\u0dec\0\u1104\0\u1130"+
    "\0\u115c\0\u03f4\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u06b4\0\u0840"+
    "\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u0210"+
    "\0\u0210\0\u136c\0\u03f4\0\u03f4\0\u1398\0\u13c4\0\u13f0\0\u141c"+
    "\0\u1448\0\u1474\0\u14a0\0\u01e4\0\u14cc\0\u14f8\0\u1524\0\u1550"+
    "\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u0210\0\u03f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\14\1\22"+
    "\1\23\5\14\1\24\2\14\1\15\2\14\1\15\1\25"+
    "\1\26\5\15\1\14\1\15\3\14\1\27\7\15\1\14"+
    "\1\15\2\30\1\16\1\17\1\31\47\30\1\32\1\33"+
    "\1\16\1\17\1\20\2\32\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\32\1\44\1\32\1\45"+
    "\2\32\1\46\1\47\1\50\1\33\1\51\3\33\1\52"+
    "\1\53\1\32\1\54\1\32\1\55\7\33\1\56\1\33"+
    "\2\14\1\16\1\17\1\20\5\14\1\57\42\14\1\60"+
    "\1\16\1\17\1\20\15\14\1\60\2\14\10\60\1\14"+
    "\1\60\3\14\10\60\1\14\1\60\1\14\1\61\1\16"+
    "\1\17\1\20\4\14\1\62\1\63\1\64\1\41\1\42"+
    "\1\43\1\65\1\44\1\14\1\61\1\14\1\66\10\61"+
    "\1\14\1\61\1\14\1\67\1\70\10\61\1\14\1\61"+
    "\1\71\1\72\1\16\1\17\1\20\3\71\1\73\1\74"+
    "\5\71\1\75\1\76\1\77\1\100\1\71\1\101\1\102"+
    "\3\72\1\103\3\72\1\104\1\105\3\71\10\72\1\106"+
    "\1\72\2\107\1\16\1\17\1\110\3\107\1\111\43\107"+
    "\1\14\1\112\1\16\1\17\1\20\2\14\1\113\1\22"+
    "\1\62\1\63\1\14\1\114\3\14\1\115\1\14\1\112"+
    "\1\14\1\116\10\112\1\14\2\112\2\14\10\112\1\14"+
    "\1\112\2\117\1\16\1\17\1\20\2\117\1\120\1\121"+
    "\1\122\2\117\1\114\3\117\1\123\1\117\1\124\2\117"+
    "\1\125\3\117\1\126\3\117\1\124\1\127\15\117\2\14"+
    "\1\16\1\17\1\20\47\14\55\0\1\15\20\0\1\15"+
    "\2\0\10\15\1\0\1\15\3\0\10\15\1\0\1\15"+
    "\2\0\1\16\55\0\1\20\55\0\1\130\45\0\10\131"+
    "\1\132\43\131\1\0\1\133\20\0\1\133\2\0\10\133"+
    "\1\0\1\133\3\0\10\133\1\0\1\133\1\0\1\15"+
    "\20\0\1\15\2\0\3\15\1\134\4\15\1\0\1\15"+
    "\3\0\10\15\1\0\1\15\1\0\1\15\20\0\1\15"+
    "\2\0\10\15\1\0\1\15\3\0\2\15\1\135\5\15"+
    "\1\0\1\15\1\0\1\15\20\0\1\15\2\0\10\15"+
    "\1\0\1\15\3\0\1\15\1\136\6\15\1\0\1\15"+
    "\2\30\2\0\52\30\2\0\1\31\47\30\1\0\1\33"+
    "\20\0\1\33\2\0\10\33\1\0\1\33\3\0\10\33"+
    "\1\0\1\33\2\137\2\0\3\137\1\140\44\137\1\0"+
    "\1\141\20\0\1\141\2\0\10\141\1\0\1\141\3\0"+
    "\10\141\1\0\1\141\1\0\1\33\20\0\1\33\2\0"+
    "\10\33\1\0\1\53\3\0\10\33\1\0\1\33\1\0"+
    "\1\33\20\0\1\33\2\0\1\33\1\142\6\33\1\0"+
    "\1\33\3\0\10\33\1\0\1\33\1\0\1\33\20\0"+
    "\1\33\2\0\3\33\1\143\4\33\1\0\1\33\3\0"+
    "\10\33\1\0\1\33\1\0\1\33\20\0\1\33\2\0"+
    "\10\33\1\0\1\33\3\0\2\33\1\144\5\33\1\0"+
    "\1\33\1\0\1\33\20\0\1\33\2\0\5\33\1\145"+
    "\2\33\1\0\1\33\3\0\10\33\1\0\1\33\36\0"+
    "\1\146\16\0\1\33\20\0\1\33\2\0\10\33\1\0"+
    "\1\53\1\147\2\0\10\33\1\0\1\33\1\0\1\150"+
    "\20\0\1\150\2\0\10\150\1\0\1\150\3\0\10\150"+
    "\1\0\1\150\1\0\1\33\20\0\1\33\2\0\10\33"+
    "\1\0\1\33\3\0\1\33\1\151\6\33\1\0\1\33"+
    "\42\0\1\152\12\0\1\60\20\0\1\60\2\0\10\60"+
    "\1\0\1\60\3\0\10\60\1\0\1\60\1\0\1\61"+
    "\20\0\1\61\2\0\10\61\1\0\1\61\1\153\2\0"+
    "\10\61\1\0\1\61\1\0\1\154\20\0\1\154\2\0"+
    "\10\154\1\0\1\154\3\0\10\154\1\0\1\154\1\0"+
    "\1\72\20\0\1\72\2\0\10\72\1\0\1\72\3\0"+
    "\10\72\1\0\1\72\1\0\1\72\20\0\1\72\1\155"+
    "\1\0\10\72\1\0\1\105\3\0\10\72\1\0\1\72"+
    "\1\0\1\72\20\0\1\72\2\0\1\72\1\156\6\72"+
    "\1\0\1\72\3\0\10\72\1\0\1\72\1\0\1\72"+
    "\20\0\1\72\2\0\5\72\1\157\2\72\1\0\1\72"+
    "\3\0\10\72\1\0\1\72\1\0\1\72\20\0\1\72"+
    "\2\0\10\72\1\0\1\105\1\147\2\0\10\72\1\0"+
    "\1\72\2\107\2\0\52\107\2\0\1\110\47\107\2\111"+
    "\2\160\4\111\1\161\43\111\1\0\1\112\20\0\1\112"+
    "\2\0\10\112\1\0\2\112\2\0\10\112\1\0\1\112"+
    "\2\117\3\0\7\117\1\0\3\117\1\0\33\117\2\162"+
    "\2\0\1\137\2\162\1\163\4\162\1\137\3\162\1\137"+
    "\33\162\2\121\3\131\3\121\1\164\3\121\1\131\3\121"+
    "\1\131\33\121\1\117\1\165\3\0\7\117\1\0\3\117"+
    "\1\0\1\117\1\165\2\117\10\165\1\117\1\165\3\117"+
    "\10\165\1\117\1\165\2\117\3\0\7\117\1\0\3\117"+
    "\1\0\15\117\1\127\17\117\3\0\7\117\1\0\3\117"+
    "\1\0\5\117\1\166\27\117\3\0\7\117\1\0\3\117"+
    "\1\0\11\117\1\167\23\117\3\0\7\117\1\0\3\117"+
    "\1\0\15\117\1\127\1\170\14\117\10\0\1\131\44\0"+
    "\1\133\2\0\1\171\5\0\1\172\7\0\1\133\2\0"+
    "\10\133\1\0\1\133\3\0\10\133\1\0\1\133\1\0"+
    "\1\15\20\0\1\15\2\0\10\15\1\0\1\15\3\0"+
    "\5\15\1\173\2\15\1\0\1\15\1\0\1\15\20\0"+
    "\1\15\2\0\10\15\1\0\1\15\3\0\3\15\1\174"+
    "\4\15\1\0\1\15\1\0\1\15\20\0\1\15\2\0"+
    "\7\15\1\175\1\0\1\15\3\0\10\15\1\0\1\15"+
    "\2\137\2\0\3\137\1\176\44\137\7\0\1\177\45\0"+
    "\1\33\20\0\1\33\2\0\2\33\1\200\5\33\1\0"+
    "\1\33\3\0\10\33\1\0\1\33\1\0\1\33\20\0"+
    "\1\33\2\0\10\33\1\0\1\33\3\0\5\33\1\201"+
    "\2\33\1\0\1\33\1\0\1\33\20\0\1\33\2\0"+
    "\10\33\1\0\1\33\3\0\3\33\1\202\4\33\1\0"+
    "\1\33\1\0\1\33\20\0\1\33\2\0\6\33\1\203"+
    "\1\33\1\0\1\33\3\0\10\33\1\0\1\33\36\0"+
    "\1\146\1\147\52\0\1\204\16\0\1\33\20\0\1\33"+
    "\2\0\7\33\1\205\1\0\1\33\3\0\10\33\1\0"+
    "\1\33\53\0\1\206\1\0\1\61\20\0\1\61\2\0"+
    "\10\61\1\0\1\61\3\0\10\61\1\0\1\61\1\0"+
    "\1\72\20\0\1\72\2\0\2\72\1\207\5\72\1\0"+
    "\1\72\3\0\10\72\1\0\1\72\1\0\1\72\20\0"+
    "\1\72\2\0\6\72\1\210\1\72\1\0\1\72\3\0"+
    "\10\72\1\0\1\72\10\160\1\211\43\160\2\107\2\0"+
    "\4\107\1\111\43\107\2\162\2\0\1\137\2\162\1\212"+
    "\4\162\1\137\3\162\1\137\33\162\2\117\3\0\2\117"+
    "\1\213\4\117\1\0\3\117\1\0\35\117\3\0\3\117"+
    "\1\121\3\117\1\0\3\117\1\0\35\117\3\0\7\117"+
    "\1\0\3\117\1\0\6\117\1\214\26\117\3\0\7\117"+
    "\1\0\3\117\1\0\12\117\1\215\22\117\3\0\7\117"+
    "\1\0\3\117\1\0\15\117\1\216\15\117\4\0\1\171"+
    "\5\0\1\172\42\0\1\15\20\0\1\15\2\0\10\15"+
    "\1\0\1\15\3\0\6\15\1\217\1\15\1\0\1\15"+
    "\1\0\1\15\20\0\1\15\2\0\5\15\1\220\2\15"+
    "\1\0\1\15\3\0\10\15\1\0\1\15\1\0\1\15"+
    "\20\0\1\15\2\0\3\15\1\221\4\15\1\0\1\15"+
    "\3\0\10\15\1\0\1\15\7\0\1\176\45\0\1\33"+
    "\20\0\1\33\2\0\3\33\1\222\4\33\1\0\1\33"+
    "\3\0\10\33\1\0\1\33\1\0\1\33\20\0\1\33"+
    "\2\0\10\33\1\0\1\33\3\0\6\33\1\223\1\33"+
    "\1\0\1\33\1\0\1\33\20\0\1\33\2\0\5\33"+
    "\1\224\2\33\1\0\1\33\3\0\10\33\1\0\1\33"+
    "\1\0\1\33\20\0\1\33\2\0\7\33\1\200\1\0"+
    "\1\33\3\0\10\33\1\0\1\33\1\0\1\33\20\0"+
    "\1\33\2\0\3\33\1\225\4\33\1\0\1\33\3\0"+
    "\10\33\1\0\1\33\43\0\1\226\11\0\1\72\20\0"+
    "\1\72\2\0\3\72\1\227\4\72\1\0\1\72\3\0"+
    "\10\72\1\0\1\72\1\0\1\72\20\0\1\72\2\0"+
    "\7\72\1\207\1\0\1\72\3\0\10\72\1\0\1\72"+
    "\10\0\1\160\43\0\2\117\3\0\2\117\1\212\4\117"+
    "\1\0\3\117\1\0\35\117\3\0\7\117\1\0\3\117"+
    "\1\0\7\117\1\230\25\117\3\0\7\117\1\0\3\117"+
    "\1\0\13\117\1\214\17\117\1\0\1\15\20\0\1\15"+
    "\2\0\10\15\1\0\1\15\3\0\7\15\1\231\1\0"+
    "\1\15\1\0\1\15\20\0\1\15\2\0\1\232\7\15"+
    "\1\0\1\15\3\0\10\15\1\0\1\15\1\0\1\15"+
    "\20\0\1\15\2\0\1\15\1\233\6\15\1\0\1\15"+
    "\3\0\10\15\1\0\1\15\1\0\1\33\20\0\1\33"+
    "\2\0\10\33\1\0\1\33\3\0\7\33\1\234\1\0"+
    "\1\33\1\0\1\33\20\0\1\33\2\0\1\235\7\33"+
    "\1\0\1\33\3\0\10\33\1\0\1\33\1\0\1\33"+
    "\20\0\1\33\2\0\1\33\1\236\6\33\1\0\1\33"+
    "\3\0\10\33\1\0\1\33\50\0\1\237\4\0\1\15"+
    "\20\0\1\15\2\0\3\15\1\240\4\15\1\0\1\15"+
    "\3\0\10\15\1\0\1\15\1\0\1\15\20\0\1\15"+
    "\2\0\3\15\1\241\4\15\1\0\1\15\3\0\10\15"+
    "\1\0\1\15\1\0\1\15\20\0\1\15\2\0\1\242"+
    "\7\15\1\0\1\15\3\0\10\15\1\0\1\15\1\0"+
    "\1\33\20\0\1\33\2\0\3\33\1\243\4\33\1\0"+
    "\1\33\3\0\10\33\1\0\1\33\1\0\1\33\20\0"+
    "\1\33\2\0\3\33\1\244\4\33\1\0\1\33\3\0"+
    "\10\33\1\0\1\33\1\0\1\33\20\0\1\33\2\0"+
    "\1\245\7\33\1\0\1\33\3\0\10\33\1\0\1\33"+
    "\26\0\1\246\26\0\1\15\20\0\1\15\2\0\10\15"+
    "\1\0\1\15\3\0\4\15\1\247\3\15\1\0\1\15"+
    "\1\0\1\33\20\0\1\33\2\0\10\33\1\0\1\33"+
    "\3\0\4\33\1\250\3\33\1\0\1\33\30\0\1\251"+
    "\24\0\1\15\20\0\1\15\2\0\2\15\1\252\5\15"+
    "\1\0\1\15\3\0\10\15\1\0\1\15\1\0\1\33"+
    "\20\0\1\33\2\0\2\33\1\253\5\33\1\0\1\33"+
    "\3\0\10\33\1\0\1\33\23\0\1\254\31\0\1\15"+
    "\20\0\1\15\2\0\10\15\1\0\1\15\3\0\2\15"+
    "\1\255\5\15\1\0\1\15\1\0\1\33\20\0\1\33"+
    "\2\0\10\33\1\0\1\33\3\0\2\33\1\256\5\33"+
    "\1\0\1\33\1\0\1\15\20\0\1\15\2\0\10\15"+
    "\1\0\1\15\3\0\3\15\1\257\4\15\1\0\1\15"+
    "\1\0\1\33\20\0\1\33\2\0\10\33\1\0\1\33"+
    "\3\0\3\33\1\260\4\33\1\0\1\33\1\0\1\15"+
    "\20\0\1\15\2\0\5\15\1\261\2\15\1\0\1\15"+
    "\3\0\10\15\1\0\1\15\1\0\1\33\20\0\1\33"+
    "\2\0\5\33\1\262\2\33\1\0\1\33\3\0\10\33"+
    "\1\0\1\33\1\0\1\15\20\0\1\15\2\0\1\263"+
    "\7\15\1\0\1\15\3\0\10\15\1\0\1\15\1\0"+
    "\1\33\20\0\1\33\2\0\1\264\7\33\1\0\1\33"+
    "\3\0\10\33\1\0\1\33\1\0\1\15\20\0\1\15"+
    "\2\0\3\15\1\265\4\15\1\0\1\15\3\0\10\15"+
    "\1\0\1\15\1\0\1\33\20\0\1\33\2\0\3\33"+
    "\1\266\4\33\1\0\1\33\3\0\10\33\1\0\1\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5676];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\1\3\0\1\11\1\1\1\11"+
    "\5\1\1\11\5\1\1\11\4\1\6\11\12\1\1\11"+
    "\3\1\4\11\2\1\1\11\3\1\3\11\1\1\1\11"+
    "\12\1\3\11\4\1\1\11\4\1\1\11\1\0\5\1"+
    "\1\0\7\1\1\0\2\1\2\0\1\1\1\11\2\1"+
    "\1\0\10\1\1\0\1\11\3\1\1\11\1\0\6\1"+
    "\1\0\17\1\1\0\10\1\1\0\6\1\1\0\2\1"+
    "\1\0\2\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
          }
        case 53: break;
        case 35: 
          { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
          }
        case 54: break;
        case 2: 
          { return ImpexTypes.BEAN_SHELL_BODY;
          }
        case 55: break;
        case 22: 
          { return ImpexTypes.PARAMETERS_SEPARATOR;
          }
        case 56: break;
        case 34: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
          }
        case 57: break;
        case 27: 
          { return ImpexTypes.DEFAULT_PATH_DELIMITER;
          }
        case 58: break;
        case 19: 
          { return ImpexTypes.HEADER_PARAMETER_NAME;
          }
        case 59: break;
        case 49: 
          { return ImpexTypes.HEADER_MODE_INSERT;
          }
        case 60: break;
        case 17: 
          { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 61: break;
        case 9: 
          { return ImpexTypes.MACRO_VALUE;
          }
        case 62: break;
        case 33: 
          { return ImpexTypes.ATTRIBUTE_VALUE;
          }
        case 63: break;
        case 6: 
          { return TokenType.WHITE_SPACE;
          }
        case 64: break;
        case 32: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
          }
        case 65: break;
        case 31: 
          { return ImpexTypes.ATTRIBUTE_SEPARATOR;
          }
        case 66: break;
        case 48: 
          { return ImpexTypes.HEADER_MODE_UPDATE;
          }
        case 67: break;
        case 28: 
          { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
          }
        case 68: break;
        case 44: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
          }
        case 69: break;
        case 26: 
          { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
          }
        case 70: break;
        case 42: 
          { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
          }
        case 71: break;
        case 43: 
          { return ImpexTypes.BOOLEAN;
          }
        case 72: break;
        case 36: 
          { return ImpexTypes.DOUBLE_STRING;
          }
        case 73: break;
        case 51: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
          }
        case 74: break;
        case 30: 
          { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
          }
        case 75: break;
        case 7: 
          { yybegin(COMMENT); return ImpexTypes.COMMENT_MARKER;
          }
        case 76: break;
        case 1: 
          { return ImpexTypes.COMMENT_BODY;
          }
        case 77: break;
        case 50: 
          { return ImpexTypes.FIELD_VALUE_IGNORE;
          }
        case 78: break;
        case 4: 
          { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
          }
        case 79: break;
        case 3: 
          { return TokenType.BAD_CHARACTER;
          }
        case 80: break;
        case 14: 
          { return ImpexTypes.RIGHT_ROUND_BRACKET;
          }
        case 81: break;
        case 47: 
          { return ImpexTypes.HEADER_MODE_REMOVE;
          }
        case 82: break;
        case 40: 
          { return ImpexTypes.DOCUMENT_ID;
          }
        case 83: break;
        case 38: 
          { return ImpexTypes.SINGLE_STRING;
          }
        case 84: break;
        case 8: 
          { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 85: break;
        case 52: 
          { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
          }
        case 86: break;
        case 21: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
          }
        case 87: break;
        case 20: 
          { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 88: break;
        case 13: 
          { return ImpexTypes.LEFT_ROUND_BRACKET;
          }
        case 89: break;
        case 29: 
          { return ImpexTypes.ATTRIBUTE_NAME;
          }
        case 90: break;
        case 5: 
          { yybegin(YYINITIAL); return ImpexTypes.CRLF;
          }
        case 91: break;
        case 46: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
          }
        case 92: break;
        case 23: 
          { return ImpexTypes.ALTERNATIVE_PATTERN;
          }
        case 93: break;
        case 16: 
          { return ImpexTypes.DIGIT;
          }
        case 94: break;
        case 37: 
          { return ImpexTypes.MACRO_USAGE;
          }
        case 95: break;
        case 39: 
          { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
          }
        case 96: break;
        case 15: 
          { return ImpexTypes.COMMA;
          }
        case 97: break;
        case 24: 
          { return ImpexTypes.FIELD_VALUE;
          }
        case 98: break;
        case 18: 
          { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
          }
        case 99: break;
        case 12: 
          { return ImpexTypes.RIGHT_SQUARE_BRACKET;
          }
        case 100: break;
        case 11: 
          { return ImpexTypes.LEFT_SQUARE_BRACKET;
          }
        case 101: break;
        case 25: 
          { return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 102: break;
        case 41: 
          { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
          }
        case 103: break;
        case 10: 
          { return ImpexTypes.ASSIGN_VALUE;
          }
        case 104: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
