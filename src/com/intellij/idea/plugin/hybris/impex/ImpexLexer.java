/* The following code was generated by JFlex 1.4.3 on 02/09/14 23:25 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02/09/14 23:25 from the specification file
 * <tt>/home/sasha/sources/idea/Hybris-Impex-Synax-Highlight/src/com/intellij/idea/plugin/hybris/impex/Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BEAN_SHELL = 14;
  public static final int HEADER_PARAMETERS = 20;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 18;
  public static final int HEADER_TYPE = 8;
  public static final int FIELD_VALUE = 12;
  public static final int MODYFIERS_BLOCK = 16;
  public static final int MACRO_DECLARATION = 6;
  public static final int HEADER_LINE = 10;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int WAITING_MACRO_VALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\1\1\0\1\3\1\2\16\11\4\0\1\3\1\0"+
    "\1\7\1\4\1\10\1\5\1\36\1\6\1\15\1\15\2\0\1\17"+
    "\1\12\1\34\1\0\12\33\1\21\1\16\1\47\1\20\1\51\1\0"+
    "\1\35\1\30\2\11\1\42\1\26\1\27\1\50\1\11\1\37\2\11"+
    "\1\31\1\44\1\40\1\45\1\41\1\11\1\24\1\32\1\23\1\25"+
    "\1\46\4\11\1\13\1\0\1\14\1\0\1\43\1\0\1\30\2\11"+
    "\1\42\1\26\1\27\1\50\1\11\1\37\2\11\1\31\1\44\1\40"+
    "\1\45\1\41\1\11\1\24\1\32\1\23\1\25\1\46\4\11\1\0"+
    "\1\22\2\0\41\11\2\0\4\11\4\0\1\11\2\0\1\11\7\0"+
    "\1\11\4\0\1\11\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0"+
    "\14\11\16\0\5\11\7\0\1\11\1\0\1\11\21\0\165\11\1\0"+
    "\2\11\2\0\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0"+
    "\24\11\1\0\123\11\1\0\213\11\1\0\5\11\2\0\236\11\11\0"+
    "\46\11\2\0\1\11\7\0\47\11\7\0\1\11\1\0\55\11\1\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\1\11\10\0\33\11\5\0"+
    "\3\11\15\0\5\11\6\0\1\11\4\0\13\11\5\0\100\11\12\33"+
    "\4\0\146\11\1\0\11\11\1\0\12\11\1\0\6\11\12\33\3\11"+
    "\2\0\1\11\17\0\74\11\2\0\145\11\16\0\12\33\54\11\4\0"+
    "\1\11\5\0\56\11\22\0\34\11\104\0\1\11\1\0\13\11\67\0"+
    "\33\11\1\0\144\11\2\0\12\33\1\0\7\11\1\0\7\11\1\0"+
    "\3\11\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\1\11\3\0\4\11\2\0\11\11\2\0\2\11\2\0\4\11\10\0"+
    "\1\11\4\0\2\11\1\0\5\11\2\0\12\33\4\11\7\0\1\11"+
    "\5\0\3\11\1\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\11\1\0\5\11"+
    "\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\11\1\0\1\11"+
    "\7\0\12\33\6\11\13\0\3\11\1\0\11\11\1\0\3\11\1\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0\12\11\1\0"+
    "\3\11\1\0\3\11\2\0\1\11\17\0\4\11\2\0\12\33\1\0"+
    "\1\11\17\0\3\11\1\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\2\0\11\11\2\0\2\11\2\0"+
    "\3\11\10\0\2\11\4\0\2\11\1\0\5\11\2\0\12\33\1\0"+
    "\1\11\20\0\2\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0"+
    "\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0"+
    "\14\11\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\11\6\0"+
    "\1\11\16\0\12\33\11\0\1\11\7\0\3\11\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\3\0\10\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\1\0\2\11\6\0\4\11\2\0"+
    "\12\33\22\0\2\11\1\0\10\11\1\0\3\11\1\0\27\11\1\0"+
    "\12\11\1\0\5\11\2\0\11\11\1\0\3\11\1\0\4\11\7\0"+
    "\2\11\7\0\1\11\1\0\4\11\2\0\12\33\1\0\2\11\17\0"+
    "\2\11\1\0\10\11\1\0\3\11\1\0\51\11\2\0\10\11\1\0"+
    "\3\11\1\0\5\11\10\0\1\11\10\0\4\11\2\0\12\33\12\0"+
    "\6\11\2\0\2\11\1\0\22\11\3\0\30\11\1\0\11\11\1\0"+
    "\1\11\2\0\7\11\3\0\1\11\4\0\6\11\1\0\1\11\1\0"+
    "\10\11\22\0\2\11\15\0\72\11\4\0\20\11\1\0\12\33\47\0"+
    "\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0"+
    "\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11\2\0"+
    "\2\11\1\0\15\11\1\0\3\11\2\0\5\11\1\0\1\11\1\0"+
    "\6\11\2\0\12\33\2\0\4\11\40\0\1\11\27\0\2\11\6\0"+
    "\12\33\13\0\1\11\1\0\1\11\1\0\1\11\4\0\12\11\1\0"+
    "\44\11\4\0\24\11\1\0\22\11\1\0\44\11\11\0\1\11\71\0"+
    "\100\11\12\33\6\0\100\11\12\33\4\11\2\0\46\11\1\0\1\11"+
    "\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11\2\0\7\11"+
    "\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11\2\0\41\11"+
    "\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\17\11"+
    "\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\11\40\0\20\11"+
    "\20\0\125\11\14\0\u026c\11\2\0\21\11\1\0\32\11\5\0\113\11"+
    "\3\0\3\11\17\0\15\11\1\0\7\11\13\0\25\11\13\0\24\11"+
    "\14\0\15\11\1\0\3\11\1\0\2\11\14\0\124\11\3\0\1\11"+
    "\3\0\3\11\2\0\12\33\41\0\3\11\2\0\12\33\6\0\130\11"+
    "\10\0\53\11\5\0\106\11\12\0\35\11\3\0\14\11\4\0\14\11"+
    "\12\0\12\33\36\11\2\0\5\11\13\0\54\11\4\0\32\11\6\0"+
    "\12\33\46\0\34\11\4\0\77\11\1\0\35\11\2\0\1\11\12\33"+
    "\6\0\12\33\15\0\1\11\130\0\114\11\4\0\12\33\21\0\11\11"+
    "\14\0\60\11\12\33\72\11\14\0\70\11\10\0\12\33\3\0\3\11"+
    "\12\33\44\11\122\0\3\11\1\0\43\11\11\0\347\11\25\0\u011a\11"+
    "\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11"+
    "\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11"+
    "\4\0\15\11\5\0\3\11\1\0\7\11\16\0\5\11\32\0\5\11"+
    "\20\0\2\11\23\0\1\11\13\0\5\11\5\0\6\11\1\0\1\11"+
    "\15\0\1\11\20\0\15\11\3\0\33\11\25\0\15\11\4\0\1\11"+
    "\3\0\14\11\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11"+
    "\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11"+
    "\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11"+
    "\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0\11\11\14\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0\30\11"+
    "\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\11\57\0\1\11"+
    "\u01d5\0\3\11\31\0\17\11\1\0\5\11\2\0\5\11\4\0\126\11"+
    "\2\0\2\11\2\0\3\11\1\0\132\11\1\0\4\11\5\0\51\11"+
    "\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11\112\0\u51cd\11"+
    "\63\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11\12\33\2\11"+
    "\24\0\60\11\4\0\12\11\1\0\31\11\7\0\123\11\45\0\11\11"+
    "\2\0\147\11\2\0\4\11\1\0\4\11\14\0\13\11\115\0\60\11"+
    "\20\0\1\11\7\0\64\11\14\0\105\11\13\0\12\33\6\0\30\11"+
    "\3\0\1\11\4\0\12\33\44\11\2\0\44\11\14\0\35\11\3\0"+
    "\101\11\16\0\1\11\12\33\46\0\67\11\11\0\16\11\2\0\12\33"+
    "\6\0\27\11\3\0\2\11\4\0\103\11\30\0\3\11\2\0\20\11"+
    "\2\0\5\11\12\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11"+
    "\1\0\7\11\221\0\53\11\1\0\2\11\2\0\12\33\6\0\u2ba4\11"+
    "\14\0\27\11\4\0\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11"+
    "\14\0\5\11\5\0\14\11\1\0\15\11\1\0\5\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11"+
    "\2\0\66\11\50\0\15\11\3\0\20\11\20\0\7\11\14\0\2\11"+
    "\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\11"+
    "\4\0\1\11\13\0\12\33\7\0\32\11\4\0\1\11\1\0\32\11"+
    "\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11"+
    "\3\0\2\11\3\0\2\11\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\0\1\3\3\0\1\4\2\5"+
    "\1\6\1\7\2\10\1\11\3\10\1\1\1\6\1\2"+
    "\1\6\1\2\1\12\1\13\2\4\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\4\3\23\1\24\1\25"+
    "\1\26\1\27\2\23\1\30\1\23\1\3\1\6\1\3"+
    "\2\4\1\31\1\32\1\33\1\34\5\35\1\36\2\35"+
    "\1\37\1\40\1\41\3\10\1\0\2\42\1\0\1\43"+
    "\1\44\1\45\1\0\1\46\4\23\1\0\1\3\1\0"+
    "\1\47\1\46\1\35\1\0\1\50\1\0\1\51\2\52"+
    "\3\35\3\10\1\43\1\53\3\23\1\3\1\47\1\0"+
    "\2\50\1\35\1\51\1\54\2\35\3\10\1\53\1\55"+
    "\1\23\1\54\1\56\3\10\1\23\1\57\1\60\1\61"+
    "\1\23\1\10\1\23\1\10\1\62\4\10\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u01ce\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u01ce\0\u041a\0\u0444\0\u046e\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\u0540\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba"+
    "\0\u06e4\0\u01ce\0\u01ce\0\u01ce\0\u070e\0\u0738\0\u0762\0\u078c"+
    "\0\u07b6\0\u01ce\0\u07e0\0\u080a\0\u0834\0\u01ce\0\u0276\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0444\0\u0906\0\u0930\0\u046e\0\u0498"+
    "\0\u04c2\0\u06ba\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u078c\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2"+
    "\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u01ce"+
    "\0\u0df2\0\u070e\0\u01ce\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0540\0\u0f96\0\u0fc0\0\u07b6"+
    "\0\u0fea\0\u1014\0\u103e\0\u1068\0\u02a0\0\u02a0\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\u113a\0\u04ec\0\u1164\0\u118e\0\u11b8\0\u11e2"+
    "\0\u02a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\3\14\1\21\1\22"+
    "\4\14\1\23\4\14\1\22\1\24\1\25\6\22\3\14"+
    "\1\26\7\22\1\14\1\22\1\14\1\27\1\15\1\16"+
    "\1\30\46\27\1\31\1\15\1\16\1\32\3\31\1\33"+
    "\42\31\1\14\1\15\1\16\1\17\14\14\1\34\32\14"+
    "\1\15\1\16\1\17\4\14\2\35\11\14\11\35\3\14"+
    "\10\35\1\14\1\35\2\14\1\15\1\16\1\17\4\14"+
    "\1\36\1\37\1\14\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\14\1\46\11\37\1\14\1\47\1\50\10\37"+
    "\1\14\1\37\1\14\1\51\1\15\1\16\1\17\3\51"+
    "\1\52\2\53\4\51\1\54\1\55\1\51\1\56\1\57"+
    "\1\60\3\53\1\61\3\53\1\62\3\51\10\53\1\63"+
    "\1\53\1\51\1\64\1\15\1\16\1\65\3\64\1\66"+
    "\42\64\1\14\1\15\1\16\1\17\2\14\1\67\1\70"+
    "\3\71\1\14\1\72\2\14\1\73\1\45\1\14\1\74"+
    "\11\71\3\14\10\71\1\14\1\71\1\14\1\75\1\15"+
    "\1\16\1\17\2\75\1\76\1\77\1\100\1\101\2\75"+
    "\1\72\2\75\1\102\3\75\1\103\3\101\1\104\3\101"+
    "\1\105\3\75\10\101\1\75\1\101\1\75\1\14\1\15"+
    "\1\16\1\17\46\14\53\0\1\15\53\0\1\17\53\0"+
    "\1\106\54\0\3\107\10\0\11\107\3\0\10\107\1\0"+
    "\1\107\11\0\2\22\11\0\11\22\3\0\10\22\1\0"+
    "\1\22\11\0\2\22\11\0\3\22\1\110\5\22\3\0"+
    "\10\22\1\0\1\22\11\0\2\22\11\0\11\22\3\0"+
    "\2\22\1\111\5\22\1\0\1\22\11\0\2\22\11\0"+
    "\11\22\3\0\1\22\1\112\6\22\1\0\1\22\1\0"+
    "\1\27\2\0\50\27\2\0\1\30\46\27\1\31\2\0"+
    "\4\31\1\33\43\31\2\0\1\32\3\31\1\33\42\31"+
    "\1\33\2\113\47\33\10\0\2\35\11\0\11\35\3\0"+
    "\10\35\1\0\1\35\11\0\2\114\1\115\10\0\11\114"+
    "\1\116\2\0\10\114\1\0\1\114\11\0\2\117\11\0"+
    "\11\117\1\116\2\0\10\117\1\0\1\117\11\0\2\120"+
    "\11\0\11\120\3\0\10\120\1\0\1\120\11\0\2\121"+
    "\11\0\11\121\3\0\10\121\1\0\1\121\1\0\1\51"+
    "\3\0\12\51\2\0\1\51\2\0\27\51\1\52\3\122"+
    "\3\52\1\123\6\52\2\122\1\52\2\122\27\52\1\51"+
    "\3\0\4\51\2\53\4\51\2\0\1\51\2\0\11\53"+
    "\1\124\2\51\10\53\1\51\1\53\2\51\3\0\4\51"+
    "\2\53\4\51\2\0\1\51\2\0\1\53\1\125\7\53"+
    "\1\124\2\51\10\53\1\51\1\53\2\51\3\0\4\51"+
    "\2\53\4\51\2\0\1\51\2\0\5\53\1\126\3\53"+
    "\1\124\2\51\10\53\1\51\1\53\2\51\3\0\4\51"+
    "\2\53\4\51\2\0\1\51\2\0\10\53\1\62\1\124"+
    "\2\51\10\53\1\51\1\53\2\51\3\0\12\51\2\0"+
    "\1\51\2\0\14\51\1\127\12\51\1\64\2\0\50\64"+
    "\2\0\1\65\46\64\1\66\2\130\4\66\1\131\42\66"+
    "\1\132\2\0\3\132\1\133\43\132\7\122\1\134\42\122"+
    "\10\0\3\71\10\0\11\71\3\0\10\71\1\0\1\71"+
    "\1\0\1\75\3\0\10\75\1\0\2\75\1\0\32\75"+
    "\1\135\2\0\1\136\2\135\1\137\5\135\1\136\2\135"+
    "\1\136\32\135\1\77\3\140\3\77\1\141\4\77\1\140"+
    "\2\77\1\140\32\77\1\75\3\0\4\75\2\142\1\143"+
    "\1\75\1\0\2\75\1\0\3\75\11\142\1\144\2\75"+
    "\10\142\1\75\1\142\2\75\3\0\4\75\2\101\2\75"+
    "\1\0\2\75\1\0\3\75\11\101\1\144\2\75\10\101"+
    "\1\75\1\101\2\75\3\0\4\75\2\101\2\75\1\0"+
    "\2\75\1\0\3\75\1\101\1\145\7\101\1\144\2\75"+
    "\10\101\1\75\1\101\2\75\3\0\4\75\2\101\2\75"+
    "\1\0\2\75\1\0\3\75\5\101\1\146\3\101\1\144"+
    "\2\75\10\101\1\75\1\101\2\75\3\0\4\75\2\101"+
    "\2\75\1\0\2\75\1\0\3\75\10\101\1\105\1\144"+
    "\2\75\10\101\1\75\1\101\1\75\10\0\2\22\11\0"+
    "\11\22\3\0\5\22\1\147\2\22\1\0\1\22\11\0"+
    "\2\22\11\0\11\22\3\0\3\22\1\150\4\22\1\0"+
    "\1\22\11\0\2\22\11\0\7\22\1\151\1\22\3\0"+
    "\10\22\1\0\1\22\1\0\7\113\1\31\42\113\10\0"+
    "\3\115\10\0\11\115\3\0\10\115\1\0\1\115\11\0"+
    "\2\152\11\0\11\152\3\0\10\152\1\0\1\152\1\0"+
    "\1\51\3\0\3\51\1\52\6\51\2\0\1\51\2\0"+
    "\30\51\3\0\4\51\2\153\4\51\2\0\1\51\2\0"+
    "\11\153\3\51\10\153\1\51\1\153\2\51\3\0\4\51"+
    "\2\53\4\51\2\0\1\51\2\0\2\53\1\154\6\53"+
    "\1\124\2\51\10\53\1\51\1\53\2\51\3\0\4\51"+
    "\2\53\4\51\2\0\1\51\2\0\6\53\1\155\2\53"+
    "\1\124\2\51\10\53\1\51\1\53\2\51\3\0\12\51"+
    "\2\0\1\51\2\0\25\51\1\156\1\51\7\130\1\157"+
    "\42\130\1\64\2\0\4\64\1\66\42\64\1\132\2\0"+
    "\3\132\1\160\43\132\6\0\1\161\52\0\1\122\42\0"+
    "\1\135\2\0\1\136\2\135\1\162\5\135\1\136\2\135"+
    "\1\136\32\135\1\136\2\0\3\136\1\163\43\136\1\75"+
    "\3\0\2\75\1\164\5\75\1\0\2\75\1\0\32\75"+
    "\7\140\1\165\42\140\1\75\3\0\3\75\1\77\4\75"+
    "\1\0\2\75\1\0\33\75\3\0\4\75\3\143\1\75"+
    "\1\0\2\75\1\0\3\75\11\143\3\75\10\143\1\75"+
    "\1\143\2\75\3\0\4\75\2\166\2\75\1\0\2\75"+
    "\1\0\3\75\11\166\3\75\10\166\1\75\1\166\2\75"+
    "\3\0\4\75\2\101\2\75\1\0\2\75\1\0\3\75"+
    "\2\101\1\167\6\101\1\144\2\75\10\101\1\75\1\101"+
    "\2\75\3\0\4\75\2\101\2\75\1\0\2\75\1\0"+
    "\3\75\6\101\1\170\2\101\1\144\2\75\10\101\1\75"+
    "\1\101\1\75\10\0\2\22\11\0\11\22\3\0\6\22"+
    "\1\171\1\22\1\0\1\22\11\0\2\22\11\0\5\22"+
    "\1\172\3\22\3\0\10\22\1\0\1\22\11\0\2\22"+
    "\11\0\3\22\1\173\5\22\3\0\10\22\1\0\1\22"+
    "\11\0\2\117\11\0\11\117\3\0\10\117\1\0\1\117"+
    "\1\0\1\51\3\0\4\51\2\174\4\51\2\0\1\51"+
    "\2\0\11\174\3\51\10\174\1\51\1\174\2\51\3\0"+
    "\4\51\2\53\4\51\2\0\1\51\2\0\3\53\1\175"+
    "\5\53\1\124\2\51\10\53\1\51\1\53\2\51\3\0"+
    "\4\51\2\53\4\51\2\0\1\51\2\0\7\53\1\154"+
    "\1\53\1\124\2\51\10\53\1\51\1\53\2\51\3\0"+
    "\12\51\2\0\1\51\2\0\15\51\1\176\11\51\7\0"+
    "\1\130\50\0\1\160\43\0\1\75\3\0\2\75\1\162"+
    "\5\75\1\0\2\75\1\0\32\75\7\0\1\140\42\0"+
    "\1\75\3\0\4\75\2\177\2\75\1\0\2\75\1\0"+
    "\3\75\11\177\3\75\10\177\1\75\1\177\2\75\3\0"+
    "\4\75\2\101\2\75\1\0\2\75\1\0\3\75\3\101"+
    "\1\200\5\101\1\144\2\75\10\101\1\75\1\101\2\75"+
    "\3\0\4\75\2\101\2\75\1\0\2\75\1\0\3\75"+
    "\7\101\1\167\1\101\1\144\2\75\10\101\1\75\1\101"+
    "\1\75\10\0\2\22\11\0\11\22\3\0\7\22\1\201"+
    "\1\0\1\22\11\0\2\22\11\0\1\202\10\22\3\0"+
    "\10\22\1\0\1\22\11\0\2\22\11\0\1\22\1\203"+
    "\7\22\3\0\10\22\1\0\1\22\1\0\1\51\3\0"+
    "\4\51\2\174\4\51\2\0\1\51\2\0\11\174\1\124"+
    "\2\51\10\174\1\51\1\174\2\51\3\0\12\51\2\0"+
    "\1\51\2\0\22\51\1\204\4\51\1\75\3\0\4\75"+
    "\2\177\2\75\1\0\2\75\1\0\3\75\11\177\1\144"+
    "\2\75\10\177\1\75\1\177\1\75\10\0\2\22\11\0"+
    "\3\22\1\205\5\22\3\0\10\22\1\0\1\22\11\0"+
    "\2\22\11\0\3\22\1\206\5\22\3\0\10\22\1\0"+
    "\1\22\11\0\2\22\11\0\1\207\10\22\3\0\10\22"+
    "\1\0\1\22\1\0\1\51\3\0\12\51\2\0\1\51"+
    "\2\0\1\51\1\210\25\51\10\0\2\22\11\0\11\22"+
    "\3\0\4\22\1\211\3\22\1\0\1\22\1\0\1\51"+
    "\3\0\12\51\2\0\1\51\2\0\3\51\1\212\23\51"+
    "\10\0\2\22\11\0\2\22\1\213\6\22\3\0\10\22"+
    "\1\0\1\22\1\0\1\51\3\0\12\51\2\0\1\51"+
    "\2\0\26\51\1\214\10\0\2\22\11\0\11\22\3\0"+
    "\2\22\1\215\5\22\1\0\1\22\11\0\2\22\11\0"+
    "\11\22\3\0\3\22\1\216\4\22\1\0\1\22\11\0"+
    "\2\22\11\0\5\22\1\217\3\22\3\0\10\22\1\0"+
    "\1\22\11\0\2\22\11\0\1\220\10\22\3\0\10\22"+
    "\1\0\1\22\11\0\2\22\11\0\3\22\1\221\5\22"+
    "\3\0\10\22\1\0\1\22\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\4\0\1\1\3\0\2\11\5\1\1\11"+
    "\10\1\1\11\3\1\7\11\5\1\4\11\12\1\3\11"+
    "\5\1\1\11\3\1\1\11\4\1\1\0\2\1\1\0"+
    "\3\1\1\0\5\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\17\1\1\11\1\0\1\1\1\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ImpexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1994) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
          }
        case 52: break;
        case 32: 
          { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
          }
        case 53: break;
        case 46: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.BOOLEAN;
          }
        case 54: break;
        case 3: 
          { return ImpexTypes.BEAN_SHELL_BODY;
          }
        case 55: break;
        case 15: 
          { return ImpexTypes.PARAMETERS_SEPARATOR;
          }
        case 56: break;
        case 30: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
          }
        case 57: break;
        case 22: 
          { return ImpexTypes.DEFAULT_PATH_DELIMITER;
          }
        case 58: break;
        case 35: 
          { return ImpexTypes.HEADER_PARAMETER_NAME;
          }
        case 59: break;
        case 12: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.SQUARE_BRACKETS;
          }
        case 60: break;
        case 13: 
          { return ImpexTypes.SQUARE_BRACKETS;
          }
        case 61: break;
        case 10: 
          { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 62: break;
        case 2: 
          { return ImpexTypes.MACRO_VALUE;
          }
        case 63: break;
        case 29: 
          { return ImpexTypes.ATTRIBUTE_VALUE;
          }
        case 64: break;
        case 41: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.DOUBLE_STRING;
          }
        case 65: break;
        case 6: 
          { return TokenType.WHITE_SPACE;
          }
        case 66: break;
        case 26: 
          { yybegin(HEADER_LINE); return ImpexTypes.SQUARE_BRACKETS;
          }
        case 67: break;
        case 28: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
          }
        case 68: break;
        case 27: 
          { return ImpexTypes.ATTRIBUTE_SEPARATOR;
          }
        case 69: break;
        case 14: 
          { return ImpexTypes.ROUND_BRACKETS;
          }
        case 70: break;
        case 23: 
          { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
          }
        case 71: break;
        case 47: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
          }
        case 72: break;
        case 40: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.SINGLE_STRING;
          }
        case 73: break;
        case 21: 
          { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
          }
        case 74: break;
        case 45: 
          { return ImpexTypes.BOOLEAN;
          }
        case 75: break;
        case 38: 
          { return ImpexTypes.DOUBLE_STRING;
          }
        case 76: break;
        case 51: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
          }
        case 77: break;
        case 33: 
          { yybegin(MACRO_DECLARATION); return ImpexTypes.MACRO_DECLARATION;
          }
        case 78: break;
        case 7: 
          { yybegin(COMMENT); return ImpexTypes.COMMENT_MARKER;
          }
        case 79: break;
        case 1: 
          { return ImpexTypes.COMMENT_BODY;
          }
        case 80: break;
        case 50: 
          { return ImpexTypes.FIELD_VALUE_IGNORE;
          }
        case 81: break;
        case 8: 
          { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
          }
        case 82: break;
        case 4: 
          { return TokenType.BAD_CHARACTER;
          }
        case 83: break;
        case 42: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.MACRO_USAGE;
          }
        case 84: break;
        case 37: 
          { return ImpexTypes.DOCUMENT_ID;
          }
        case 85: break;
        case 44: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.CLASS_WITH_PACKAGE;
          }
        case 86: break;
        case 39: 
          { return ImpexTypes.SINGLE_STRING;
          }
        case 87: break;
        case 9: 
          { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 88: break;
        case 17: 
          { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 89: break;
        case 25: 
          { return ImpexTypes.ATTRIBUTE_NAME;
          }
        case 90: break;
        case 5: 
          { yybegin(YYINITIAL); return ImpexTypes.CRLF;
          }
        case 91: break;
        case 31: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.DIGIT;
          }
        case 92: break;
        case 49: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
          }
        case 93: break;
        case 18: 
          { return ImpexTypes.ALTERNATIVE_PATTERN;
          }
        case 94: break;
        case 24: 
          { return ImpexTypes.DIGIT;
          }
        case 95: break;
        case 34: 
          { return ImpexTypes.MACRO_USAGE;
          }
        case 96: break;
        case 36: 
          { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
          }
        case 97: break;
        case 16: 
          { return ImpexTypes.COMMA;
          }
        case 98: break;
        case 19: 
          { return ImpexTypes.FIELD_VALUE;
          }
        case 99: break;
        case 11: 
          { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
          }
        case 100: break;
        case 43: 
          { return ImpexTypes.CLASS_WITH_PACKAGE;
          }
        case 101: break;
        case 20: 
          { return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 102: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
