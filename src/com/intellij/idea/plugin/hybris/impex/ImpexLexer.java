/* The following code was generated by JFlex 1.4.3 on 31/08/14 17:00 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/08/14 17:00 from the specification file
 * <tt>/home/sasha/sources/idea/Hybris-Impex-Synax-Highlight/src/com/intellij/idea/plugin/hybris/impex/Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BEAN_SHELL = 16;
  public static final int HEADER_MODE = 8;
  public static final int HEADER_TYPE = 10;
  public static final int FIELD_VALUE = 14;
  public static final int MACRO_DECLARATION = 6;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_FIELD_VALUE = 12;
  public static final int COMMENT = 2;
  public static final int WAITING_MACRO_VALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  6,  6, 
     7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\1\1\0\1\3\1\2\16\10\4\0\1\32\1\0"+
    "\1\6\1\4\1\11\1\5\1\0\1\0\4\0\1\31\3\0\12\10"+
    "\1\0\1\30\1\33\1\7\1\42\2\0\1\23\2\10\1\22\1\15"+
    "\3\10\1\12\3\10\1\25\1\13\1\26\1\21\1\10\1\16\1\14"+
    "\1\17\1\20\1\27\4\10\4\0\1\24\1\0\4\10\1\41\1\10"+
    "\1\35\1\10\1\34\4\10\1\36\1\37\2\10\1\40\10\10\4\0"+
    "\41\10\2\0\4\10\4\0\1\10\2\0\1\10\7\0\1\10\4\0"+
    "\1\10\5\0\27\10\1\0\37\10\1\0\u01ca\10\4\0\14\10\16\0"+
    "\5\10\7\0\1\10\1\0\1\10\21\0\165\10\1\0\2\10\2\0"+
    "\4\10\10\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0"+
    "\123\10\1\0\213\10\1\0\5\10\2\0\236\10\11\0\46\10\2\0"+
    "\1\10\7\0\47\10\7\0\1\10\1\0\55\10\1\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\10\10\0\33\10\5\0\3\10\15\0"+
    "\5\10\6\0\1\10\4\0\13\10\5\0\112\10\4\0\146\10\1\0"+
    "\11\10\1\0\12\10\1\0\23\10\2\0\1\10\17\0\74\10\2\0"+
    "\145\10\16\0\66\10\4\0\1\10\5\0\56\10\22\0\34\10\104\0"+
    "\1\10\1\0\13\10\67\0\33\10\1\0\144\10\2\0\12\10\1\0"+
    "\7\10\1\0\7\10\1\0\3\10\1\0\10\10\2\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0\11\10\2\0"+
    "\2\10\2\0\4\10\10\0\1\10\4\0\2\10\1\0\5\10\2\0"+
    "\16\10\7\0\1\10\5\0\3\10\1\0\6\10\4\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\2\0"+
    "\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0"+
    "\4\10\1\0\1\10\7\0\20\10\13\0\3\10\1\0\11\10\1\0"+
    "\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0"+
    "\12\10\1\0\3\10\1\0\3\10\2\0\1\10\17\0\4\10\2\0"+
    "\12\10\1\0\1\10\17\0\3\10\1\0\10\10\2\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0\11\10\2\0"+
    "\2\10\2\0\3\10\10\0\2\10\4\0\2\10\1\0\5\10\2\0"+
    "\12\10\1\0\1\10\20\0\2\10\1\0\6\10\3\0\3\10\1\0"+
    "\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0"+
    "\3\10\3\0\14\10\4\0\5\10\3\0\3\10\1\0\4\10\2\0"+
    "\1\10\6\0\1\10\16\0\12\10\11\0\1\10\7\0\3\10\1\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0"+
    "\10\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\10\6\0"+
    "\4\10\2\0\12\10\22\0\2\10\1\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\2\0\11\10\1\0\3\10\1\0"+
    "\4\10\7\0\2\10\7\0\1\10\1\0\4\10\2\0\12\10\1\0"+
    "\2\10\17\0\2\10\1\0\10\10\1\0\3\10\1\0\51\10\2\0"+
    "\10\10\1\0\3\10\1\0\5\10\10\0\1\10\10\0\4\10\2\0"+
    "\12\10\12\0\6\10\2\0\2\10\1\0\22\10\3\0\30\10\1\0"+
    "\11\10\1\0\1\10\2\0\7\10\3\0\1\10\4\0\6\10\1\0"+
    "\1\10\1\0\10\10\22\0\2\10\15\0\72\10\4\0\20\10\1\0"+
    "\12\10\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0"+
    "\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0"+
    "\1\10\2\0\2\10\1\0\15\10\1\0\3\10\2\0\5\10\1\0"+
    "\1\10\1\0\6\10\2\0\12\10\2\0\4\10\40\0\1\10\27\0"+
    "\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0"+
    "\12\10\1\0\44\10\4\0\24\10\1\0\22\10\1\0\44\10\11\0"+
    "\1\10\71\0\112\10\6\0\116\10\2\0\46\10\1\0\1\10\5\0"+
    "\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0"+
    "\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0"+
    "\71\10\1\0\4\10\2\0\103\10\2\0\3\10\40\0\20\10\20\0"+
    "\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0"+
    "\3\10\17\0\15\10\1\0\7\10\13\0\25\10\13\0\24\10\14\0"+
    "\15\10\1\0\3\10\1\0\2\10\14\0\124\10\3\0\1\10\3\0"+
    "\3\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\10\10\0"+
    "\53\10\5\0\106\10\12\0\35\10\3\0\14\10\4\0\14\10\12\0"+
    "\50\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0\12\10\46\0"+
    "\34\10\4\0\77\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0"+
    "\1\10\130\0\114\10\4\0\12\10\21\0\11\10\14\0\164\10\14\0"+
    "\70\10\10\0\12\10\3\0\61\10\122\0\3\10\1\0\43\10\11\0"+
    "\347\10\25\0\u011a\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0"+
    "\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0"+
    "\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\16\0"+
    "\5\10\32\0\5\10\20\0\2\10\23\0\1\10\13\0\5\10\5\0"+
    "\6\10\1\0\1\10\15\0\1\10\20\0\15\10\3\0\33\10\25\0"+
    "\15\10\4\0\1\10\3\0\14\10\21\0\1\10\4\0\1\10\2\0"+
    "\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0"+
    "\1\10\21\0\51\10\u0a77\0\57\10\1\0\57\10\1\0\205\10\6\0"+
    "\11\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10\7\0"+
    "\1\10\17\0\30\10\11\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\40\10\57\0\1\10\u01d5\0\3\10\31\0\17\10\1\0\5\10\2\0"+
    "\5\10\4\0\126\10\2\0\2\10\2\0\3\10\1\0\132\10\1\0"+
    "\4\10\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0"+
    "\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0"+
    "\34\10\24\0\60\10\4\0\12\10\1\0\31\10\7\0\123\10\45\0"+
    "\11\10\2\0\147\10\2\0\4\10\1\0\4\10\14\0\13\10\115\0"+
    "\60\10\20\0\1\10\7\0\64\10\14\0\105\10\13\0\12\10\6\0"+
    "\30\10\3\0\1\10\4\0\56\10\2\0\44\10\14\0\35\10\3\0"+
    "\101\10\16\0\13\10\46\0\67\10\11\0\16\10\2\0\12\10\6\0"+
    "\27\10\3\0\2\10\4\0\103\10\30\0\3\10\2\0\20\10\2\0"+
    "\5\10\12\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0"+
    "\7\10\221\0\53\10\1\0\2\10\2\0\12\10\6\0\u2ba4\10\14\0"+
    "\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0"+
    "\5\10\5\0\14\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0"+
    "\66\10\50\0\15\10\3\0\20\10\20\0\7\10\14\0\2\10\30\0"+
    "\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0\1\10\4\0"+
    "\1\10\13\0\12\10\7\0\32\10\4\0\1\10\1\0\32\10\13\0"+
    "\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10\3\0"+
    "\2\10\3\0\2\10\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\0\1\2\2\3\1\4\1\5\5\6"+
    "\1\7\1\10\1\1\1\4\2\11\1\12\1\13\1\4"+
    "\2\13\1\2\1\14\1\15\3\6\1\0\1\16\1\13"+
    "\1\0\1\17\3\6\1\16\1\13\3\6\1\13\3\6"+
    "\1\13\1\20\1\21\1\22\1\13\1\6\1\13\1\6"+
    "\1\23\4\6\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0118\0\u0118\0\u0253\0\u0276\0\u0299\0\u0118"+
    "\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\u0118\0\u01c7"+
    "\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u036b\0\u0460"+
    "\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578"+
    "\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u01a4\0\u01a4"+
    "\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u02df\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\3\11\1\16\1\17"+
    "\1\20\3\16\1\21\1\16\1\22\7\16\1\23\1\24"+
    "\1\14\1\11\6\16\1\11\1\25\1\12\1\13\1\26"+
    "\26\25\1\26\10\25\1\11\1\12\1\13\1\14\4\11"+
    "\20\27\2\11\1\14\1\11\6\27\2\11\1\12\1\13"+
    "\1\14\3\11\1\30\22\11\1\14\11\11\1\12\1\13"+
    "\1\14\4\11\20\31\2\11\1\14\1\11\6\31\2\11"+
    "\1\12\1\13\1\14\26\11\1\14\10\11\1\32\1\12"+
    "\1\13\1\33\2\32\1\34\21\32\1\23\1\24\1\14"+
    "\1\35\7\32\1\11\1\12\1\13\1\14\2\11\1\36"+
    "\23\11\1\14\10\11\44\0\1\12\44\0\1\14\26\0"+
    "\1\14\15\0\1\37\45\0\20\16\4\0\6\16\11\0"+
    "\20\40\4\0\6\40\11\0\3\16\1\41\14\16\4\0"+
    "\6\16\11\0\5\16\1\42\12\16\4\0\6\16\11\0"+
    "\11\16\1\43\6\16\4\0\6\16\1\0\1\25\2\0"+
    "\41\25\2\0\1\26\26\25\1\26\10\25\10\0\20\27"+
    "\4\0\6\27\11\0\20\31\4\0\6\31\1\0\1\32"+
    "\2\0\25\32\3\0\11\32\2\0\1\33\24\32\2\0"+
    "\1\14\10\32\1\34\2\44\3\34\1\45\21\34\3\44"+
    "\10\34\1\32\2\0\25\32\3\0\1\32\1\46\6\32"+
    "\6\47\1\50\34\47\10\0\4\16\1\51\13\16\4\0"+
    "\6\16\11\0\15\16\1\52\2\16\4\0\6\16\11\0"+
    "\12\16\1\53\5\16\4\0\6\16\1\0\6\44\1\54"+
    "\34\44\1\32\2\0\3\32\1\34\21\32\3\0\11\32"+
    "\2\0\25\32\3\0\2\32\1\55\5\32\6\0\1\47"+
    "\44\0\5\16\1\56\12\16\4\0\6\16\11\0\16\16"+
    "\1\57\1\16\4\0\6\16\11\0\13\16\1\60\4\16"+
    "\4\0\6\16\7\0\1\44\34\0\1\32\2\0\25\32"+
    "\3\0\3\32\1\61\4\32\10\0\6\16\1\62\11\16"+
    "\4\0\6\16\11\0\17\16\1\63\4\0\6\16\11\0"+
    "\7\16\1\64\10\16\4\0\6\16\1\0\1\32\2\0"+
    "\25\32\3\0\4\32\1\65\3\32\10\0\7\16\1\66"+
    "\10\16\4\0\6\16\11\0\5\16\1\67\12\16\4\0"+
    "\6\16\11\0\5\16\1\70\12\16\4\0\6\16\1\0"+
    "\1\32\2\0\25\32\3\0\5\32\1\71\2\32\10\0"+
    "\14\16\1\72\3\16\4\0\6\16\1\0\1\32\2\0"+
    "\25\32\3\0\6\32\1\73\1\32\10\0\10\16\1\74"+
    "\7\16\4\0\6\16\1\0\1\32\2\0\25\32\3\0"+
    "\7\32\1\75\10\0\11\16\1\76\6\16\4\0\6\16"+
    "\11\0\12\16\1\77\5\16\4\0\6\16\11\0\13\16"+
    "\1\100\4\16\4\0\6\16\11\0\7\16\1\101\10\16"+
    "\4\0\6\16\11\0\5\16\1\102\12\16\4\0\6\16"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1925];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\6\0\2\11\10\1\2\11\3\1\1\11"+
    "\6\1\1\11\4\1\1\0\2\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ImpexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1912) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_UPDATE;
          }
        case 21: break;
        case 8: 
          { yybegin(WAITING_FOR_FIELD_VALUE); return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
          }
        case 22: break;
        case 17: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_REMOVE;
          }
        case 23: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 24: break;
        case 14: 
          { yybegin(FIELD_VALUE); return ImpexTypes.DOUBLE_STRING;
          }
        case 25: break;
        case 10: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_TYPE;
          }
        case 26: break;
        case 19: 
          { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_IGNORE;
          }
        case 27: break;
        case 20: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
          }
        case 28: break;
        case 4: 
          { return TokenType.WHITE_SPACE;
          }
        case 29: break;
        case 9: 
          { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 30: break;
        case 1: 
          { return ImpexTypes.COMMENT_BODY;
          }
        case 31: break;
        case 5: 
          { yybegin(COMMENT); return ImpexTypes.COMMENT_MARKER;
          }
        case 32: break;
        case 12: 
          { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
          }
        case 33: break;
        case 11: 
          { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE;
          }
        case 34: break;
        case 3: 
          { yybegin(YYINITIAL); return ImpexTypes.CRLF;
          }
        case 35: break;
        case 7: 
          { yybegin(WAITING_FOR_FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 36: break;
        case 16: 
          { yybegin(HEADER_MODE); return ImpexTypes.HEADER_MODE_INSERT;
          }
        case 37: break;
        case 13: 
          { yybegin(MACRO_DECLARATION); return ImpexTypes.MACRO_DECLARATION;
          }
        case 38: break;
        case 15: 
          { return ImpexTypes.BEAN_SHELL_BODY;
          }
        case 39: break;
        case 6: 
          { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
          }
        case 40: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
