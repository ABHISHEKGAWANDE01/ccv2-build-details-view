/* The following code was generated by JFlex 1.4.3 on 01/09/14 13:43 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01/09/14 13:43 from the specification file
 * <tt>/home/sasha/sources/idea/Hybris-Impex-Synax-Highlight/src/com/intellij/idea/plugin/hybris/impex/Impex.flex</tt>
 */
class ImpexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BEAN_SHELL = 14;
  public static final int HEADER_PARAMETERS = 20;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 18;
  public static final int HEADER_TYPE = 8;
  public static final int FIELD_VALUE = 12;
  public static final int MODYFIERS_BLOCK = 16;
  public static final int MACRO_DECLARATION = 6;
  public static final int HEADER_LINE = 10;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int WAITING_MACRO_VALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\1\1\0\1\3\1\2\16\11\4\0\1\3\1\0"+
    "\1\7\1\4\1\10\1\5\1\35\1\6\1\14\1\14\2\0\1\16"+
    "\1\0\1\33\1\0\12\32\1\20\1\15\1\54\1\17\1\61\1\0"+
    "\1\34\1\47\2\11\1\46\1\41\3\11\1\36\3\11\1\51\1\37"+
    "\1\52\1\45\1\11\1\42\1\40\1\43\1\44\1\53\4\11\1\12"+
    "\1\0\1\13\1\0\1\50\1\0\1\27\3\11\1\25\1\26\1\56"+
    "\1\11\1\55\2\11\1\30\1\11\1\57\1\60\2\11\1\23\1\31"+
    "\1\22\1\24\5\11\1\0\1\21\2\0\41\11\2\0\4\11\4\0"+
    "\1\11\2\0\1\11\7\0\1\11\4\0\1\11\5\0\27\11\1\0"+
    "\37\11\1\0\u013f\11\31\0\162\11\4\0\14\11\16\0\5\11\11\0"+
    "\1\11\21\0\130\11\5\0\23\11\12\0\1\11\13\0\1\11\1\0"+
    "\3\11\1\0\1\11\1\0\24\11\1\0\54\11\1\0\46\11\1\0"+
    "\5\11\4\0\202\11\1\0\4\11\3\0\105\11\1\0\46\11\2\0"+
    "\2\11\6\0\20\11\41\0\46\11\2\0\1\11\7\0\47\11\11\0"+
    "\21\11\1\0\27\11\1\0\3\11\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\13\0\33\11\5\0\3\11\15\0\4\11\14\0\6\11\13\0"+
    "\32\11\5\0\31\11\7\0\12\32\4\0\146\11\1\0\11\11\1\0"+
    "\12\11\1\0\6\11\12\32\3\11\2\0\1\11\17\0\74\11\2\0"+
    "\3\11\60\0\62\11\u014f\0\71\11\2\0\22\11\2\0\5\11\3\0"+
    "\14\11\2\0\12\32\21\0\3\11\1\0\10\11\2\0\2\11\2\0"+
    "\26\11\1\0\7\11\1\0\1\11\3\0\4\11\2\0\11\11\2\0"+
    "\2\11\2\0\3\11\11\0\1\11\4\0\2\11\1\0\5\11\2\0"+
    "\12\32\4\11\15\0\3\11\1\0\6\11\4\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\11"+
    "\1\0\5\11\4\0\2\11\2\0\3\11\13\0\4\11\1\0\1\11"+
    "\7\0\12\32\5\11\14\0\3\11\1\0\11\11\1\0\3\11\1\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0\12\11\1\0"+
    "\3\11\1\0\3\11\2\0\1\11\17\0\4\11\2\0\12\32\1\0"+
    "\1\11\17\0\3\11\1\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\2\0\10\11\3\0\2\11\2\0"+
    "\3\11\10\0\2\11\4\0\2\11\1\0\3\11\4\0\12\32\1\0"+
    "\1\11\20\0\2\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0"+
    "\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0"+
    "\10\11\1\0\3\11\4\0\5\11\3\0\3\11\1\0\4\11\11\0"+
    "\1\11\17\0\11\32\11\0\1\11\7\0\3\11\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\4\0\7\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\11\0\2\11\4\0\12\32\22\0"+
    "\2\11\1\0\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0"+
    "\5\11\2\0\11\11\1\0\3\11\1\0\4\11\7\0\2\11\7\0"+
    "\1\11\1\0\2\11\4\0\12\32\22\0\2\11\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\20\11\4\0\6\11\2\0\3\11\1\0"+
    "\4\11\11\0\1\11\10\0\2\11\4\0\12\32\22\0\2\11\1\0"+
    "\22\11\3\0\30\11\1\0\11\11\1\0\1\11\2\0\7\11\3\0"+
    "\1\11\4\0\6\11\1\0\1\11\1\0\10\11\22\0\2\11\15\0"+
    "\72\11\4\0\20\11\1\0\12\32\47\0\2\11\1\0\1\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0"+
    "\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\15\11\1\0"+
    "\3\11\2\0\5\11\1\0\1\11\1\0\6\11\2\0\12\32\2\0"+
    "\2\11\42\0\1\11\27\0\2\11\6\0\12\32\13\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\12\11\1\0\42\11\6\0\24\11\1\0"+
    "\6\11\4\0\10\11\1\0\44\11\11\0\1\11\71\0\42\11\1\0"+
    "\5\11\1\0\2\11\1\0\7\11\3\0\4\11\6\0\12\32\6\0"+
    "\12\11\106\0\46\11\12\0\51\11\7\0\132\11\5\0\104\11\5\0"+
    "\122\11\6\0\7\11\1\0\77\11\1\0\1\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\47\11\1\0\1\11\1\0"+
    "\4\11\2\0\37\11\1\0\1\11\1\0\4\11\2\0\7\11\1\0"+
    "\1\11\1\0\4\11\2\0\7\11\1\0\7\11\1\0\27\11\1\0"+
    "\37\11\1\0\1\11\1\0\4\11\2\0\7\11\1\0\47\11\1\0"+
    "\23\11\16\0\11\32\56\0\125\11\14\0\u026c\11\2\0\10\11\12\0"+
    "\32\11\5\0\113\11\3\0\3\11\17\0\15\11\1\0\7\11\13\0"+
    "\25\11\13\0\24\11\14\0\15\11\1\0\3\11\1\0\2\11\14\0"+
    "\124\11\3\0\1\11\3\0\3\11\2\0\12\32\41\0\3\11\2\0"+
    "\12\32\6\0\130\11\10\0\52\11\126\0\35\11\3\0\14\11\4\0"+
    "\14\11\12\0\12\32\36\11\2\0\5\11\u038b\0\154\11\224\0\234\11"+
    "\4\0\132\11\6\0\26\11\2\0\6\11\2\0\46\11\2\0\6\11"+
    "\2\0\10\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\37\11"+
    "\2\0\65\11\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11"+
    "\3\0\4\11\2\0\6\11\4\0\15\11\5\0\3\11\1\0\7\11"+
    "\17\0\4\11\32\0\5\11\20\0\2\11\23\0\1\11\13\0\4\11"+
    "\6\0\6\11\1\0\1\11\15\0\1\11\40\0\22\11\36\0\15\11"+
    "\4\0\1\11\3\0\6\11\27\0\1\11\4\0\1\11\2\0\12\11"+
    "\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\3\11\1\0\7\11\3\0\3\11\5\0\5\11"+
    "\26\0\44\11\u0e81\0\3\11\31\0\17\11\1\0\5\11\2\0\5\11"+
    "\4\0\126\11\2\0\2\11\2\0\3\11\1\0\137\11\5\0\50\11"+
    "\4\0\136\11\21\0\30\11\70\0\20\11\u0200\0\u19b6\11\112\0\u51a6\11"+
    "\132\0\u048d\11\u0773\0\u2ba4\11\u215c\0\u012e\11\2\0\73\11\225\0\7\11"+
    "\14\0\5\11\5\0\14\11\1\0\15\11\1\0\5\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11"+
    "\2\0\66\11\50\0\15\11\3\0\20\11\20\0\4\11\17\0\2\11"+
    "\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\11"+
    "\4\0\1\11\13\0\12\32\7\0\32\11\4\0\1\11\1\0\32\11"+
    "\12\0\132\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11"+
    "\3\0\2\11\3\0\2\11\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\10\0\1\3\2\4\1\5\1\6"+
    "\2\7\1\10\3\7\1\1\1\5\1\2\1\5\1\2"+
    "\1\11\1\12\2\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\3\3\22\1\23\1\24\1\25\1\26"+
    "\2\22\1\27\1\22\3\3\1\30\1\31\1\32\1\33"+
    "\5\34\1\35\2\34\1\36\1\37\1\40\3\7\1\0"+
    "\1\41\1\0\1\42\1\43\1\44\1\0\1\45\4\22"+
    "\1\0\1\46\1\0\1\47\1\45\1\34\1\0\1\50"+
    "\1\0\1\51\1\52\3\34\3\7\1\42\1\53\3\22"+
    "\1\47\1\0\2\50\1\34\1\51\1\54\2\34\3\7"+
    "\1\53\1\55\1\22\1\54\1\56\3\7\1\22\1\57"+
    "\1\60\1\61\1\22\1\7\1\22\1\7\1\62\4\7"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0226\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u0226\0\u04e2\0\u0514\0\u0546\0\u0226"+
    "\0\u0226\0\u0226\0\u0226\0\u0226\0\u0226\0\u0226\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0226\0\u0226\0\u0226\0\u0226\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0226"+
    "\0\u0226\0\u0226\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u0226"+
    "\0\u08fc\0\u092e\0\u0960\0\u0226\0\u02ee\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0514\0\u0a5a\0\u0546\0\u0578\0\u05aa\0\u079e\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u073a\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0898\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0226\0\u0f6e\0\u0802\0\u0226\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u0640"+
    "\0\u1162\0\u1194\0\u08ca\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"+
    "\0\u0320\0\u0320\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u05dc\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u0320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\3\14\1\21\1\22"+
    "\3\14\1\23\4\14\11\22\3\14\1\24\3\22\1\25"+
    "\1\22\1\26\7\22\1\14\4\22\1\14\1\27\1\15"+
    "\1\16\1\30\56\27\1\31\1\15\1\16\1\32\3\31"+
    "\1\33\52\31\1\14\1\15\1\16\1\17\13\14\1\34"+
    "\43\14\1\15\1\16\1\17\4\14\2\35\10\14\11\35"+
    "\3\14\16\35\1\14\4\35\2\14\1\15\1\16\1\17"+
    "\4\14\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\14\1\46\11\37\1\14\1\47\1\50\16\37"+
    "\1\14\4\37\1\14\1\51\1\15\1\16\1\17\3\51"+
    "\1\52\2\53\3\51\1\54\1\55\1\51\1\56\1\57"+
    "\1\60\3\53\1\61\3\53\1\62\3\51\16\53\1\63"+
    "\4\53\1\51\1\14\1\15\1\16\1\17\3\14\1\64"+
    "\53\14\1\15\1\16\1\17\2\14\1\65\1\66\2\67"+
    "\1\14\1\70\2\14\1\71\1\45\1\14\1\72\11\67"+
    "\3\14\16\67\1\14\4\67\1\14\1\73\1\15\1\16"+
    "\1\17\2\73\1\74\1\75\1\76\1\77\1\73\1\70"+
    "\2\73\1\14\1\73\1\100\1\72\1\101\3\77\1\102"+
    "\3\77\1\103\3\73\16\77\1\73\4\77\1\73\1\14"+
    "\1\15\1\16\1\17\56\14\63\0\1\15\63\0\1\17"+
    "\63\0\1\104\64\0\2\105\10\0\11\105\3\0\16\105"+
    "\1\0\4\105\11\0\2\22\10\0\11\22\3\0\16\22"+
    "\1\0\4\22\11\0\2\22\10\0\11\22\3\0\1\22"+
    "\1\106\14\22\1\0\4\22\11\0\2\22\10\0\11\22"+
    "\3\0\3\22\1\107\12\22\1\0\4\22\11\0\2\22"+
    "\10\0\11\22\3\0\7\22\1\110\6\22\1\0\4\22"+
    "\1\0\1\27\2\0\60\27\2\0\1\30\56\27\1\31"+
    "\2\0\4\31\1\33\53\31\2\0\1\32\3\31\1\33"+
    "\52\31\1\33\2\111\57\33\10\0\2\35\10\0\11\35"+
    "\3\0\16\35\1\0\4\35\11\0\2\112\10\0\11\112"+
    "\1\113\2\0\16\112\1\0\4\112\11\0\2\114\10\0"+
    "\11\114\1\113\2\0\16\114\1\0\4\114\11\0\2\115"+
    "\10\0\11\115\3\0\16\115\1\0\4\115\11\0\2\116"+
    "\10\0\11\116\3\0\16\116\1\0\4\116\1\0\1\51"+
    "\3\0\11\51\2\0\1\51\2\0\40\51\1\52\3\117"+
    "\3\52\1\120\5\52\2\117\1\52\2\117\40\52\1\51"+
    "\3\0\4\51\2\53\3\51\2\0\1\51\2\0\11\53"+
    "\1\121\2\51\16\53\1\51\4\53\2\51\3\0\4\51"+
    "\2\53\3\51\2\0\1\51\2\0\1\53\1\122\7\53"+
    "\1\121\2\51\16\53\1\51\4\53\2\51\3\0\4\51"+
    "\2\53\3\51\2\0\1\51\2\0\5\53\1\123\3\53"+
    "\1\121\2\51\16\53\1\51\4\53\2\51\3\0\4\51"+
    "\2\53\3\51\2\0\1\51\2\0\10\53\1\62\1\121"+
    "\2\51\16\53\1\51\4\53\2\51\3\0\11\51\2\0"+
    "\1\51\2\0\33\51\1\124\4\51\7\125\1\126\52\125"+
    "\1\127\2\0\3\127\1\130\53\127\7\117\1\131\52\117"+
    "\10\0\2\67\10\0\11\67\3\0\16\67\1\0\4\67"+
    "\1\0\1\73\3\0\7\73\1\0\2\73\1\0\1\73"+
    "\2\0\40\73\1\132\2\0\1\133\2\132\1\134\4\132"+
    "\1\133\2\132\1\133\1\132\2\133\40\132\1\75\3\135"+
    "\3\75\1\136\3\75\1\135\2\75\1\135\1\75\2\135"+
    "\40\75\1\73\3\0\4\73\2\137\1\73\1\0\2\73"+
    "\1\0\1\73\2\0\11\137\1\140\2\73\16\137\1\73"+
    "\4\137\2\73\3\0\4\73\2\77\1\73\1\0\2\73"+
    "\1\0\1\73\2\0\11\77\1\140\2\73\16\77\1\73"+
    "\4\77\2\73\3\0\4\73\2\77\1\73\1\0\2\73"+
    "\1\0\1\73\2\0\1\77\1\141\7\77\1\140\2\73"+
    "\16\77\1\73\4\77\2\73\3\0\4\73\2\77\1\73"+
    "\1\0\2\73\1\0\1\73\2\0\5\77\1\142\3\77"+
    "\1\140\2\73\16\77\1\73\4\77\2\73\3\0\4\73"+
    "\2\77\1\73\1\0\2\73\1\0\1\73\2\0\10\77"+
    "\1\103\1\140\2\73\16\77\1\73\4\77\1\73\10\0"+
    "\2\22\10\0\11\22\3\0\2\22\1\143\13\22\1\0"+
    "\4\22\11\0\2\22\10\0\11\22\3\0\13\22\1\144"+
    "\2\22\1\0\4\22\11\0\2\22\10\0\11\22\3\0"+
    "\10\22\1\145\5\22\1\0\4\22\1\0\7\111\1\31"+
    "\52\111\10\0\2\146\10\0\11\146\3\0\16\146\1\0"+
    "\4\146\1\0\1\51\3\0\3\51\1\52\5\51\2\0"+
    "\1\51\2\0\41\51\3\0\4\51\2\147\3\51\2\0"+
    "\1\51\2\0\11\147\3\51\16\147\1\51\4\147\2\51"+
    "\3\0\4\51\2\53\3\51\2\0\1\51\2\0\2\53"+
    "\1\150\6\53\1\121\2\51\16\53\1\51\4\53\2\51"+
    "\3\0\4\51\2\53\3\51\2\0\1\51\2\0\6\53"+
    "\1\151\2\53\1\121\2\51\16\53\1\51\4\53\2\51"+
    "\3\0\11\51\2\0\1\51\2\0\34\51\1\152\3\51"+
    "\7\0\1\125\52\0\1\127\2\0\3\127\1\153\53\127"+
    "\6\0\1\154\62\0\1\117\52\0\1\132\2\0\1\133"+
    "\2\132\1\155\4\132\1\133\2\132\1\133\1\132\2\133"+
    "\40\132\1\133\2\0\3\133\1\156\53\133\1\73\3\0"+
    "\2\73\1\157\4\73\1\0\2\73\1\0\1\73\2\0"+
    "\40\73\7\135\1\160\52\135\1\73\3\0\3\73\1\75"+
    "\3\73\1\0\2\73\1\0\1\73\2\0\41\73\3\0"+
    "\4\73\2\161\1\73\1\0\2\73\1\0\1\73\2\0"+
    "\11\161\3\73\16\161\1\73\4\161\2\73\3\0\4\73"+
    "\2\77\1\73\1\0\2\73\1\0\1\73\2\0\2\77"+
    "\1\162\6\77\1\140\2\73\16\77\1\73\4\77\2\73"+
    "\3\0\4\73\2\77\1\73\1\0\2\73\1\0\1\73"+
    "\2\0\6\77\1\163\2\77\1\140\2\73\16\77\1\73"+
    "\4\77\1\73\10\0\2\22\10\0\11\22\3\0\3\22"+
    "\1\164\12\22\1\0\4\22\11\0\2\22\10\0\11\22"+
    "\3\0\14\22\1\165\1\22\1\0\4\22\11\0\2\22"+
    "\10\0\11\22\3\0\11\22\1\166\4\22\1\0\4\22"+
    "\11\0\2\114\10\0\11\114\3\0\16\114\1\0\4\114"+
    "\1\0\1\51\3\0\4\51\2\167\3\51\2\0\1\51"+
    "\2\0\11\167\3\51\16\167\1\51\4\167\2\51\3\0"+
    "\4\51\2\53\3\51\2\0\1\51\2\0\3\53\1\170"+
    "\5\53\1\121\2\51\16\53\1\51\4\53\2\51\3\0"+
    "\4\51\2\53\3\51\2\0\1\51\2\0\7\53\1\150"+
    "\1\53\1\121\2\51\16\53\1\51\4\53\2\51\3\0"+
    "\11\51\2\0\1\51\2\0\35\51\1\171\2\51\6\0"+
    "\1\153\53\0\1\73\3\0\2\73\1\155\4\73\1\0"+
    "\2\73\1\0\1\73\2\0\40\73\7\0\1\135\52\0"+
    "\1\73\3\0\4\73\2\172\1\73\1\0\2\73\1\0"+
    "\1\73\2\0\11\172\3\73\16\172\1\73\4\172\2\73"+
    "\3\0\4\73\2\77\1\73\1\0\2\73\1\0\1\73"+
    "\2\0\3\77\1\173\5\77\1\140\2\73\16\77\1\73"+
    "\4\77\2\73\3\0\4\73\2\77\1\73\1\0\2\73"+
    "\1\0\1\73\2\0\7\77\1\162\1\77\1\140\2\73"+
    "\16\77\1\73\4\77\1\73\10\0\2\22\10\0\11\22"+
    "\3\0\4\22\1\174\11\22\1\0\4\22\11\0\2\22"+
    "\10\0\11\22\3\0\15\22\1\175\1\0\4\22\11\0"+
    "\2\22\10\0\11\22\3\0\5\22\1\176\10\22\1\0"+
    "\4\22\1\0\1\51\3\0\4\51\2\167\3\51\2\0"+
    "\1\51\2\0\11\167\1\121\2\51\16\167\1\51\4\167"+
    "\2\51\3\0\11\51\2\0\1\51\2\0\36\51\1\177"+
    "\1\51\1\73\3\0\4\73\2\172\1\73\1\0\2\73"+
    "\1\0\1\73\2\0\11\172\1\140\2\73\16\172\1\73"+
    "\4\172\1\73\10\0\2\22\10\0\11\22\3\0\5\22"+
    "\1\200\10\22\1\0\4\22\11\0\2\22\10\0\11\22"+
    "\3\0\3\22\1\201\12\22\1\0\4\22\11\0\2\22"+
    "\10\0\11\22\3\0\3\22\1\202\12\22\1\0\4\22"+
    "\1\0\1\51\3\0\11\51\2\0\1\51\2\0\1\51"+
    "\1\203\36\51\10\0\2\22\10\0\11\22\3\0\12\22"+
    "\1\204\3\22\1\0\4\22\1\0\1\51\3\0\11\51"+
    "\2\0\1\51\2\0\3\51\1\205\34\51\10\0\2\22"+
    "\10\0\11\22\3\0\6\22\1\206\7\22\1\0\4\22"+
    "\1\0\1\51\3\0\11\51\2\0\1\51\2\0\37\51"+
    "\1\207\10\0\2\22\10\0\11\22\3\0\7\22\1\210"+
    "\6\22\1\0\4\22\11\0\2\22\10\0\11\22\3\0"+
    "\10\22\1\211\5\22\1\0\4\22\11\0\2\22\10\0"+
    "\11\22\3\0\11\22\1\212\4\22\1\0\4\22\11\0"+
    "\2\22\10\0\11\22\3\0\5\22\1\213\10\22\1\0"+
    "\4\22\11\0\2\22\10\0\11\22\3\0\3\22\1\214"+
    "\12\22\1\0\4\22\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\10\0\2\11\5\1\1\11\10\1\1\11"+
    "\3\1\7\11\5\1\4\11\10\1\3\11\5\1\1\11"+
    "\3\1\1\11\4\1\1\0\1\1\1\0\3\1\1\0"+
    "\5\1\1\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\15\1\1\11\1\0\1\1\1\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ImpexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1674) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 49: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
          }
        case 52: break;
        case 31: 
          { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
          }
        case 53: break;
        case 46: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.BOOLEAN;
          }
        case 54: break;
        case 38: 
          { return ImpexTypes.BEAN_SHELL_BODY;
          }
        case 55: break;
        case 14: 
          { return ImpexTypes.PARAMETERS_SEPARATOR;
          }
        case 56: break;
        case 21: 
          { return ImpexTypes.DEFAULT_PATH_DELIMITER;
          }
        case 57: break;
        case 34: 
          { return ImpexTypes.HEADER_PARAMETER_NAME;
          }
        case 58: break;
        case 11: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.SQUARE_BRACKETS;
          }
        case 59: break;
        case 12: 
          { return ImpexTypes.SQUARE_BRACKETS;
          }
        case 60: break;
        case 9: 
          { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 61: break;
        case 28: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_VALUE;
          }
        case 62: break;
        case 2: 
          { return ImpexTypes.MACRO_VALUE;
          }
        case 63: break;
        case 41: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.DOUBLE_STRING;
          }
        case 64: break;
        case 5: 
          { return TokenType.WHITE_SPACE;
          }
        case 65: break;
        case 25: 
          { yybegin(HEADER_LINE); return ImpexTypes.SQUARE_BRACKETS;
          }
        case 66: break;
        case 27: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
          }
        case 67: break;
        case 26: 
          { return ImpexTypes.ATTRIBUTE_SEPARATOR;
          }
        case 68: break;
        case 13: 
          { return ImpexTypes.ROUND_BRACKETS;
          }
        case 69: break;
        case 22: 
          { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
          }
        case 70: break;
        case 48: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
          }
        case 71: break;
        case 40: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.SINGLE_STRING;
          }
        case 72: break;
        case 29: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.DEFAULT_PATH_DELIMITER;
          }
        case 73: break;
        case 20: 
          { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
          }
        case 74: break;
        case 45: 
          { return ImpexTypes.BOOLEAN;
          }
        case 75: break;
        case 37: 
          { return ImpexTypes.DOUBLE_STRING;
          }
        case 76: break;
        case 51: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
          }
        case 77: break;
        case 32: 
          { yybegin(MACRO_DECLARATION); return ImpexTypes.MACRO_DECLARATION;
          }
        case 78: break;
        case 6: 
          { yybegin(COMMENT); return ImpexTypes.COMMENT_MARKER;
          }
        case 79: break;
        case 1: 
          { return ImpexTypes.COMMENT_BODY;
          }
        case 80: break;
        case 50: 
          { return ImpexTypes.FIELD_VALUE_IGNORE;
          }
        case 81: break;
        case 7: 
          { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
          }
        case 82: break;
        case 3: 
          { return TokenType.BAD_CHARACTER;
          }
        case 83: break;
        case 42: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.MACRO_USAGE;
          }
        case 84: break;
        case 36: 
          { return ImpexTypes.DOCUMENT_ID;
          }
        case 85: break;
        case 44: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.CLASS_WITH_PACKAGE;
          }
        case 86: break;
        case 39: 
          { return ImpexTypes.SINGLE_STRING;
          }
        case 87: break;
        case 8: 
          { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 88: break;
        case 16: 
          { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
          }
        case 89: break;
        case 24: 
          { return ImpexTypes.ATTRIBUTE_NAME;
          }
        case 90: break;
        case 4: 
          { yybegin(YYINITIAL); return ImpexTypes.CRLF;
          }
        case 91: break;
        case 30: 
          { yybegin(MODYFIERS_BLOCK); return ImpexTypes.DIGIT;
          }
        case 92: break;
        case 47: 
          { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
          }
        case 93: break;
        case 17: 
          { return ImpexTypes.ALTERNATIVE_PATTERN;
          }
        case 94: break;
        case 23: 
          { return ImpexTypes.DIGIT;
          }
        case 95: break;
        case 33: 
          { return ImpexTypes.MACRO_USAGE;
          }
        case 96: break;
        case 35: 
          { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
          }
        case 97: break;
        case 15: 
          { return ImpexTypes.COMMA;
          }
        case 98: break;
        case 18: 
          { return ImpexTypes.FIELD_VALUE;
          }
        case 99: break;
        case 10: 
          { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
          }
        case 100: break;
        case 43: 
          { return ImpexTypes.CLASS_WITH_PACKAGE;
          }
        case 101: break;
        case 19: 
          { return ImpexTypes.FIELD_VALUE_SEPARATOR;
          }
        case 102: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
